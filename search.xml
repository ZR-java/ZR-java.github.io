<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>77-Mybatis</title>
      <link href="/2022/03/31/77-Mybatis/"/>
      <url>/2022/03/31/77-Mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="一、MyBatis简介"><a href="#一、MyBatis简介" class="headerlink" title="一、MyBatis简介"></a>一、MyBatis简介</h1><h3 id="1、MyBatis历史"><a href="#1、MyBatis历史" class="headerlink" title="1、MyBatis历史"></a>1、MyBatis历史</h3><p>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁 移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于 2013年11月迁移到Github。 </p><p>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis提供的持久层框架 包括SQL Maps和Data Access Objects（DAO）。</p><h3 id="2、MyBatis特性"><a href="#2、MyBatis特性" class="headerlink" title="2、MyBatis特性"></a>2、MyBatis特性</h3><ol><li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li><li>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</li><li>MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</li></ol><h3 id="3、MyBatis下载"><a href="#3、MyBatis下载" class="headerlink" title="3、MyBatis下载"></a>3、MyBatis下载</h3><ul><li><a href="https://github.com/mybatis/mybatis-3">MyBatis下载地址</a></li><li><img src="/2022/03/31/77-Mybatis/MyBatis%E4%B8%8B%E8%BD%BD.png" alt="MyBatis下载" loading="lazy"></li></ul><h3 id="4、和其它持久化层技术对比"><a href="#4、和其它持久化层技术对比" class="headerlink" title="4、和其它持久化层技术对比"></a>4、和其它持久化层技术对比</h3><ul><li>JDBC  </li><li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤  <ul><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见  </li><li>代码冗长，开发效率低</li></ul></li><li>Hibernate 和 JPA</li><li>操作简便，开发效率高  <ul><li>程序中的长难复杂 SQL 需要绕过框架  </li><li>内部自动生产的 SQL，不容易做特殊优化  </li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。  </li><li>反射操作太多，导致数据库性能下降</li></ul></li><li>MyBatis</li><li>轻量级，性能出色  <ul><li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据  </li><li>开发效率稍逊于HIbernate，但是完全能够接受</li></ul></li></ul><h1 id="二、搭建MyBatis"><a href="#二、搭建MyBatis" class="headerlink" title="二、搭建MyBatis"></a>二、搭建MyBatis</h1><h3 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h3><ul><li>IDE：idea 2019.2  </li><li>构建工具：maven 3.5.4  </li><li>MySQL版本：MySQL 5.7  </li><li>MyBatis版本：MyBatis 3.5.7</li></ul><h3 id="2、创建maven工程"><a href="#2、创建maven工程" class="headerlink" title="2、创建maven工程"></a>2、创建maven工程</h3><ul><li><h5 id="打包方式：jar"><a href="#打包方式：jar" class="headerlink" title="打包方式：jar"></a>打包方式：jar</h5></li><li><h5 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h5></li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Mybatis核心 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- junit测试 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- MySQL驱动 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h3 id="3、创建MyBatis的核心配置文件"><a href="#3、创建MyBatis的核心配置文件" class="headerlink" title="3、创建MyBatis的核心配置文件"></a>3、创建MyBatis的核心配置文件</h3><blockquote><p>习惯上命名为**<code>mybatis-config.xml</code>**，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。</p><p>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息</p><p>核心配置文件存放的位置是src/main/resources目录下</p></blockquote><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>  <span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>  <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>  <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--设置连接数据库的环境--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/MyBatis<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--引入映射文件--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mappers/UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h3 id="4、创建mapper接口"><a href="#4、创建mapper接口" class="headerlink" title="4、创建mapper接口"></a>4、创建mapper接口</h3><blockquote><p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要提供实现类</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**  * 添加用户信息  */</span>  <span class="token keyword">int</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><h3 id="5、创建MyBatis的映射文件"><a href="#5、创建MyBatis的映射文件" class="headerlink" title="5、创建MyBatis的映射文件"></a>5、创建MyBatis的映射文件</h3><ul><li>相关概念：<strong>ORM</strong>（Object Relationship Mapping）对象关系映射。  <ul><li>对象：Java的实体类对象  </li><li>关系：关系型数据库  </li><li>映射：二者之间的对应关系</li></ul></li></ul><table><thead><tr><th>Java概念</th><th>数据库概念</th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>属性</td><td>字段/列</td></tr><tr><td>对象</td><td>记录/行</td></tr></tbody></table><blockquote><ol><li><p>映射文件的命名规则</p><p>表所对应的实体类的类名+Mapper.xml</p><ul><li>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml </li><li>因此一个映射文件对应一个实体类，对应一张表的操作</li><li>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</li><li>MyBatis映射文件存放的位置是src/main/resources/mappers目录下</li></ul></li><li><p>MyBatis中可以面向接口操作数据，要保证两个一致</p><p>mapper接口的全类名和映射文件的命名空间（namespace）保持一致</p><p>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</p></li></ol></blockquote><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>  <span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>  <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>  <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--int insertUser();--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  insert into t_user values(null,'张三','123',23,'女')  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h3 id="6、通过junit测试功能"><a href="#6、通过junit测试功能" class="headerlink" title="6、通过junit测试功能"></a>6、通过junit测试功能</h3><ul><li>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）</li><li>SqlSessionFactory：是“生产”SqlSession的“工厂”</li><li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//读取MyBatis的核心配置文件</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取SqlSessionFactoryBuilder对象</span>        <span class="token class-name">SqlSessionFactoryBuilder</span> sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span>        <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取sqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span>        <span class="token comment">//SqlSession sqlSession = sqlSessionFactory.openSession();</span>    <span class="token comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交  </span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过代理模式创建UserMapper接口的代理实现类对象</span>        <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//提交事务</span>        <span class="token comment">//sqlSession.commit();</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result:"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>此时需要手动提交事务，如果要自动提交事务，则在获取sqlSession对象时，使用<code>SqlSession sqlSession = sqlSessionFactory.openSession(true);</code>，传入一个Boolean类型的参数，值为true，这样就可以自动提交</li></ul><h3 id="7、加入log4j日志功能"><a href="#7、加入log4j日志功能" class="headerlink" title="7、加入log4j日志功能"></a>7、加入log4j日志功能</h3><ol><li><h5 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- log4j日志 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><h5 id="加入log4j的配置文件"><a href="#加入log4j的配置文件" class="headerlink" title="加入log4j的配置文件"></a>加入log4j的配置文件</h5><ul><li>log4j的配置文件名为log4j.xml，存放的位置是src/main/resources目录下</li><li>日志的级别：FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试) 从左到右打印的内容越来越详细</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">log4j:configuration</span> <span class="token name">SYSTEM</span> <span class="token string">"log4j.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">log4j:</span>configuration</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>log4j</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://jakarta.apache.org/log4j/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.log4j.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Encoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.log4j.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ConversionPattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.sql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">log4j:</span>configuration</span><span class="token punctuation">></span></span></code></pre></li></ol><h1 id="三、核心配置文件详解"><a href="#三、核心配置文件详解" class="headerlink" title="三、核心配置文件详解"></a>三、<span id="1">核心配置文件详解</span></h1><blockquote><p>核心配置文件中的标签必须按照固定的顺序(有的标签可以不写，但顺序一定不能乱)：<br>properties、settings、typeAliases、typeHandlers、objectFactory、objectWrapperFactory、reflectorFactory、plugins、environments、databaseIdProvider、mappers</p></blockquote><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//MyBatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://MyBatis.org/dtd/MyBatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--引入properties文件，此时就可以$&#123;属性名&#125;的方式访问属性值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--将表中字段的下划线自动转换为驼峰--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--开启延迟加载--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--        typeAlias：设置某个具体的类型的别名        属性：        type：需要设置别名的类型的全类名        alias：设置此类型的别名，且别名不区分大小写。若不设置此属性，该类型拥有默认的别名，即类名        --></span>        <span class="token comment">&lt;!--&lt;typeAlias type="com.atguigu.mybatis.bean.User">&lt;/typeAlias>--></span>        <span class="token comment">&lt;!--&lt;typeAlias type="com.atguigu.mybatis.bean.User" alias="user">        &lt;/typeAlias>--></span>        <span class="token comment">&lt;!--以包为单位，设置该包下所有的类型都拥有默认的别名，即类名且不区分大小写--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.bean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    environments：设置多个连接数据库的环境    属性：    default：设置默认使用的环境的id    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql_test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--        environment：设置具体的连接数据库的环境信息        属性：        id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，表示默认使用的环境        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql_test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--            transactionManager：设置事务管理方式            属性：            type：设置事务管理方式，type="JDBC|MANAGED"            type="JDBC"：设置当前环境的事务管理都必须手动处理            type="MANAGED"：设置事务被管理，例如spring中的AOP            --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment">&lt;!--            dataSource：设置数据源            属性：            type：设置数据源的类型，type="POOLED|UNPOOLED|JNDI"            type="POOLED"：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建            type="UNPOOLED"：不使用数据库连接池，即每次使用连接都需要重新创建            type="JNDI"：调用上下文中的数据源            --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--设置驱动类的全类名--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment">&lt;!--设置连接数据库的连接地址--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment">&lt;!--设置连接数据库的用户名--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment">&lt;!--设置连接数据库的密码--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--引入映射文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- &lt;mapper resource="UserMapper.xml"/> --></span>        <span class="token comment">&lt;!--        以包为单位，将包下所有的映射文件引入核心配置文件        注意：1. 此方式必须保证mapper接口和mapper映射文件必须在相同的包下2. mapper接口要和mapper映射文件的名字一致        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><ul><li><img src="/2022/03/31/77-Mybatis/mapper%E6%8E%A5%E5%8F%A3%E5%92%8Cmapper%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E5%9C%A8%E5%90%8C%E4%B8%80%E5%8C%85%E4%B8%8B.png" loading="lazy"></li></ul><h3 id="默认的类型别名"><a href="#默认的类型别名" class="headerlink" title="默认的类型别名"></a>默认的类型别名</h3><p><img src="/2022/03/31/77-Mybatis/%E9%BB%98%E8%AE%A4%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D1.png" loading="lazy"><br><img src="/2022/03/31/77-Mybatis/%E9%BB%98%E8%AE%A4%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D2.png" loading="lazy"></p><h1 id="四、MyBatis的增删改查"><a href="#四、MyBatis的增删改查" class="headerlink" title="四、MyBatis的增删改查"></a>四、MyBatis的增删改查</h1><ol><li><p>添加</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--int insertUser();--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>insert into t_user values(null,'admin','123456',23,'男','12345@qq.com')<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre></li><li><p>删除</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--int deleteUser();--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     delete from t_user where id = 6 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre></li><li><p>修改</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--int updateUser();--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     update t_user set username = '张三' where id = 5 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre></li><li><p>查询一个实体类对象</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--User getUserById();--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from t_user where id = 2  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li><p>查询集合</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--List&lt;User> getUserList();--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from t_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ol><ul><li><p>注意：</p><ol><li>查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射关系  <ul><li>resultType：自动映射，用于属性名和表中字段名一致的情况  </li><li>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况  </li></ul></li><li>当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合，否则会抛出异常TooManyResultsException；但是若查询的数据只有一条，可以使用实体类或集合作为返回值</li></ol></li></ul><h1 id="五、MyBatis获取参数值的两种方式（重点）"><a href="#五、MyBatis获取参数值的两种方式（重点）" class="headerlink" title="五、MyBatis获取参数值的两种方式（重点）"></a>五、MyBatis获取参数值的两种方式（重点）</h1><ul><li>MyBatis获取参数值的两种方式：${}和#{}  </li><li>${}的本质就是字符串拼接，#{}的本质就是占位符赋值  </li><li>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号；但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</li></ul><h3 id="1、单个字面量类型的参数"><a href="#1、单个字面量类型的参数" class="headerlink" title="1、单个字面量类型的参数"></a>1、单个字面量类型的参数</h3><ul><li>若mapper接口中的方法参数为单个的字面量类型，此时可以使用${}和#{}以任意的名称（最好见名识意）获取参数的值，注意${}需要手动加单引号</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--User getUserByUsername(String username);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserByUsername<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from t_user where username = #&#123;username&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--User getUserByUsername(String username);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserByUsername<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from t_user where username = '$&#123;username&#125;'  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="2、多个字面量类型的参数"><a href="#2、多个字面量类型的参数" class="headerlink" title="2、多个字面量类型的参数"></a>2、多个字面量类型的参数</h3><ul><li><p>若mapper接口中的方法参数为多个时，此时MyBatis会自动将这些参数放在一个map集合中</p><ol><li>以arg0,arg1…为键，以参数为值；</li><li>以param1,param2…为键，以参数为值；</li></ol></li><li><p>因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号。</p></li><li><p>使用arg或者param都行，要注意的是，arg是从arg0开始的，param是从param1开始的</p></li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--User checkLogin(String username,String password);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkLogin<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from t_user where username = #&#123;arg0&#125; and password = #&#123;arg1&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--User checkLogin(String username,String password);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkLogin<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from t_user where username = '$&#123;param1&#125;' and password = '$&#123;param2&#125;'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="3、map集合类型的参数"><a href="#3、map集合类型的参数" class="headerlink" title="3、map集合类型的参数"></a>3、map集合类型的参数</h3><ul><li>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在map中只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--User checkLoginByMap(Map&lt;String,Object> map);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkLoginByMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkLoginByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">SqlSessionUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ParameterMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">ParameterMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"usermane"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">checkLoginByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="4、实体类类型的参数"><a href="#4、实体类类型的参数" class="headerlink" title="4、实体类类型的参数"></a>4、实体类类型的参数</h3><ul><li>若mapper接口中的方法参数为实体类对象时此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--int insertUser(User user);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">SqlSessionUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ParameterMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">ParameterMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">,</span><span class="token string">"123@321.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mapper<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="5、使用-Param标识参数"><a href="#5、使用-Param标识参数" class="headerlink" title="5、使用@Param标识参数"></a>5、使用@Param标识参数</h3><ul><li><p>可以通过@Param注解标识mapper接口中的方法参数，此时，会将这些参数放在map集合中 </p><ol><li>以@Param注解的value属性值为键，以参数为值；</li><li>以param1,param2…为键，以参数为值；</li></ol></li><li><p>只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p></li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--User CheckLoginByParam(@Param("username") String username, @Param("password") String password);--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CheckLoginByParam<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkLoginByParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">SqlSessionUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ParameterMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">ParameterMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">mapper<span class="token punctuation">.</span></span>CheckLoginByParam</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>建议分成两种情况进行处理</p><ol><li>实体类类型的参数</li><li>使用@Param标识参数</li></ol></li></ul><h1 id="六、MyBatis的各种查询功能"><a href="#六、MyBatis的各种查询功能" class="headerlink" title="六、MyBatis的各种查询功能"></a>六、MyBatis的各种查询功能</h1><ol><li>如果查询出的数据只有一条，可以通过<ol><li>实体类对象接收</li><li>List集合接收</li><li>Map集合接收，结果<code>&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;</code></li></ol></li><li>如果查询出的数据有多条，一定不能用实体类对象接收，会抛异常TooManyResultsException，可以通过<ol><li>实体类类型的LIst集合接收</li><li>Map类型的LIst集合接收</li><li>在mapper接口的方法上添加@MapKey注解</li></ol></li></ol><h3 id="1、查询一个实体类对象"><a href="#1、查询一个实体类对象" class="headerlink" title="1、查询一个实体类对象"></a>1、查询一个实体类对象</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 根据用户id查询用户信息 * @param id * @return */</span><span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--User getUserById(@Param("id") int id);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from t_user where id = #&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="2、查询一个List集合"><a href="#2、查询一个List集合" class="headerlink" title="2、查询一个List集合"></a>2、查询一个List集合</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 查询所有用户信息 * @return */</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--List&lt;User> getUserList();--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from t_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="3、查询单个数据"><a href="#3、查询单个数据" class="headerlink" title="3、查询单个数据"></a>3、查询单个数据</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 查询用户的总记录数   * @return   * 在MyBatis中，对于Java中常用的类型都设置了类型别名   * 例如：java.lang.Integer-->int|integer   * 例如：int-->_int|_integer   * 例如：Map-->map,List-->list   */</span>  <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--int getCount();--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getCount<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select count(id) from t_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="4、查询一条数据为map集合"><a href="#4、查询一条数据为map集合" class="headerlink" title="4、查询一条数据为map集合"></a>4、查询一条数据为map集合</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 根据用户id查询用户信息为map集合   * @param id   * @return   */</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getUserToMap</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--Map&lt;String, Object> getUserToMap(@Param("id") int id);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserToMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from t_user where id = #&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--结果：&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;--></span></code></pre><h3 id="5、查询多条数据为map集合"><a href="#5、查询多条数据为map集合" class="headerlink" title="5、查询多条数据为map集合"></a>5、查询多条数据为map集合</h3><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 查询所有用户信息为map集合   * @return   * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此时可以将这些map放在一个list集合中获取   */</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">getAllUserToMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--Map&lt;String, Object> getAllUserToMap();--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAllUserToMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from t_user  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--结果：[&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;]--></span></code></pre><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 查询所有用户信息为map集合 * @return * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并且最终要以一个map的方式返回数据，此时需要通过@MapKey注解设置map集合的键，值是每条数据所对应的map集合 */</span><span class="token annotation punctuation">@MapKey</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getAllUserToMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--Map&lt;String, Object> getAllUserToMap();--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAllUserToMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from t_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--结果：&#123;1=&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,2=&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,3=&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;&#125;--></span></code></pre><h1 id="七、特殊SQL的执行"><a href="#七、特殊SQL的执行" class="headerlink" title="七、特殊SQL的执行"></a>七、特殊SQL的执行</h1><h3 id="1、模糊查询"><a href="#1、模糊查询" class="headerlink" title="1、模糊查询"></a>1、模糊查询</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 根据用户名进行模糊查询 * @param username  * @return java.util.List&lt;com.atguigu.mybatis.pojo.User> * @date 2022/2/26 21:56 */</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUserByLike</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--List&lt;User> getUserByLike(@Param("username") String username);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserByLike<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--select * from t_user where username like '%$&#123;mohu&#125;%'--></span>  <span class="token comment">&lt;!--select * from t_user where username like concat('%',#&#123;mohu&#125;,'%')--></span>  select * from t_user where username like "%"#&#123;mohu&#125;"%"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><ul><li>其中<code>select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</code>是最常用的</li></ul><h3 id="2、批量删除"><a href="#2、批量删除" class="headerlink" title="2、批量删除"></a>2、批量删除</h3><ul><li>只能使用${}，如果使用#{}，则解析后的sql语句为<code>delete from t_user where id in (&#39;1,2,3&#39;)</code>，这样是将<code>1,2,3</code>看做是一个整体，只有id为<code>1,2,3</code>的数据会被删除。正确的语句应该是<code>delete from t_user where id in (1,2,3)</code>，或者<code>delete from t_user where id in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;)</code></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 根据id批量删除 * @param ids  * @return int * @date 2022/2/26 22:06 */</span><span class="token keyword">int</span> <span class="token function">deleteMore</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ids"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteMore<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>delete from t_user where id in ($&#123;ids&#125;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//测试类</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">SqlSessionUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SQLMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">SQLMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">deleteMore</span><span class="token punctuation">(</span><span class="token string">"1,2,3,8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3、动态设置表名"><a href="#3、动态设置表名" class="headerlink" title="3、动态设置表名"></a>3、动态设置表名</h3><ul><li>只能使用${}，因为表名不能加单引号</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 查询指定表中的数据 * @param tableName  * @return java.util.List&lt;com.atguigu.mybatis.pojo.User> * @date 2022/2/27 14:41 */</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUserByTable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"tableName"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> tableName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--List&lt;User> getUserByTable(@Param("tableName") String tableName);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserByTable<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from $&#123;tableName&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="4、添加功能获取自增的主键"><a href="#4、添加功能获取自增的主键" class="headerlink" title="4、添加功能获取自增的主键"></a>4、添加功能获取自增的主键</h3><ul><li><p>使用场景</p><ul><li>t_clazz(clazz_id,clazz_name)  </li><li>t_student(student_id,student_name,clazz_id)  </li></ul><ol><li>添加班级信息  </li><li>获取新添加的班级的id  </li><li>为班级分配学生，即将某学生的班级id修改为新添加的班级的id</li></ol></li><li><p>在mapper.xml中设置两个属性</p><ul><li>useGeneratedKeys：设置使用自增的主键  </li><li>keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参数user对象的某个属性中 (比如id属性中)</li></ul></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 添加用户信息 * @param user  * @date 2022/2/27 15:04 */</span><span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--void insertUser(User user);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>insert into t_user values (null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//测试类</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">SqlSessionUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SQLMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">SQLMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"ton"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"123@321.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mapper<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：user&#123;id=10, username='ton', password='123', age=23, sex='男', email='123@321.com'&#125;，自增主键存放到了user的id属性中</span><span class="token punctuation">&#125;</span></code></pre><h1 id="八、自定义映射resultMap"><a href="#八、自定义映射resultMap" class="headerlink" title="八、自定义映射resultMap"></a>八、自定义映射resultMap</h1><h3 id="1、resultMap处理字段和属性的映射关系"><a href="#1、resultMap处理字段和属性的映射关系" class="headerlink" title="1、resultMap处理字段和属性的映射关系"></a>1、resultMap处理字段和属性的映射关系</h3><ul><li>resultMap：设置自定义映射  </li><li>属性：  <ul><li>id：表示自定义映射的唯一标识，不能重复</li><li>type：查询的数据要映射的实体类的类型  </li><li>子标签：  <ul><li>id：设置主键的映射关系  </li><li>result：设置普通字段的映射关系  <ul><li>子标签属性：  </li><li>property：设置映射关系中实体类中的属性名  </li><li>column：设置映射关系中表中的字段名</li></ul></li></ul></li></ul></li><li>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射，即使字段名和属性名一致的属性也要映射，也就是全部属性都要列出来</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--List&lt;Emp> getAllEmp();--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAllEmp<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from t_emp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="2、全局配置文件-lt-settings-gt"><a href="#2、全局配置文件-lt-settings-gt" class="headerlink" title="2、全局配置文件&lt;settings&gt;"></a>2、全局配置文件<code>&lt;settings&gt;</code></h3><ul><li><p>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性名符合Java的规则（使用驼峰）。此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系  </p><ol><li>可以通过为字段起别名的方式，保证和实体类中的属性名保持一致   <pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--List&lt;Emp> getAllEmp();--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAllEmp<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select eid,emp_name empName,age,sex,email from t_emp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li>可以在MyBatis的核心配置文件中的<code>setting</code>标签中，设置一个全局配置信息mapUnderscoreToCamelCase，可以在查询表中数据时，自动将_类型的字段名转换为驼峰，例如：字段名user_name，设置了mapUnderscoreToCamelCase，此时字段名就会转换为userName。<a href="#1">核心配置文件详解</a> <pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ul><h3 id="3、多对一映射处理"><a href="#3、多对一映射处理" class="headerlink" title="3、多对一映射处理"></a>3、多对一映射处理</h3><blockquote><p>查询员工信息以及员工所对应的部门信息</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">Integer</span> eid<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> empName<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Dept</span> dept<span class="token punctuation">;</span><span class="token comment">//...构造器、get、set方法等</span><span class="token punctuation">&#125;</span></code></pre><h5 id="a-gt-级联方式处理映射关系"><a href="#a-gt-级联方式处理映射关系" class="headerlink" title="a&gt;级联方式处理映射关系"></a>a&gt;级联方式处理映射关系</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empAndDeptResultMapOne<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept.did<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept.deptName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Emp getEmpAndDept(@Param("eid")Integer eid);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpAndDept<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empAndDeptResultMapOne<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h5 id="b-gt-使用association处理映射关系"><a href="#b-gt-使用association处理映射关系" class="headerlink" title="b&gt;使用association处理映射关系"></a>b&gt;使用association处理映射关系</h5><ul><li>association：处理多对一的映射关系</li><li>property：需要处理多对的映射关系的属性名</li><li>javaType：该属性的类型</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empAndDeptResultMapTwo<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Emp getEmpAndDept(@Param("eid")Integer eid);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpAndDept<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empAndDeptResultMapTwo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h5 id="c-gt-分步查询"><a href="#c-gt-分步查询" class="headerlink" title="c&gt;分步查询"></a>c&gt;分步查询</h5><ol><li><h6 id="查询员工信息"><a href="#查询员工信息" class="headerlink" title="查询员工信息"></a>查询员工信息</h6></li></ol><ul><li>select：设置分布查询的sql的唯一标识（namespace.SQLId或mapper接口的全类名.方法名）</li><li>column：设置分步查询的条件</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//EmpMapper里的方法</span><span class="token comment">/** * 通过分步查询，员工及所对应的部门信息 * 分步查询第一步：查询员工信息 * @param   * @return com.atguigu.mybatis.pojo.Emp * @date 2022/2/27 20:17 */</span><span class="token class-name">Emp</span> <span class="token function">getEmpAndDeptByStepOne</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"eid"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> eid<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empAndDeptByStepResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        select: 设置分步查询的sql的唯一标识 (namespace.SQLId或mapper接口的全类名.方法名)        column: 设置分步查询的条件    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Emp getEmpAndDeptByStepOne(@Param("eid") Integer eid);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpAndDeptByStepOne<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empAndDeptByStepResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from t_emp where eid = #&#123;eid&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><h6 id="查询部门信息"><a href="#查询部门信息" class="headerlink" title="查询部门信息"></a>查询部门信息</h6></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//DeptMapper里的方法</span><span class="token comment">/** * 通过分步查询，员工及所对应的部门信息 * 分步查询第二步：通过did查询员工对应的部门信息 * @param * @return com.atguigu.mybatis.pojo.Emp * @date 2022/2/27 20:23 */</span><span class="token class-name">Dept</span> <span class="token function">getEmpAndDeptByStepTwo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"did"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> did<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--此处的resultMap仅是处理字段和属性的映射关系,完全可以使用全局配置setting,resultType--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EmpAndDeptByStepTwoResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Dept getEmpAndDeptByStepTwo(@Param("did") Integer did);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpAndDeptByStepTwo<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EmpAndDeptByStepTwoResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from t_dept where did = #&#123;did&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="4、一对多映射处理"><a href="#4、一对多映射处理" class="headerlink" title="4、一对多映射处理"></a>4、一对多映射处理</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dept</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> did<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> deptName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps<span class="token punctuation">;</span><span class="token comment">//...构造器、get、set方法等</span><span class="token punctuation">&#125;</span></code></pre><h5 id="a-gt-collection"><a href="#a-gt-collection" class="headerlink" title="a&gt;collection"></a>a&gt;collection</h5><ul><li>collection：用来处理一对多的映射关系</li><li>ofType：表示该属性对应的集合中存储的数据的类型</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DeptAndEmpResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Dept getDeptAndEmp(@Param("did") Integer did);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getDeptAndEmp<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DeptAndEmpResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from t_dept left join t_emp on t_dept.did = t_emp.did where t_dept.did = #&#123;did&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h5 id="b-gt-分步查询"><a href="#b-gt-分步查询" class="headerlink" title="b&gt;分步查询"></a>b&gt;分步查询</h5><h6 id="1-查询部门信息"><a href="#1-查询部门信息" class="headerlink" title="1. 查询部门信息"></a>1. 查询部门信息</h6><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 通过分步查询，查询部门及对应的所有员工信息 * 分步查询第一步：查询部门信息 * @param did  * @return com.atguigu.mybatis.pojo.Dept * @date 2022/2/27 22:04 */</span><span class="token class-name">Dept</span> <span class="token function">getDeptAndEmpByStepOne</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"did"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> did<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DeptAndEmpByStepOneResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deptName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span><span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo<span class="token punctuation">"</span></span><span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Dept getDeptAndEmpByStepOne(@Param("did") Integer did);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getDeptAndEmpByStepOne<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DeptAndEmpByStepOneResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from t_dept where did = #&#123;did&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h6 id="2-根据部门id查询部门中的所有员工"><a href="#2-根据部门id查询部门中的所有员工" class="headerlink" title="2. 根据部门id查询部门中的所有员工"></a>2. 根据部门id查询部门中的所有员工</h6><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 通过分步查询，查询部门及对应的所有员工信息 * 分步查询第二步：根据部门id查询部门中的所有员工 * @param did * @return java.util.List&lt;com.atguigu.mybatis.pojo.Emp> * @date 2022/2/27 22:10 */</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> <span class="token function">getDeptAndEmpByStepTwo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"did"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> did<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--List&lt;Emp> getDeptAndEmpByStepTwo(@Param("did") Integer did);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getDeptAndEmpByStepTwo<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from t_emp where did = #&#123;did&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a><em>延迟加载</em></h3><ul><li><p>分步查询的优点：可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息：</p></li><li><p>lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加</p></li><li><p>aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载  </p></li><li><p>此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。</p><p>此时可通过association和collection中的fetchType属性设置当前的分步查询是否使用延迟加载，当开启了全局的延迟加载后, 可通过此属性手动控制延迟加载的效果。</p><p>fetchType=”lazy(延迟加载，默认的)|eager(立即加载)”</p></li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--开启延迟加载--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getEmpAndDeptByStepOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">SqlSessionUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">EmpMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmpMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Emp</span> emp <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getEmpAndDeptByStepOne</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">.</span><span class="token function">getEmpName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>关闭延迟加载，两条SQL语句都运行了<img src="/2022/03/31/77-Mybatis/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%951.png" loading="lazy"></li><li>开启延迟加载，只运行获取emp的SQL语句<br><img src="/2022/03/31/77-Mybatis/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%952.png" loading="lazy"></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getEmpAndDeptByStepOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">SqlSessionUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">EmpMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmpMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Emp</span> emp <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getEmpAndDeptByStepOne</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">.</span><span class="token function">getEmpName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">.</span><span class="token function">getDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>开启后，需要用到查询dept的时候才会调用相应的SQL语句<img src="/2022/03/31/77-Mybatis/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%953.png" loading="lazy"></p></li><li><p>fetchType：当开启了全局的延迟加载之后，可以通过该属性手动控制延迟加载的效果，fetchType=”lazy(延迟加载，默认的)|eager(立即加载)”</p>  <pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empAndDeptByStepResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token attr-name">fetchType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre></li></ul><h1 id="九、动态SQL"><a href="#九、动态SQL" class="headerlink" title="九、动态SQL"></a>九、动态SQL</h1><ul><li>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了解决拼接SQL语句字符串时的痛点问题</li></ul><h3 id="1、if"><a href="#1、if" class="headerlink" title="1、if"></a>1、if</h3><ul><li>if标签可通过test属性（即传递过来的数据）的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中的内容不会执行</li><li>在where后面添加一个恒成立条件<code>1=1</code></li><li>这个恒成立条件并不会影响查询的结果<ul><li>这个<code>1=1</code>可以用来拼接<code>and</code>语句，例如：当empName为null时<ul><li>如果不加上恒成立条件，则SQL语句为<code>select * from t_emp where and age = ? and sex = ? and email = ?</code>，此时<code>where</code>会与<code>and</code>连用，SQL语句会报错</li><li>如果加上一个恒成立条件，则SQL语句为<code>select * from t_emp where 1= 1 and age = ? and sex = ? and email = ?</code>，此时不报错</li></ul></li></ul></li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--List&lt;Emp> getEmpByCondition(Emp emp);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from t_emp where 1=1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName != null and empName !=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>and emp_name = #&#123;empName&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age != null and age !=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>and age = #&#123;age&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex != null and sex !=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>and sex = #&#123;sex&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email != null and email !=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>and email = #&#123;email&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="2、where"><a href="#2、where" class="headerlink" title="2、where"></a>2、where</h3><ul><li>where和if一般结合使用：</li><li>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字  <ul><li>若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and/or去掉  </li></ul></li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--List&lt;Emp> getEmpByCondition(Emp emp);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from t_emp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName != null and empName !=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>emp_name = #&#123;empName&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age != null and age !=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>and age = #&#123;age&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex != null and sex !=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>and sex = #&#123;sex&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email != null and email !=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>and email = #&#123;email&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><ul><li><p>注意：where标签不能去掉条件后多余的and/or</p>  <pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--这种用法是错误的，只能去掉条件前面的and/or，条件后面的不行--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName != null and empName !=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>emp_name = #&#123;empName&#125; and<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age != null and age !=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>age = #&#123;age&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="3、trim"><a href="#3、trim" class="headerlink" title="3、trim"></a>3、trim</h3><ul><li>trim用于去掉或添加标签中的内容  </li><li>常用属性<ul><li>prefix：在trim标签中的内容的前面添加某些内容  </li><li>suffix：在trim标签中的内容的后面添加某些内容 </li><li>prefixOverrides：在trim标签中的内容的前面去掉某些内容  </li><li>suffixOverrides：在trim标签中的内容的后面去掉某些内容</li></ul></li><li>若trim中的标签都不满足条件，则trim标签没有任何效果，也就是只剩下<code>select * from t_emp</code></li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--List&lt;Emp> getEmpByCondition(Emp emp);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from t_emp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>where<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>and|or<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName != null and empName !=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>emp_name = #&#123;empName&#125; and<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age != null and age !=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>age = #&#123;age&#125; and<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex != null and sex !=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>sex = #&#123;sex&#125; or<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email != null and email !=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>email = #&#123;email&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//测试类</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getEmpByCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">SqlSessionUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DynamicSQLMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">DynamicSQLMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps<span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getEmpByCondition</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/03/31/77-Mybatis/trim%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" loading="lazy"></p><h3 id="4、choose、when、otherwise"><a href="#4、choose、when、otherwise" class="headerlink" title="4、choose、when、otherwise"></a>4、choose、when、otherwise</h3><ul><li><code>choose、when、otherwise</code>相当于<code>if...else if..else</code></li><li>when至少要有一个，otherwise至多只有一个</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpByChoose<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from t_emp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empName != null and empName != <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>emp_name = #&#123;empName&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age != null and age != <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>age = #&#123;age&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex != null and sex != <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>sex = #&#123;sex&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email != null and email != <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>email = #&#123;email&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>did = 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getEmpByChoose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">SqlSessionUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DynamicSQLMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">DynamicSQLMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getEmpByChoose</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"123@qq.com"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/03/31/77-Mybatis/choose%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" loading="lazy"></p><ul><li>相当于<code>if a else if b else if c else d</code>，只会执行其中一个</li></ul><h3 id="5、foreach"><a href="#5、foreach" class="headerlink" title="5、foreach"></a>5、foreach</h3><ul><li><p>属性：  </p><ul><li>collection：设置要循环的数组或集合  </li><li>item：表示集合或数组中的每一个数据  </li><li>separator：设置循环体之间的分隔符，分隔符前后默认有一个空格，如<code>,</code></li><li>open：设置foreach标签中的内容的开始符  </li><li>close：设置foreach标签中的内容的结束符</li></ul></li><li><p>批量删除</p><blockquote><p>第一种方法:</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--int deleteMoreByArray(@Param("eids")Integer[] eids);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteMoreByArray<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>delete from t_emp where eid in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#&#123;eid&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteMoreByArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">SqlSessionUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DynamicSQLMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">DynamicSQLMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">deleteMoreByArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/03/31/77-Mybatis/foreach%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C01.png" loading="lazy"></p><p>第二种方法:</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteMoreByArray<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete from t_emp where    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>or<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        eid = #&#123;eid&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/03/31/77-Mybatis/image-20220402233917573.png" loading="lazy"></p></blockquote></li><li><p>批量添加</p>  <pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--int insertMoreByList(@Param("emps") List&lt;Emp> emps);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertMoreByList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>insert into t_emp values<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>(null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre>  <pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertMoreByList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">SqlSessionUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DynamicSQLMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">DynamicSQLMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Emp</span> emp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">,</span><span class="token string">"123@321.com"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Emp</span> emp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">,</span><span class="token string">"123@321.com"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Emp</span> emp3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">,</span><span class="token string">"123@321.com"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>emp1<span class="token punctuation">,</span> emp2<span class="token punctuation">,</span> emp3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">insertMoreByList</span><span class="token punctuation">(</span>emps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>  <img src="/2022/03/31/77-Mybatis/foreach%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C2.png" loading="lazy"></p></li></ul><h3 id="6、SQL片段"><a href="#6、SQL片段" class="headerlink" title="6、SQL片段"></a>6、SQL片段</h3><ul><li>sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入</li><li>声明sql片段：<code>&lt;sql&gt;</code>标签</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>eid,emp_name,age,sex,email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span></code></pre><ul><li>引用sql片段：<code>&lt;include&gt;</code>标签</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--List&lt;Emp> getEmpByCondition(Emp emp);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>empColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> from t_emp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h1 id="十、MyBatis的缓存"><a href="#十、MyBatis的缓存" class="headerlink" title="十、MyBatis的缓存"></a>十、MyBatis的缓存</h1><h3 id="1、MyBatis的一级缓存"><a href="#1、MyBatis的一级缓存" class="headerlink" title="1、MyBatis的一级缓存"></a>1、MyBatis的一级缓存</h3><ul><li><p>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问  </p></li><li><p>使一级缓存失效的四种情况：  </p><ol><li>不同的SqlSession对应不同的一级缓存  </li><li>同一个SqlSession但是查询条件不同</li><li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li><li>同一个SqlSession两次查询期间手动清空了缓存(<code>sqlSession.clearCache();</code>)</li></ol></li></ul><h3 id="2、MyBatis的二级缓存"><a href="#2、MyBatis的二级缓存" class="headerlink" title="2、MyBatis的二级缓存"></a>2、MyBatis的二级缓存</h3><ul><li><p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取  </p></li><li><p>二级缓存开启的条件</p><ol><li>在核心配置文件中，设置全局配置属性cacheEnabled=”true”，默认为true，不需要设置</li><li>在映射文件中设置标签<code>&lt;cache /&gt;</code></li><li>二级缓存必须在SqlSession关闭或提交之后有效</li><li>查询的数据所转换的实体类类型必须实现序列化的接口</li></ol></li><li><p>使二级缓存失效的情况：</p><ul><li>两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</li></ul></li></ul><h3 id="3、二级缓存的相关配置"><a href="#3、二级缓存的相关配置" class="headerlink" title="3、二级缓存的相关配置"></a>3、二级缓存的相关配置</h3><p>在mapper配置文件中添加的cache标签可以设置一些属性</p><ul><li><p>eviction属性：缓存回收策略  </p><ul><li>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。  </li><li>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。  </li><li>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。  </li><li>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</li><li>默认的是 LRU</li></ul></li><li><p>flushInterval属性：刷新间隔，单位毫秒</p><p>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句（增删改）时刷新</p></li><li><p>size属性：引用数目，正整数</p><p>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</p></li><li><p>readOnly属性：只读，true/false</p><ul><li>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。  </li><li>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false</li></ul></li></ul><h3 id="4、MyBatis缓存查询的顺序"><a href="#4、MyBatis缓存查询的顺序" class="headerlink" title="4、MyBatis缓存查询的顺序"></a>4、MyBatis缓存查询的顺序</h3><ul><li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用  </li><li>如果二级缓存没有命中，再查询一级缓存  </li><li>如果一级缓存也没有命中，则查询数据库  </li><li>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</li></ul><h3 id="5、整合第三方缓存EHCache（了解）"><a href="#5、整合第三方缓存EHCache（了解）" class="headerlink" title="5、整合第三方缓存EHCache（了解）"></a>5、整合第三方缓存EHCache（了解）</h3><h5 id="a-gt-添加依赖"><a href="#a-gt-添加依赖" class="headerlink" title="a&gt;添加依赖"></a>a&gt;添加依赖</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- Mybatis EHCache整合包 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.caches<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- slf4j日志门面的一个具体实现 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h5 id="b-gt-各个jar包的功能"><a href="#b-gt-各个jar包的功能" class="headerlink" title="b&gt;各个jar包的功能"></a>b&gt;各个jar包的功能</h5><table><thead><tr><th>jar包名称</th><th>作用</th></tr></thead><tbody><tr><td>mybatis-ehcache</td><td>Mybatis和EHCache的整合包</td></tr><tr><td>ehcache</td><td>EHCache核心包</td></tr><tr><td>slf4j-api</td><td>SLF4J日志门面包</td></tr><tr><td>logback-classic</td><td>支持SLF4J门面接口的一个具体实现</td></tr></tbody></table><h5 id="c-gt-创建EHCache的配置文件ehcache-xml"><a href="#c-gt-创建EHCache的配置文件ehcache-xml" class="headerlink" title="c&gt;创建EHCache的配置文件ehcache.xml"></a>c&gt;创建EHCache的配置文件ehcache.xml</h5><ul><li>名字必须叫<code>ehcache.xml</code></li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ehcache</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>noNamespaceSchemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../config/ehcache.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 磁盘保存路径 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>diskStore</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>D:\atguigu\ehcache<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultCache</span>            <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span>            <span class="token attr-name">maxElementsOnDisk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10000000<span class="token punctuation">"</span></span>            <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>            <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span>            <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span>            <span class="token attr-name">diskExpiryThreadIntervalSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span>            <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defaultCache</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ehcache</span><span class="token punctuation">></span></span></code></pre><h5 id="d-gt-设置二级缓存的类型"><a href="#d-gt-设置二级缓存的类型" class="headerlink" title="d&gt;设置二级缓存的类型"></a>d&gt;设置二级缓存的类型</h5><ul><li>在xxxMapper.xml文件中设置二级缓存类型</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.caches.ehcache.EhcacheCache<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h5 id="e-gt-加入logback日志"><a href="#e-gt-加入logback日志" class="headerlink" title="e&gt;加入logback日志"></a>e&gt;加入logback日志</h5><ul><li>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。创建logback的配置文件<code>logback.xml</code>，名字固定，不可改变</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 指定日志输出的位置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 日志输出的格式 --></span>            <span class="token comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --></span>    <span class="token comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 根据特殊需求指定局部日志级别 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.crowd.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h5 id="f-gt-EHCache配置文件说明"><a href="#f-gt-EHCache配置文件说明" class="headerlink" title="f&gt;EHCache配置文件说明"></a>f&gt;EHCache配置文件说明</h5><table><thead><tr><th>属性名</th><th>是否必须</th><th>作用</th></tr></thead><tbody><tr><td>maxElementsInMemory</td><td>是</td><td>在内存中缓存的element的最大数目</td></tr><tr><td>maxElementsOnDisk</td><td>是</td><td>在磁盘上缓存的element的最大数目，若是0表示无穷大</td></tr><tr><td>eternal</td><td>是</td><td>设定缓存的elements是否永远不过期。 如果为true，则缓存的数据始终有效， 如果为false那么还要根据timeToIdleSeconds、timeToLiveSeconds判断</td></tr><tr><td>overflowToDisk</td><td>是</td><td>设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</td></tr><tr><td>timeToIdleSeconds</td><td>否</td><td>当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时， 这些数据便会删除，默认值是0,也就是可闲置时间无穷大</td></tr><tr><td>timeToLiveSeconds</td><td>否</td><td>缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</td></tr><tr><td>diskSpoolBufferSizeMB</td><td>否</td><td>DiskStore(磁盘缓存)的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区</td></tr><tr><td>diskPersistent</td><td>否</td><td>在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false</td></tr><tr><td>diskExpiryThreadIntervalSeconds</td><td>否</td><td>磁盘缓存的清理线程运行间隔，默认是120秒。每个120s， 相应的线程会进行一次EhCache中数据的清理工作</td></tr><tr><td>memoryStoreEvictionPolicy</td><td>否</td><td>当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。 默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出</td></tr></tbody></table><h1 id="十一、MyBatis的逆向工程"><a href="#十一、MyBatis的逆向工程" class="headerlink" title="十一、MyBatis的逆向工程"></a>十一、MyBatis的逆向工程</h1><ul><li>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的</li><li>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：  </li><li>Java实体类  <ul><li>Mapper接口  </li><li>Mapper映射文件</li></ul></li></ul><h3 id="1、创建逆向工程的步骤"><a href="#1、创建逆向工程的步骤" class="headerlink" title="1、创建逆向工程的步骤"></a>1、创建逆向工程的步骤</h3><h5 id="a-gt-添加依赖和插件"><a href="#a-gt-添加依赖和插件" class="headerlink" title="a&gt;添加依赖和插件"></a>a&gt;添加依赖和插件</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- MyBatis核心依赖包 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- junit测试 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- MySQL驱动 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.27<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- log4j日志 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 控制Maven在构建过程中相关配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 构建过程中用到的插件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-generator-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 插件的依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 逆向工程的核心依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-generator-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 数据库连接池 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.mchange<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- MySQL驱动 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.27<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><h5 id="b-gt-创建MyBatis的核心配置文件"><a href="#b-gt-创建MyBatis的核心配置文件" class="headerlink" title="b&gt;创建MyBatis的核心配置文件"></a>b&gt;创建MyBatis的核心配置文件</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h5 id="c-gt-创建逆向工程的配置文件"><a href="#c-gt-创建逆向工程的配置文件" class="headerlink" title="c&gt;创建逆向工程的配置文件"></a>c&gt;创建逆向工程的配置文件</h5><ul><li>文件名必须是：<code>generatorConfig.xml</code></li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">generatorConfiguration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    targetRuntime: 执行生成的逆向工程的版本    MyBatis3Simple: 生成基本的CRUD（清新简洁版）    MyBatis3: 生成带条件的CRUD（奢华尊享版）    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DB2Tables<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyBatis3Simple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 数据库的连接信息 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span>                        <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis<span class="token punctuation">"</span></span>                        <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>                        <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- javaBean的生成策略--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.pojo<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.\src\main\java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>trimStrings<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaModelGenerator</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- SQL映射文件的生成策略 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper<span class="token punctuation">"</span></span>                         <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.\src\main\resources<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- Mapper接口的生成策略 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span>                             <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.\src\main\java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 逆向分析的表 --></span>        <span class="token comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --></span>        <span class="token comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_emp<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_dept<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">></span></span></code></pre><h5 id="d-gt-执行MBG插件的generate目标"><a href="#d-gt-执行MBG插件的generate目标" class="headerlink" title="d&gt;执行MBG插件的generate目标"></a>d&gt;执行MBG插件的generate目标</h5><ul><li><img src="/2022/03/31/77-Mybatis/%E6%89%A7%E8%A1%8CMBG%E6%8F%92%E4%BB%B6%E7%9A%84generate%E7%9B%AE%E6%A0%87.png" loading="lazy"></li><li>如果出现报错：<code>Exception getting JDBC Driver</code>，可能是pom.xml中，数据库驱动配置错误</li><li>dependency中的驱动<img src="/2022/03/31/77-Mybatis/dependency%E4%B8%AD%E7%9A%84%E9%A9%B1%E5%8A%A8.png" loading="lazy"><ul><li>mybatis-generator-maven-plugin插件中的驱动<img src="/2022/03/31/77-Mybatis/%E6%8F%92%E4%BB%B6%E4%B8%AD%E7%9A%84%E9%A9%B1%E5%8A%A8.png" loading="lazy"></li><li>两者的驱动版本应该相同</li></ul></li><li>执行结果<img src="/2022/03/31/77-Mybatis/%E9%80%86%E5%90%91%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png" loading="lazy"></li></ul><h3 id="2、QBC"><a href="#2、QBC" class="headerlink" title="2、QBC"></a>2、QBC</h3><h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><ul><li><code>selectByExample</code>：按条件查询，需要传入一个example对象或者null；如果传入一个null，则表示没有条件，也就是查询所有数据</li><li><code>example.createCriteria().xxx</code>：创建条件对象，通过andXXX方法为SQL添加查询添加，每个条件之间是and关系</li><li><code>example.or().xxx</code>：将之前添加的条件通过or拼接其他条件<br><img src="/2022/03/31/77-Mybatis/example%E7%9A%84%E6%96%B9%E6%B3%95.png" loading="lazy"></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMBG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSessionFactoryBuilder</span> sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">EmpMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmpMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">EmpExample</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmpExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//名字为张三，且年龄大于等于20</span>example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andEmpNameEqualTo</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andAgeGreaterThanOrEqualTo</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//或者did不为空</span>example<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andDidIsNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>emps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/03/31/77-Mybatis/example%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" loading="lazy"></p><h5 id="增改"><a href="#增改" class="headerlink" title="增改"></a>增改</h5><ul><li><code>updateByPrimaryKey</code>：通过主键进行数据修改，如果某一个值为null，也会将对应的字段改为null</li><li><code>mapper.updateByPrimaryKey(new Emp(1,&quot;admin&quot;,22,null,&quot;456@qq.com&quot;,3));</code><ul><li><img src="/2022/03/31/77-Mybatis/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C1.png" loading="lazy"></li></ul></li><li><code>updateByPrimaryKeySelective()</code>：通过主键进行选择性数据修改，如果某个值为null，则不修改这个字段</li><li><code>mapper.updateByPrimaryKeySelective(new Emp(2,&quot;admin2&quot;,22,null,&quot;456@qq.com&quot;,3));</code><ul><li><img src="/2022/03/31/77-Mybatis/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C2.png" loading="lazy"></li></ul></li></ul><h1 id="十二、分页插件"><a href="#十二、分页插件" class="headerlink" title="十二、分页插件"></a>十二、分页插件</h1><h3 id="分页插件使用步骤"><a href="#分页插件使用步骤" class="headerlink" title="分页插件使用步骤"></a>分页插件使用步骤</h3><h5 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h5 id="配置分页插件"><a href="#配置分页插件" class="headerlink" title="配置分页插件"></a>配置分页插件</h5><ul><li>在MyBatis的核心配置文件（mybatis-config.xml）中配置插件</li><li><img src="/2022/03/31/77-Mybatis/%E9%85%8D%E7%BD%AE%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6.png" loading="lazy"></li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--设置分页插件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span></code></pre><h3 id="分页插件的使用"><a href="#分页插件的使用" class="headerlink" title="分页插件的使用"></a>分页插件的使用</h3><h5 id="开启分页功能"><a href="#开启分页功能" class="headerlink" title="开启分页功能"></a>开启分页功能</h5><ul><li>在查询功能之前使用<code>PageHelper.startPage(int pageNum, int pageSize)</code>开启分页功能<ul><li>pageNum：当前页的页码  </li><li>pageSize：每页显示的条数</li></ul></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPageHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSessionFactoryBuilder</span> sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">EmpMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmpMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问第一页，每页四条数据</span><span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/03/31/77-Mybatis/%E5%88%86%E9%A1%B5%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" loading="lazy"></p><h5 id="分页相关数据"><a href="#分页相关数据" class="headerlink" title="分页相关数据"></a>分页相关数据</h5><h6 id="方法一：直接输出"><a href="#方法一：直接输出" class="headerlink" title="方法一：直接输出"></a>方法一：直接输出</h6><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPageHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSessionFactoryBuilder</span> sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">EmpMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmpMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问第一页，每页四条数据</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在查询到List集合后，打印分页数据</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>分页相关数据：</p>  <pre class="language-none"><code class="language-none">Page&#123;count&#x3D;true, pageNum&#x3D;1, pageSize&#x3D;4, startRow&#x3D;0, endRow&#x3D;4, total&#x3D;8, pages&#x3D;2, reasonable&#x3D;false, pageSizeZero&#x3D;false&#125;[Emp&#123;eid&#x3D;1, empName&#x3D;&#39;admin&#39;, age&#x3D;22, sex&#x3D;&#39;男&#39;, email&#x3D;&#39;456@qq.com&#39;, did&#x3D;3&#125;, Emp&#123;eid&#x3D;2, empName&#x3D;&#39;admin2&#39;, age&#x3D;22, sex&#x3D;&#39;男&#39;, email&#x3D;&#39;456@qq.com&#39;, did&#x3D;3&#125;, Emp&#123;eid&#x3D;3, empName&#x3D;&#39;王五&#39;, age&#x3D;12, sex&#x3D;&#39;女&#39;, email&#x3D;&#39;123@qq.com&#39;, did&#x3D;3&#125;, Emp&#123;eid&#x3D;4, empName&#x3D;&#39;赵六&#39;, age&#x3D;32, sex&#x3D;&#39;男&#39;, email&#x3D;&#39;123@qq.com&#39;, did&#x3D;1&#125;]</code></pre></li></ul><h6 id="方法二使用PageInfo"><a href="#方法二使用PageInfo" class="headerlink" title="方法二使用PageInfo"></a>方法二使用PageInfo</h6><ul><li>在查询获取list集合之后，使用<code>PageInfo&lt;T&gt; pageInfo = new PageInfo&lt;&gt;(List&lt;T&gt; list, intnavigatePages)</code>获取分页相关数据</li><li>list：分页之后的数据  <ul><li>navigatePages：导航分页的页码数</li></ul></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPageHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSessionFactoryBuilder</span> sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">EmpMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmpMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>emps<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>分页相关数据：</p>  <pre class="language-none"><code class="language-none">PageInfo&#123;pageNum&#x3D;1, pageSize&#x3D;4, size&#x3D;4, startRow&#x3D;1, endRow&#x3D;4, total&#x3D;8, pages&#x3D;2, list&#x3D;Page&#123;count&#x3D;true, pageNum&#x3D;1, pageSize&#x3D;4, startRow&#x3D;0, endRow&#x3D;4, total&#x3D;8, pages&#x3D;2, reasonable&#x3D;false, pageSizeZero&#x3D;false&#125;[Emp&#123;eid&#x3D;1, empName&#x3D;&#39;admin&#39;, age&#x3D;22, sex&#x3D;&#39;男&#39;, email&#x3D;&#39;456@qq.com&#39;, did&#x3D;3&#125;, Emp&#123;eid&#x3D;2, empName&#x3D;&#39;admin2&#39;, age&#x3D;22, sex&#x3D;&#39;男&#39;, email&#x3D;&#39;456@qq.com&#39;, did&#x3D;3&#125;, Emp&#123;eid&#x3D;3, empName&#x3D;&#39;王五&#39;, age&#x3D;12, sex&#x3D;&#39;女&#39;, email&#x3D;&#39;123@qq.com&#39;, did&#x3D;3&#125;, Emp&#123;eid&#x3D;4, empName&#x3D;&#39;赵六&#39;, age&#x3D;32, sex&#x3D;&#39;男&#39;, email&#x3D;&#39;123@qq.com&#39;, did&#x3D;1&#125;], prePage&#x3D;0, nextPage&#x3D;2, isFirstPage&#x3D;true, isLastPage&#x3D;false, hasPreviousPage&#x3D;false, hasNextPage&#x3D;true, navigatePages&#x3D;5, navigateFirstPage&#x3D;1, navigateLastPage&#x3D;2, navigatepageNums&#x3D;[1, 2]&#125;</code></pre></li><li><p>其中list中的数据等同于方法一中直接输出的page数据</p></li></ul><h5 id="常用数据："><a href="#常用数据：" class="headerlink" title="常用数据："></a>常用数据：</h5><ul><li>pageNum：当前页的页码  </li><li>pageSize：每页显示的条数  </li><li>size：当前页显示的真实条数  </li><li>total：总记录数  </li><li>pages：总页数  </li><li>prePage：上一页的页码  </li><li>nextPage：下一页的页码</li><li>isFirstPage/isLastPage：是否为第一页/最后一页  </li><li>hasPreviousPage/hasNextPage：是否存在上一页/下一页  </li><li>navigatePages：导航分页的页码数  </li><li>navigatepageNums：导航分页的页码，[1,2,3,4,5]</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>76-SpringMVC</title>
      <link href="/2022/03/23/76-SpringMVC/"/>
      <url>/2022/03/23/76-SpringMVC/</url>
      
        <content type="html"><![CDATA[<h1 id="一、SpringMVC简介"><a href="#一、SpringMVC简介" class="headerlink" title="一、SpringMVC简介"></a>一、SpringMVC简介</h1><h3 id="1、什么是MVC"><a href="#1、什么是MVC" class="headerlink" title="1、什么是MVC"></a>1、什么是MVC</h3><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p><p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p><p>JavaBean分为两类</p><ul><li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li><li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li></ul><p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p><p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p><p>MVC的工作流程： 用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p><h3 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h3><p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p><p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目表述层开发的<strong>首选方案</strong>。</p><blockquote><p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台servlet</p></blockquote><h3 id="3、SpringMVC的特点"><a href="#3、SpringMVC的特点" class="headerlink" title="3、SpringMVC的特点"></a>3、SpringMVC的特点</h3><ul><li><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</li><li><strong>基于原生的Servlet</strong>，通过了功能强大的<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一处理</li><li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li><li><strong>代码清新简洁</strong>，大幅度提升开发效率</li><li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li><li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li></ul><h1 id="二、HelloWorld"><a href="#二、HelloWorld" class="headerlink" title="二、HelloWorld"></a>二、HelloWorld</h1><h3 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h3><p>IDE：idea 2019.2</p><p>构建工具：maven3.5.4</p><p>服务器：tomcat7</p><p>Spring版本：5.3.1</p><h3 id="2、创建maven工程"><a href="#2、创建maven工程" class="headerlink" title="2、创建maven工程"></a>2、创建maven工程</h3><h5 id="a-gt-添加web模块"><a href="#a-gt-添加web模块" class="headerlink" title="a&gt;添加web模块"></a>a&gt;添加web模块</h5><h5 id="b-gt-打包方式：war"><a href="#b-gt-打包方式：war" class="headerlink" title="b&gt;打包方式：war"></a>b&gt;打包方式：war</h5><h5 id="c-gt-引入依赖"><a href="#c-gt-引入依赖" class="headerlink" title="c&gt;引入依赖"></a>c&gt;引入依赖</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- SpringMVC --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 日志 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- ServletAPI --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Spring5和Thymeleaf整合包 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-spring5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.12.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>注：由于 Maven 的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠传递性导入。</p><p><img src="/2022/03/23/76-SpringMVC/image-20220323173130668.png" loading="lazy"></p><h3 id="3、配置web-xml"><a href="#3、配置web-xml" class="headerlink" title="3、配置web.xml"></a>3、配置web.xml</h3><p><img src="/2022/03/23/76-SpringMVC/image-20220323212402909.png" loading="lazy"></p><p>注册SpringMVC的前端控制器DispatcherServlet</p><h5 id="a-gt-默认配置方式"><a href="#a-gt-默认配置方式" class="headerlink" title="a&gt;默认配置方式"></a>a&gt;默认配置方式</h5><p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为&lt;servlet-name&gt;-servlet.xml，例如，以下配置所对应SpringMVC的配置文件位于WEB-INF下，文件名为springMVC-servlet.xml</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        设置springMVC的核心控制器所能处理的请求的请求路径        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径        但是/不能匹配.jsp请求路径的请求/*表示的是匹配所有的请求,包括.jsp的请求    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><h5 id="b-gt-扩展配置方式"><a href="#b-gt-扩展配置方式" class="headerlink" title="b&gt;扩展配置方式"></a>b&gt;扩展配置方式</h5><p>可通过init-param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置SpringMVC前端控制器DispatcherServlet的初始化时间</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- contextConfigLocation为固定值 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springMVC.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--          作为框架的核心组件，在启动过程中有大量的初始化操作要做        而这些操作放在第一次请求时才执行会严重影响访问速度        因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        设置springMVC的核心控制器所能处理的请求的请求路径        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径        但是/不能匹配.jsp请求路径的请求    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><blockquote><p>注：</p><p>标签中使用/和/*的区别：</p><p>/所匹配的请求可以是/login或.html或.js或.css方式的请求路径，但是/不能匹配.jsp请求路径的请求</p><p>因此就可以避免在访问jsp页面时，该请求被DispatcherServlet处理，从而找不到相应的页面</p><p>/*则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用/*的写法</p></blockquote><h3 id="4、创建请求控制器"><a href="#4、创建请求控制器" class="headerlink" title="4、创建请求控制器"></a>4、创建请求控制器</h3><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p><p>请求控制器中每一个处理请求的方法成为控制器方法</p><p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="5、创建springMVC的配置文件"><a href="#5、创建springMVC的配置文件" class="headerlink" title="5、创建springMVC的配置文件"></a>5、创建springMVC的配置文件</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 自动扫描包 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mvc.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 配置Thymeleaf视图解析器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.view.ThymeleafViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>characterEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateEngine<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.SpringTemplateEngine<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token comment">&lt;!-- 视图前缀 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/templates/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                        <span class="token comment">&lt;!-- 视图后缀 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.html<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateMode<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTML5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>characterEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    处理静态资源，例如html、js、css、jpg  若只设置该标签，则只能访问静态资源，其他请求则无法访问  此时必须设置&lt;mvc:annotation-driven/>解决问题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 开启mvc注解驱动 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 处理响应中文内容乱码 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultCharset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>supportedMediaTypes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>text/html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>application/json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span></code></pre><h3 id="6、测试HelloWorld"><a href="#6、测试HelloWorld" class="headerlink" title="6、测试HelloWorld"></a>6、测试HelloWorld</h3><h5 id="a-gt-实现对首页的访问"><a href="#a-gt-实现对首页的访问" class="headerlink" title="a&gt;实现对首页的访问"></a>a&gt;实现对首页的访问</h5><p>在请求控制器中创建处理请求的方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span><span class="token comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span><span class="token comment">// localhost:8080/springMVC/</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置视图名称</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="b-gt-通过超链接跳转到指定页面"><a href="#b-gt-通过超链接跳转到指定页面" class="headerlink" title="b&gt;通过超链接跳转到指定页面"></a>b&gt;通过超链接跳转到指定页面</h5><p>在主页index.html中设置超链接</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--thymeleaf命名空间--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/hello&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>HelloWorld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在请求控制器中创建处理请求的方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"target"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h3><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终<strong>转发</strong>到视图所对应页面</p><h1 id="三、-RequestMapping注解"><a href="#三、-RequestMapping注解" class="headerlink" title="三、@RequestMapping注解"></a>三、@RequestMapping注解</h1><h3 id="1、-RequestMapping注解的功能"><a href="#1、-RequestMapping注解的功能" class="headerlink" title="1、@RequestMapping注解的功能"></a>1、@RequestMapping注解的功能</h3><p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p><p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p><h3 id="2、-RequestMapping注解的位置"><a href="#2、-RequestMapping注解的位置" class="headerlink" title="2、@RequestMapping注解的位置"></a>2、@RequestMapping注解的位置</h3><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p><p>@RequestMapping标识一个方法：设置映射请求的请求路径的具体信息</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestMappingController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRequestMapping"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3、-RequestMapping注解的value属性"><a href="#3、-RequestMapping注解的value属性" class="headerlink" title="3、@RequestMapping注解的value属性"></a>3、@RequestMapping注解的value属性</h3><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p><p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p><p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/testRequestMapping&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试@RequestMapping的value属性-->/testRequestMapping<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/test&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试@RequestMapping的value属性-->/test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>        value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/testRequestMapping"</span><span class="token punctuation">,</span> <span class="token string">"/test"</span><span class="token punctuation">&#125;</span><span class="token comment">//满足一个就行</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="4、-RequestMapping注解的method属性"><a href="#4、-RequestMapping注解的method属性" class="headerlink" title="4、@RequestMapping注解的method属性"></a>4、@RequestMapping注解的method属性</h3><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p><p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p><p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，<font color="red">则浏览器报错405</font>：Request method ‘POST’ not supported</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/test&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试@RequestMapping的value属性-->/test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/test&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>        value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/testRequestMapping"</span><span class="token punctuation">,</span> <span class="token string">"/test"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        method <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">&#125;</span><span class="token comment">//满足一个就行</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>注：</p><p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解</p><p>处理get请求的映射–&gt;@GetMapping</p><p>处理post请求的映射–&gt;@PostMapping</p><p>处理put请求的映射–&gt;@PutMapping</p><p>处理delete请求的映射–&gt;@DeleteMapping</p><p>2、常用的请求方式有get，post，put，delete</p><p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理</p><p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful部分会讲到</p></blockquote><h3 id="5、-RequestMapping注解的params属性（了解）"><a href="#5、-RequestMapping注解的params属性（了解）" class="headerlink" title="5、@RequestMapping注解的params属性（了解）"></a>5、@RequestMapping注解的params属性（了解）</h3><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p><p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p><p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p><p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p><p>“param=value”：要求请求映射所匹配的请求必须携带param请求参数且param=value</p><p>“param!=value”：要求请求映射所匹配的请求必须携带param请求参数但是param!=value</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/test(username=<span class="token punctuation">'</span>admin<span class="token punctuation">'</span>,password=123456)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试@RequestMapping的params属性-->/test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- @&#123;/test?username=admin&#125;这样写也可以,只是idea可能爆红 --></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>        value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/testRequestMapping"</span><span class="token punctuation">,</span> <span class="token string">"/test"</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">&#125;</span>        <span class="token punctuation">,</span>params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"password!=123456"</span><span class="token punctuation">&#125;</span> <span class="token comment">//必须同时满足</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>注：</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，<font color="red">此时页面回报错400</font>：Parameter conditions “username, password!=123456” not met for actual request parameters: username={admin}, password={123456}</p></blockquote><h3 id="6、-RequestMapping注解的headers属性（了解）"><a href="#6、-RequestMapping注解的headers属性（了解）" class="headerlink" title="6、@RequestMapping注解的headers属性（了解）"></a>6、@RequestMapping注解的headers属性（了解）</h3><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p><p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p><p>“header”：要求请求映射所匹配的请求必须携带header请求头信息</p><p>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</p><p>“header=value”：要求请求映射所匹配的请求必须携带header请求头信息且header=value</p><p>“header!=value”：要求请求映射所匹配的请求必须携带header请求头信息且header!=value</p><blockquote><p>注：</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，<font color="red">此时页面显示404错误</font>，即资源未找到</p></blockquote><h3 id="7、SpringMVC支持ant风格的路径"><a href="#7、SpringMVC支持ant风格的路径" class="headerlink" title="7、SpringMVC支持ant风格的路径"></a>7、SpringMVC支持ant风格的路径</h3><p>？：表示任意的单个字符</p><p>*：表示任意的0个或多个字符</p><p>**：表示任意的一层或多层目录</p><p>注意：在使用**时，只能使用/**/xxx的方式</p><h3 id="8、SpringMVC支持路径中的占位符（重点）"><a href="#8、SpringMVC支持路径中的占位符（重点）" class="headerlink" title="8、SpringMVC支持路径中的占位符（重点）"></a>8、SpringMVC支持路径中的占位符（重点）</h3><p>原始方式：/deleteUser?id=1</p><p>rest方式：/deleteUser/1</p><p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/testRest/1/admin&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试路径中的占位符-->/testRest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRest/&#123;id&#125;/&#123;username&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id:"</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">",username:"</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//最终输出的内容为-->id:1,username:admin</span></code></pre><h1 id="四、SpringMVC获取请求参数"><a href="#四、SpringMVC获取请求参数" class="headerlink" title="四、SpringMVC获取请求参数"></a>四、SpringMVC获取请求参数</h1><h3 id="1、通过ServletAPI获取"><a href="#1、通过ServletAPI获取" class="headerlink" title="1、通过ServletAPI获取"></a>1、通过ServletAPI获取</h3><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testParam"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testParam</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username:"</span><span class="token operator">+</span>username<span class="token operator">+</span><span class="token string">",password:"</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2、通过控制器方法的形参获取请求参数"><a href="#2、通过控制器方法的形参获取请求参数" class="headerlink" title="2、通过控制器方法的形参获取请求参数"></a>2、通过控制器方法的形参获取请求参数</h3><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/testParam(username=<span class="token punctuation">'</span>admin<span class="token punctuation">'</span>,password=123456)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试获取请求参数-->/testParam<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testParam"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testParam</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username:"</span><span class="token operator">+</span>username<span class="token operator">+</span><span class="token string">",password:"</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>注：</p><p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p><p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p><p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p></blockquote><h3 id="3、-RequestParam"><a href="#3、-RequestParam" class="headerlink" title="3、@RequestParam"></a>3、@RequestParam</h3><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p><p>@RequestParam注解一共有三个属性：</p><p>value：指定为形参赋值的请求参数的参数名</p><p>required：设置是否必须传输此请求参数，默认值为true</p><blockquote><p>注：</p><p>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；</p><p>若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为默认值null</p></blockquote><p>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</p><h3 id="4、-RequestHeader"><a href="#4、-RequestHeader" class="headerlink" title="4、@RequestHeader"></a>4、@RequestHeader</h3><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p><p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><h3 id="5、-CookieValue"><a href="#5、-CookieValue" class="headerlink" title="5、@CookieValue"></a>5、@CookieValue</h3><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p><p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><p>(session是服务器端的会话技术,依赖于cookie, cookie是客户端的会话技术)</p><h3 id="6、通过POJO获取请求参数"><a href="#6、通过POJO获取请求参数" class="headerlink" title="6、通过POJO获取请求参数"></a>6、通过POJO获取请求参数</h3><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/testpojo&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    性别：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    邮箱：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testpojo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testPOJO</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//最终结果-->User&#123;id=null, username='张三', password='123', age=23, sex='男', email='123@qq.com'&#125;</span></code></pre><h3 id="7、解决获取请求参数的乱码问题"><a href="#7、解决获取请求参数的乱码问题" class="headerlink" title="7、解决获取请求参数的乱码问题"></a>7、解决获取请求参数的乱码问题</h3><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置springMVC的编码过滤器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>forceResponseEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><blockquote><p>注：</p><p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p></blockquote><h1 id="五、域对象共享数据"><a href="#五、域对象共享数据" class="headerlink" title="五、域对象共享数据"></a>五、域对象共享数据</h1><p>thymeleaf模板: @用于路径, $用于域对象, #用于内置对象, </p><h3 id="1、使用ServletAPI向request域对象共享数据"><a href="#1、使用ServletAPI向request域对象共享数据" class="headerlink" title="1、使用ServletAPI向request域对象共享数据"></a>1、使用ServletAPI向request域对象共享数据</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testServletAPI"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testServletAPI</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"testScope"</span><span class="token punctuation">,</span> <span class="token string">"hello,servletAPI"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2、使用ModelAndView向request域对象共享数据"><a href="#2、使用ModelAndView向request域对象共享数据" class="headerlink" title="2、使用ModelAndView向request域对象共享数据"></a>2、使用ModelAndView向request域对象共享数据</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testModelAndView"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">testModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/**     * ModelAndView有Model和View的功能     * Model主要用于向请求域共享数据     * View主要用于设置视图，实现页面跳转     */</span>    <span class="token class-name">ModelAndView</span> mav <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//向请求域共享数据</span>    mav<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"testScope"</span><span class="token punctuation">,</span> <span class="token string">"hello,ModelAndView"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置视图，实现页面跳转</span>    mav<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mav<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3、使用Model向request域对象共享数据"><a href="#3、使用Model向request域对象共享数据" class="headerlink" title="3、使用Model向request域对象共享数据"></a>3、使用Model向request域对象共享数据</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testModel"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testModel</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"testScope"</span><span class="token punctuation">,</span> <span class="token string">"hello,Model"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><h3 id="4、使用map向request域对象共享数据"><a href="#4、使用map向request域对象共享数据" class="headerlink" title="4、使用map向request域对象共享数据"></a>4、使用map向request域对象共享数据</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testMap"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"testScope"</span><span class="token punctuation">,</span> <span class="token string">"hello,Map"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="5、使用ModelMap向request域对象共享数据"><a href="#5、使用ModelMap向request域对象共享数据" class="headerlink" title="5、使用ModelMap向request域对象共享数据"></a>5、使用ModelMap向request域对象共享数据</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testModelMap"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testModelMap</span><span class="token punctuation">(</span><span class="token class-name">ModelMap</span> modelMap<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    modelMap<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"testScope"</span><span class="token punctuation">,</span> <span class="token string">"hello,ModelMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="6、Model、ModelMap、Map的关系"><a href="#6、Model、ModelMap、Map的关系" class="headerlink" title="6、Model、ModelMap、Map的关系"></a>6、Model、ModelMap、Map的关系</h3><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Model</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModelMap</span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtendedModelMap</span> <span class="token keyword">extends</span> <span class="token class-name">ModelMap</span> <span class="token keyword">implements</span> <span class="token class-name">Model</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BindingAwareModelMap</span> <span class="token keyword">extends</span> <span class="token class-name">ExtendedModelMap</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="7、向session域共享数据"><a href="#7、向session域共享数据" class="headerlink" title="7、向session域共享数据"></a>7、向session域共享数据</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testSession"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testSession</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"testSessionScope"</span><span class="token punctuation">,</span> <span class="token string">"hello,session"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="8、向application域共享数据"><a href="#8、向application域共享数据" class="headerlink" title="8、向application域共享数据"></a>8、向application域共享数据</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testApplication"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testApplication</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ServletContext</span> application <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    application<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"testApplicationScope"</span><span class="token punctuation">,</span> <span class="token string">"hello,application"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="六、SpringMVC的视图"><a href="#六、SpringMVC的视图" class="headerlink" title="六、SpringMVC的视图"></a>六、SpringMVC的视图</h1><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p><p>SpringMVC视图的种类很多，默认有转发视图InternalResourceView 和重定向视图RedirectView</p><p>当工程引入jstl的依赖，转发视图会自动转换为 JstlView</p><p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p><h3 id="1、ThymeleafView"><a href="#1、ThymeleafView" class="headerlink" title="1、ThymeleafView"></a>1、ThymeleafView</h3><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过<font color="red">转发</font>的方式实现跳转</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testHello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/03/23/76-SpringMVC/image-20220326223749208.png" loading="lazy"></p><h3 id="2、转发视图"><a href="#2、转发视图" class="headerlink" title="2、转发视图"></a>2、转发视图</h3><p>SpringMVC中默认的转发视图是InternalResourceView</p><p>SpringMVC中创建转发视图的情况：</p><p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视图名称<font color="red">不会</font>被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</p><p>例如”forward:/“，“forward:/employee”</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testForward"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"forward:/testHello"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/03/23/76-SpringMVC/image-20220326223817155.png" loading="lazy"></p><h3 id="3、重定向视图"><a href="#3、重定向视图" class="headerlink" title="3、重定向视图"></a>3、重定向视图</h3><p>SpringMVC中默认的重定向视图是RedirectView</p><p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称<font color="red">不会</font>被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p><p>(重定向不能访问WEB-INF目录下的文件,重定向是浏览器发送两个请求)</p><p>例如”redirect:/“，“redirect:/employee”</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRedirect"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRedirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/testHello"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/03/23/76-SpringMVC/image-20220326223836473.png" loading="lazy"></p><blockquote><p>注：</p><p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以/开头，若是则会自动拼接上下文路径</p></blockquote><h3 id="4、视图控制器view-controller"><a href="#4、视图控制器view-controller" class="headerlink" title="4、视图控制器view-controller"></a>4、视图控制器view-controller</h3><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    path：设置处理的请求地址    view-name：设置请求地址所对应的视图名称--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/testView<span class="token punctuation">"</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>view-controller</span><span class="token punctuation">></span></span></code></pre><blockquote><p>注：</p><p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：</p><p>&lt;mvc:annotation-driven /&gt;</p></blockquote><h1 id="七、RESTful"><a href="#七、RESTful" class="headerlink" title="七、RESTful"></a>七、RESTful</h1><h3 id="1、RESTful简介"><a href="#1、RESTful简介" class="headerlink" title="1、RESTful简介"></a>1、RESTful简介</h3><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p><p>（表现层：前端视图页面–&gt;后端控制层）</p><h5 id="a-gt-资源"><a href="#a-gt-资源" class="headerlink" title="a&gt;资源"></a>a&gt;资源</h5><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p><h5 id="b-gt-资源的表述"><a href="#b-gt-资源的表述" class="headerlink" title="b&gt;资源的表述"></a>b&gt;资源的表述</h5><p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如HTML/XML/JSON/纯文本/图片/视频/音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p><h5 id="c-gt-状态转移"><a href="#c-gt-状态转移" class="headerlink" title="c&gt;状态转移"></a>c&gt;状态转移</h5><p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p><h3 id="2、RESTful的实现"><a href="#2、RESTful的实现" class="headerlink" title="2、RESTful的实现"></a>2、RESTful的实现</h3><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p><p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</p><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p><table><thead><tr><th>操作</th><th>传统方式</th><th>REST风格</th></tr></thead><tbody><tr><td>查询操作</td><td>getUserById?id=1</td><td>user/1–&gt;get请求方式</td></tr><tr><td>保存操作</td><td>saveUser</td><td>user–&gt;post请求方式</td></tr><tr><td>删除操作</td><td>deleteUser?id=1</td><td>user/1–&gt;delete请求方式</td></tr><tr><td>更新操作</td><td>updateUser</td><td>user–&gt;put请求方式</td></tr></tbody></table><h3 id="3、HiddenHttpMethodFilter"><a href="#3、HiddenHttpMethodFilter" class="headerlink" title="3、HiddenHttpMethodFilter"></a>3、HiddenHttpMethodFilter</h3><p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p><p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p><p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p><p>a&gt;当前请求的请求方式必须为post</p><p>b&gt;当前请求必须传输请求参数_method</p><p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method的值，因此请求参数_method的值才是最终的请求方式</p><p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置HiddenHttpMethodFilter--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><blockquote><p>注：</p><p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和HiddenHttpMethodFilter</p><p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p><p>原因：</p><ul><li><p>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字符集的</p></li><li><p>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</p></li><li><p>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</p></li><li><p>```java<br>String paramValue = request.getParameter(this.methodParam);</p><pre class="language-none"><code class="language-none"># 八、RESTful案例### 1、准备工作和传统 CRUD 一样，实现对员工信息的增删改查。- 搭建环境- 准备实体类&#96;&#96;&#96;javapackage com.atguigu.mvc.bean;public class Employee &#123;  private Integer id;  private String lastName;  private String email;  &#x2F;&#x2F;1 male, 0 female  private Integer gender;    public Integer getId() &#123;     return id;  &#125;  public void setId(Integer id) &#123;     this.id &#x3D; id;  &#125;  public String getLastName() &#123;     return lastName;  &#125;  public void setLastName(String lastName) &#123;     this.lastName &#x3D; lastName;  &#125;  public String getEmail() &#123;     return email;  &#125;  public void setEmail(String email) &#123;     this.email &#x3D; email;  &#125;  public Integer getGender() &#123;     return gender;  &#125;  public void setGender(Integer gender) &#123;     this.gender &#x3D; gender;  &#125;  public Employee(Integer id, String lastName, String email, Integer gender) &#123;     super();     this.id &#x3D; id;     this.lastName &#x3D; lastName;     this.email &#x3D; email;     this.gender &#x3D; gender;  &#125;  public Employee() &#123;  &#125;&#125;</code></pre></li></ul></blockquote><ul><li>准备dao模拟数据</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>dao</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Employee</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeDao</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">static</span><span class="token punctuation">&#123;</span>      employees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Employee</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      employees<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">"E-AA"</span><span class="token punctuation">,</span> <span class="token string">"aa@163.com"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      employees<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">"E-BB"</span><span class="token punctuation">,</span> <span class="token string">"bb@163.com"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      employees<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span> <span class="token string">"E-CC"</span><span class="token punctuation">,</span> <span class="token string">"cc@163.com"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      employees<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1004</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1004</span><span class="token punctuation">,</span> <span class="token string">"E-DD"</span><span class="token punctuation">,</span> <span class="token string">"dd@163.com"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      employees<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span> <span class="token string">"E-EE"</span><span class="token punctuation">,</span> <span class="token string">"ee@163.com"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> initId <span class="token operator">=</span> <span class="token number">1006</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         employee<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>initId<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      employees<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> employees<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token class-name">Employee</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> employees<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      employees<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2、功能清单"><a href="#2、功能清单" class="headerlink" title="2、功能清单"></a>2、功能清单</h3><table><thead><tr><th>功能</th><th>URL 地址</th><th>请求方式</th></tr></thead><tbody><tr><td>访问首页√</td><td>/</td><td>GET</td></tr><tr><td>查询全部数据√</td><td>/employee</td><td>GET</td></tr><tr><td>删除√</td><td>/employee/2</td><td>DELETE</td></tr><tr><td>跳转到添加数据页面√</td><td>/toAdd</td><td>GET</td></tr><tr><td>执行保存√</td><td>/employee</td><td>POST</td></tr><tr><td>跳转到更新数据页面√</td><td>/employee/2</td><td>GET</td></tr><tr><td>执行更新√</td><td>/employee</td><td>PUT</td></tr></tbody></table><h3 id="3、具体功能：访问首页"><a href="#3、具体功能：访问首页" class="headerlink" title="3、具体功能：访问首页"></a>3、具体功能：访问首页</h3><h5 id="a-gt-配置view-controller"><a href="#a-gt-配置view-controller" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h5 id="b-gt-创建页面"><a href="#b-gt-创建页面" class="headerlink" title="b&gt;创建页面"></a>b&gt;创建页面</h5><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/employee&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>访问员工信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--超链接发送的请求是GET请求--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="4、具体功能：查询所有员工数据"><a href="#4、具体功能：查询所有员工数据" class="headerlink" title="4、具体功能：查询所有员工数据"></a>4、具体功能：查询所有员工数据</h3><h5 id="a-gt-控制器方法"><a href="#a-gt-控制器方法" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/employee"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getEmployeeList</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employeeList <span class="token operator">=</span> employeeDao<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"employeeList"</span><span class="token punctuation">,</span> employeeList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"employee_list"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="b-gt-创建employee-list-html"><a href="#b-gt-创建employee-list-html" class="headerlink" title="b&gt;创建employee_list.html"></a>b&gt;创建employee_list.html</h5><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Employee Info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/static/js/vue.js&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataTable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Employee Info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>lastName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>gender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>options(<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/toAdd&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>employee : $&#123;employeeList&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;employee.id&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;employee.lastName&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;employee.email&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;employee.gender&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteA<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteEmployee<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;<span class="token punctuation">'</span>/employee/<span class="token punctuation">'</span>+$&#123;employee.id&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>delete<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;<span class="token punctuation">'</span>/employee/<span class="token punctuation">'</span>+$&#123;employee.id&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="5、具体功能：删除"><a href="#5、具体功能：删除" class="headerlink" title="5、具体功能：删除"></a>5、具体功能：删除</h3><h5 id="a-gt-创建处理delete请求方式的表单"><a href="#a-gt-创建处理delete请求方式的表单" class="headerlink" title="a&gt;创建处理delete请求方式的表单"></a>a&gt;创建处理delete请求方式的表单</h5><pre class="language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete_form<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h5 id="b-gt-删除超链接绑定点击事件"><a href="#b-gt-删除超链接绑定点击事件" class="headerlink" title="b&gt;删除超链接绑定点击事件"></a>b&gt;删除超链接绑定点击事件</h5><p>引入vue.js</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/static/js/vue.js&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>删除超链接</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteA<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteEmployee<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;<span class="token punctuation">'</span>/employee/<span class="token punctuation">'</span>+$&#123;employee.id&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>delete<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>通过vue处理点击事件</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span><span class="token string">"#dataTable"</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token comment">//event表示当前事件</span>            <span class="token function-variable function">deleteEmployee</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//通过id获取表单标签</span>                <span class="token keyword">var</span> delete_form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"delete_form"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//将触发事件的超链接的href属性为表单的action属性赋值</span>                delete_form<span class="token punctuation">.</span>action <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>href<span class="token punctuation">;</span>                <span class="token comment">//提交表单</span>                delete_form<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//阻止超链接的默认跳转行为</span>                event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="c-gt-控制器方法"><a href="#c-gt-控制器方法" class="headerlink" title="c&gt;控制器方法"></a>c&gt;控制器方法</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/employee/&#123;id&#125;"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>DELETE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deleteEmployee</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    employeeDao<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/employee"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="6、具体功能：跳转到添加数据页面"><a href="#6、具体功能：跳转到添加数据页面" class="headerlink" title="6、具体功能：跳转到添加数据页面"></a>6、具体功能：跳转到添加数据页面</h3><h5 id="a-gt-配置view-controller-1"><a href="#a-gt-配置view-controller-1" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/toAdd<span class="token punctuation">"</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>employee_add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>view-controller</span><span class="token punctuation">></span></span></code></pre><h5 id="b-gt-创建employee-add-html"><a href="#b-gt-创建employee-add-html" class="headerlink" title="b&gt;创建employee_add.html"></a>b&gt;创建employee_add.html</h5><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Add Employee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/employee&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    lastName:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    email:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    gender:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>male    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="7、具体功能：执行保存"><a href="#7、具体功能：执行保存" class="headerlink" title="7、具体功能：执行保存"></a>7、具体功能：执行保存</h3><h5 id="a-gt-控制器方法-1"><a href="#a-gt-控制器方法-1" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/employee"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addEmployee</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    employeeDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/employee"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="8、具体功能：跳转到更新数据页面"><a href="#8、具体功能：跳转到更新数据页面" class="headerlink" title="8、具体功能：跳转到更新数据页面"></a>8、具体功能：跳转到更新数据页面</h3><h5 id="a-gt-修改超链接"><a href="#a-gt-修改超链接" class="headerlink" title="a&gt;修改超链接"></a>a&gt;修改超链接</h5><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;<span class="token punctuation">'</span>/employee/<span class="token punctuation">'</span>+$&#123;employee.id&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h5 id="b-gt-控制器方法"><a href="#b-gt-控制器方法" class="headerlink" title="b&gt;控制器方法"></a>b&gt;控制器方法</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/employee/&#123;id&#125;"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getEmployeeById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Employee</span> employee <span class="token operator">=</span> employeeDao<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"employee"</span><span class="token punctuation">,</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"employee_update"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="c-gt-创建employee-update-html"><a href="#c-gt-创建employee-update-html" class="headerlink" title="c&gt;创建employee_update.html"></a>c&gt;创建employee_update.html</h5><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Update Employee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/employee&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>put<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;employee.id&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    lastName:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;employee.lastName&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    email:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;employee.email&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        th:field="$&#123;employee.gender&#125;"可用于单选框或复选框的回显        若单选框的value和employee.gender的值一致，则添加checked="checked"属性    --></span>    gender:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;employee.gender&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>male    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;employee.gender&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="9、具体功能：执行更新"><a href="#9、具体功能：执行更新" class="headerlink" title="9、具体功能：执行更新"></a>9、具体功能：执行更新</h3><h5 id="a-gt-控制器方法-2"><a href="#a-gt-控制器方法-2" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/employee"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>PUT<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">updateEmployee</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    employeeDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/employee"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="八、HttpMessageConverter"><a href="#八、HttpMessageConverter" class="headerlink" title="八、HttpMessageConverter"></a>八、HttpMessageConverter</h1><p>HttpMessageConverter，报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文</p><p>HttpMessageConverter提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，ResponseEntity</p><h3 id="1、-RequestBody"><a href="#1、-RequestBody" class="headerlink" title="1、@RequestBody"></a>1、@RequestBody</h3><p>@RequestBody可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/testRequestBody&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRequestBody"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestBody</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> requestBody<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"requestBody:"</span><span class="token operator">+</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果：</p><p>requestBody:username=admin&amp;password=123456</p><h3 id="2、RequestEntity"><a href="#2、RequestEntity" class="headerlink" title="2、RequestEntity"></a>2、RequestEntity</h3><p>RequestEntity封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRequestEntity"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestEntity</span><span class="token punctuation">(</span><span class="token class-name">RequestEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> requestEntity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"requestHeader:"</span><span class="token operator">+</span>requestEntity<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"requestBody:"</span><span class="token operator">+</span>requestEntity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果： </p><ul><li>requestHeader:[host:“localhost:8080”, connection:“keep-alive”, content-length:“27”, cache-control:“max-age=0”, sec-ch-ua:”” Not A;Brand”;v=“99”, “Chromium”;v=“90”, “Google Chrome”;v=“90””, sec-ch-ua-mobile:”?0”, upgrade-insecure-requests:“1”, origin:“<a href="http://localhost:8080”/">http://localhost:8080”</a>, user-agent:“Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36”] - -</li><li>requestBody:username=admin&amp;password=123</li></ul><h3 id="3、-ResponseBody"><a href="#3、-ResponseBody" class="headerlink" title="3、@ResponseBody"></a>3、@ResponseBody</h3><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testResponseBody"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>结果：浏览器页面显示success</p><h3 id="4、SpringMVC处理json"><a href="#4、SpringMVC处理json" class="headerlink" title="4、SpringMVC处理json"></a>4、SpringMVC处理json</h3><p>a&gt;导入jackson的依赖</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.12.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>b&gt;在SpringMVC的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为Json格式的字符串</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/></span></span></code></pre><p>c&gt;在处理器方法上使用@ResponseBody注解进行标识</p><p>d&gt;将Java对象直接作为控制器方法的返回值返回，就会自动转换为Json格式的字符串</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testResponseUser"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">testResponseUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>浏览器的页面中展示的结果：</p><p>{“id”:1001,“username”:“admin”,“password”:“123456”,“age”:23,“sex”:“男”}</p><h3 id="5、SpringMVC处理ajax"><a href="#5、SpringMVC处理ajax" class="headerlink" title="5、SpringMVC处理ajax"></a>5、SpringMVC处理ajax</h3><p>a&gt;请求超链接：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/testAjax&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testAjax<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>testAjax<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>b&gt;通过vue和axios处理点击事件：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/static/js/vue.js&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/static/js/axios.min.js&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function-variable function">testAjax</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    method<span class="token operator">:</span><span class="token string">"post"</span><span class="token punctuation">,</span>                    url<span class="token operator">:</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>href<span class="token punctuation">,</span>                    params<span class="token operator">:</span><span class="token punctuation">&#123;</span>                        username<span class="token operator">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span>                        password<span class="token operator">:</span><span class="token string">"123456"</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>c&gt;控制器方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testAjax"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testAjax</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username:"</span><span class="token operator">+</span>username<span class="token operator">+</span><span class="token string">",password:"</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"hello,ajax"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="6、-RestController注解"><a href="#6、-RestController注解" class="headerlink" title="6、@RestController注解"></a>6、@RestController注解</h3><p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p><h3 id="7、ResponseEntity"><a href="#7、ResponseEntity" class="headerlink" title="7、ResponseEntity"></a>7、ResponseEntity</h3><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p><h1 id="九、文件上传和下载"><a href="#九、文件上传和下载" class="headerlink" title="九、文件上传和下载"></a>九、文件上传和下载</h1><h3 id="1、文件下载"><a href="#1、文件下载" class="headerlink" title="1、文件下载"></a>1、文件下载</h3><p>使用ResponseEntity实现下载文件的功能</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testDown"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token function">testResponseEntity</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取ServletContext对象</span>    <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取服务器中文件的真实路径</span>    <span class="token class-name">String</span> realPath <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/static/img/1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建输入流</span>    <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建字节数组</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>is<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//将流读到字节数组中</span>    is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建HttpHeaders对象设置响应头信息</span>    <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置要下载方式以及下载文件的名字</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename=1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置响应状态码</span>    <span class="token class-name">HttpStatus</span> statusCode <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">;</span>    <span class="token comment">//创建ResponseEntity对象</span>    <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> responseEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//关闭输入流</span>    is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> responseEntity<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2、文件上传"><a href="#2、文件上传" class="headerlink" title="2、文件上传"></a>2、文件上传</h3><p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype=“multipart/form-data”</p><p>SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p><p>上传步骤：</p><p>a&gt;添加依赖：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>b&gt;在SpringMVC的配置文件中添加配置：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>c&gt;控制器方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testUp"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testUp</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> photo<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取上传的文件的文件名</span>    <span class="token class-name">String</span> fileName <span class="token operator">=</span> photo<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//处理文件重名问题</span>    <span class="token class-name">String</span> suffixName <span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fileName <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> suffixName<span class="token punctuation">;</span>    <span class="token comment">//获取服务器中photo目录的路径</span>    <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> photoPath <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"photo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>photoPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        file<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> finalPath <span class="token operator">=</span> photoPath <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> fileName<span class="token punctuation">;</span>    <span class="token comment">//实现上传功能</span>    photo<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>finalPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="十、拦截器"><a href="#十、拦截器" class="headerlink" title="十、拦截器"></a>十、拦截器</h1><h3 id="1、拦截器的配置"><a href="#1、拦截器的配置" class="headerlink" title="1、拦截器的配置"></a>1、拦截器的配置</h3><p>（fiter过滤器 –&gt; DispatcherServlet前端控制器 –&gt; <font color="red">拦截器</font> –&gt; controller控制器方法）</p><p>SpringMVC中的拦截器用于拦截控制器方法的执行</p><p>SpringMVC中的拦截器需要实现HandlerInterceptor</p><p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.interceptor.FirstInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/testRequestEntity<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--     以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求--></span></code></pre><h3 id="2、拦截器的三个抽象方法"><a href="#2、拦截器的三个抽象方法" class="headerlink" title="2、拦截器的三个抽象方法"></a>2、拦截器的三个抽象方法</h3><p>SpringMVC中的拦截器有三个抽象方法：</p><p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p><p>postHandle：控制器方法执行之后执行postHandle()</p><p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p><h3 id="3、多个拦截器的执行顺序"><a href="#3、多个拦截器的执行顺序" class="headerlink" title="3、多个拦截器的执行顺序"></a>3、多个拦截器的执行顺序</h3><ul><li><p>a&gt;若每个拦截器的preHandle()都返回true</p><p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p><p>preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行</p></li><li><p>b&gt;若某个拦截器的preHandle()返回了false</p><p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回</p><p>false的拦截器之前的拦截器的afterComplation()会执行</p></li></ul><h1 id="十一、异常处理器"><a href="#十一、异常处理器" class="headerlink" title="十一、异常处理器"></a>十一、异常处理器</h1><h3 id="1、基于配置的异常处理"><a href="#1、基于配置的异常处理" class="headerlink" title="1、基于配置的异常处理"></a>1、基于配置的异常处理</h3><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p><p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</p><p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exceptionMappings<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--                properties的键表示处理器方法执行过程中出现的异常                properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面            --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.ArithmeticException<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>error<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exceptionAttribute<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="2、基于注解的异常处理"><a href="#2、基于注解的异常处理" class="headerlink" title="2、基于注解的异常处理"></a>2、基于注解的异常处理</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//@ControllerAdvice将当前类标识为异常处理的组件</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//@ExceptionHandler用于设置所标识方法处理的异常</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token comment">//ex表示当前请求处理中出现的异常对象</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handleArithmeticException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"ex"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"error"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="十二、注解配置SpringMVC"><a href="#十二、注解配置SpringMVC" class="headerlink" title="十二、注解配置SpringMVC"></a>十二、注解配置SpringMVC</h1><p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p><h3 id="1、创建初始化类，代替web-xml"><a href="#1、创建初始化类，代替web-xml" class="headerlink" title="1、创建初始化类，代替web.xml"></a>1、创建初始化类，代替web.xml</h3><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器。 Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebInit</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 指定spring的配置类     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">SpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 指定SpringMVC的配置类     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">WebConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 指定DispatcherServlet的映射规则，即url-pattern     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"/"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 添加过滤器     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CharacterEncodingFilter</span> encodingFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        encodingFilter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        encodingFilter<span class="token punctuation">.</span><span class="token function">setForceRequestEncoding</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HiddenHttpMethodFilter</span> hiddenHttpMethodFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>encodingFilter<span class="token punctuation">,</span> hiddenHttpMethodFilter<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2、创建SpringConfig配置类，代替spring的配置文件"><a href="#2、创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="2、创建SpringConfig配置类，代替spring的配置文件"></a>2、创建SpringConfig配置类，代替spring的配置文件</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//ssm整合之后，spring的配置信息写在此类中</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3、创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#3、创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="3、创建WebConfig配置类，代替SpringMVC的配置文件"></a>3、创建WebConfig配置类，代替SpringMVC的配置文件</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment">//扫描组件</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.mvc.controller"</span><span class="token punctuation">)</span><span class="token comment">//开启MVC注解驱动</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//使用默认的servlet处理静态资源</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureDefaultServletHandling</span><span class="token punctuation">(</span><span class="token class-name">DefaultServletHandlerConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        configurer<span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//配置文件上传解析器</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CommonsMultipartResolver</span> <span class="token function">multipartResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonsMultipartResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//配置拦截器</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FirstInterceptor</span> firstInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FirstInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>firstInterceptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//配置视图控制</span>        <span class="token comment">/*@Override    public void addViewControllers(ViewControllerRegistry registry) &#123;        registry.addViewController("/").setViewName("index");    &#125;*/</span>        <span class="token comment">//配置异常映射</span>    <span class="token comment">/*@Override    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver> resolvers) &#123;        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();        Properties prop = new Properties();        prop.setProperty("java.lang.ArithmeticException", "error");        //设置异常映射        exceptionResolver.setExceptionMappings(prop);        //设置共享异常信息的键        exceptionResolver.setExceptionAttribute("ex");        resolvers.add(exceptionResolver);    &#125;*/</span>    <span class="token comment">//配置生成模板解析器</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ITemplateResolver</span> <span class="token function">templateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">WebApplicationContext</span> webApplicationContext <span class="token operator">=</span> <span class="token class-name">ContextLoader</span><span class="token punctuation">.</span><span class="token function">getCurrentWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span>        <span class="token class-name">ServletContextTemplateResolver</span> templateResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletContextTemplateResolver</span><span class="token punctuation">(</span>                webApplicationContext<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateResolver<span class="token punctuation">.</span><span class="token function">setPrefix</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/templates/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateResolver<span class="token punctuation">.</span><span class="token function">setSuffix</span><span class="token punctuation">(</span><span class="token string">".html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateResolver<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateResolver<span class="token punctuation">.</span><span class="token function">setTemplateMode</span><span class="token punctuation">(</span><span class="token class-name">TemplateMode</span><span class="token punctuation">.</span>HTML<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> templateResolver<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//生成模板引擎并为模板引擎注入模板解析器</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SpringTemplateEngine</span> <span class="token function">templateEngine</span><span class="token punctuation">(</span><span class="token class-name">ITemplateResolver</span> templateResolver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringTemplateEngine</span> templateEngine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringTemplateEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateEngine<span class="token punctuation">.</span><span class="token function">setTemplateResolver</span><span class="token punctuation">(</span>templateResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> templateEngine<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//生成视图解析器并未解析器注入模板引擎</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ViewResolver</span> <span class="token function">viewResolver</span><span class="token punctuation">(</span><span class="token class-name">SpringTemplateEngine</span> templateEngine<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThymeleafViewResolver</span> viewResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThymeleafViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        viewResolver<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        viewResolver<span class="token punctuation">.</span><span class="token function">setTemplateEngine</span><span class="token punctuation">(</span>templateEngine<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> viewResolver<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="4、测试功能"><a href="#4、测试功能" class="headerlink" title="4、测试功能"></a>4、测试功能</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="十三、SpringMVC执行流程"><a href="#十三、SpringMVC执行流程" class="headerlink" title="十三、SpringMVC执行流程"></a>十三、SpringMVC执行流程</h1><h3 id="1、SpringMVC常用组件"><a href="#1、SpringMVC常用组件" class="headerlink" title="1、SpringMVC常用组件"></a>1、SpringMVC常用组件</h3><ul><li><p>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</p><p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p></li><li><p>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</p><p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p></li><li><p>Handler：<strong>处理器</strong>，需要工程师开发</p><p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p></li><li><p>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</p><p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p></li><li><p>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</p><p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p></li><li><p>View：<strong>视图</strong></p><p>作用：将模型数据通过页面展示给用户</p></li></ul><h3 id="2、DispatcherServlet初始化过程"><a href="#2、DispatcherServlet初始化过程" class="headerlink" title="2、DispatcherServlet初始化过程"></a>2、DispatcherServlet初始化过程</h3><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p><p><img src="/2022/03/23/76-SpringMVC/img005.png" loading="lazy"></p><h5 id="a-gt-初始化WebApplicationContext"><a href="#a-gt-初始化WebApplicationContext" class="headerlink" title="a&gt;初始化WebApplicationContext"></a>a&gt;初始化WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">WebApplicationContext</span> rootContext <span class="token operator">=</span>        <span class="token class-name">WebApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">WebApplicationContext</span> wac <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// A context instance was injected at construction time -> use it</span>        wac <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationContext<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>wac <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ConfigurableWebApplicationContext</span> cwac <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">)</span> wac<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cwac<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// The context has not yet been refreshed -> provide services such as</span>                <span class="token comment">// setting the parent context, setting the application context id, etc</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cwac<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// The context instance was injected without an explicit parent -> set</span>                    <span class="token comment">// the root application context (if any; may be null) as the parent</span>                    cwac<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>rootContext<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token function">configureAndRefreshWebApplicationContext</span><span class="token punctuation">(</span>cwac<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wac <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// No context instance was injected at construction time -> see if one</span>        <span class="token comment">// has been registered in the servlet context. If one exists, it is assumed</span>        <span class="token comment">// that the parent context (if any) has already been set and that the</span>        <span class="token comment">// user has performed any initialization such as setting the context id</span>        wac <span class="token operator">=</span> <span class="token function">findWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wac <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// No context instance is defined for this servlet -> create a local one</span>        <span class="token comment">// 创建WebApplicationContext</span>        wac <span class="token operator">=</span> <span class="token function">createWebApplicationContext</span><span class="token punctuation">(</span>rootContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>refreshEventReceived<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Either the context is not a ConfigurableApplicationContext with refresh</span>        <span class="token comment">// support or the context injected at construction time had already been</span>        <span class="token comment">// refreshed -> trigger initial onRefresh manually here.</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>onRefreshMonitor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 刷新WebApplicationContext</span>            <span class="token function">onRefresh</span><span class="token punctuation">(</span>wac<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>publishContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Publish the context as a servlet context attribute.</span>        <span class="token comment">// 将IOC容器在应用域共享</span>        <span class="token class-name">String</span> attrName <span class="token operator">=</span> <span class="token function">getServletContextAttributeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>attrName<span class="token punctuation">,</span> wac<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> wac<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="b-gt-创建WebApplicationContext"><a href="#b-gt-创建WebApplicationContext" class="headerlink" title="b&gt;创建WebApplicationContext"></a>b&gt;创建WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createWebApplicationContext</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ApplicationContext</span> parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> contextClass <span class="token operator">=</span> <span class="token function">getContextClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>contextClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span>            <span class="token string">"Fatal initialization error in servlet with name '"</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>            <span class="token string">"': custom WebApplicationContext class ["</span> <span class="token operator">+</span> contextClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>            <span class="token string">"] is not of type ConfigurableWebApplicationContext"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 通过反射创建 IOC 容器对象</span>    <span class="token class-name">ConfigurableWebApplicationContext</span> wac <span class="token operator">=</span>        <span class="token punctuation">(</span><span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">)</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>contextClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    wac<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置父容器</span>    wac<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> configLocation <span class="token operator">=</span> <span class="token function">getContextConfigLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>configLocation <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        wac<span class="token punctuation">.</span><span class="token function">setConfigLocation</span><span class="token punctuation">(</span>configLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">configureAndRefreshWebApplicationContext</span><span class="token punctuation">(</span>wac<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> wac<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="c-gt-DispatcherServlet初始化策略"><a href="#c-gt-DispatcherServlet初始化策略" class="headerlink" title="c&gt;DispatcherServlet初始化策略"></a>c&gt;DispatcherServlet初始化策略</h5><p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initStrategies</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token function">initMultipartResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">initLocaleResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">initThemeResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">initHandlerMappings</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">initHandlerAdapters</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">initHandlerExceptionResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">initRequestToViewNameTranslator</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">initViewResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">initFlashMapManager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3、DispatcherServlet调用组件处理请求"><a href="#3、DispatcherServlet调用组件处理请求" class="headerlink" title="3、DispatcherServlet调用组件处理请求"></a>3、DispatcherServlet调用组件处理请求</h3><h5 id="a-gt-processRequest"><a href="#a-gt-processRequest" class="headerlink" title="a&gt;processRequest()"></a>a&gt;processRequest()</h5><p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了processRequest(request, response)</p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Throwable</span> failureCause <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">LocaleContext</span> previousLocaleContext <span class="token operator">=</span> <span class="token class-name">LocaleContextHolder</span><span class="token punctuation">.</span><span class="token function">getLocaleContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LocaleContext</span> localeContext <span class="token operator">=</span> <span class="token function">buildLocaleContext</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RequestAttributes</span> previousAttributes <span class="token operator">=</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ServletRequestAttributes</span> requestAttributes <span class="token operator">=</span> <span class="token function">buildRequestAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> previousAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">WebAsyncManager</span> asyncManager <span class="token operator">=</span> <span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    asyncManager<span class="token punctuation">.</span><span class="token function">registerCallableInterceptor</span><span class="token punctuation">(</span><span class="token class-name">FrameworkServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RequestBindingInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initContextHolders</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> localeContext<span class="token punctuation">,</span> requestAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span>        <span class="token function">doService</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        failureCause <span class="token operator">=</span> ex<span class="token punctuation">;</span>        <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        failureCause <span class="token operator">=</span> ex<span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NestedServletException</span><span class="token punctuation">(</span><span class="token string">"Request processing failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token function">resetContextHolders</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> previousLocaleContext<span class="token punctuation">,</span> previousAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestAttributes <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            requestAttributes<span class="token punctuation">.</span><span class="token function">requestCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">logResult</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> failureCause<span class="token punctuation">,</span> asyncManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">publishRequestHandledEvent</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> startTime<span class="token punctuation">,</span> failureCause<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="b-gt-doService"><a href="#b-gt-doService" class="headerlink" title="b&gt;doService()"></a>b&gt;doService()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doService</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token function">logRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Keep a snapshot of the request attributes in case of an include,</span>    <span class="token comment">// to be able to restore the original attributes after the include.</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> attributesSnapshot <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">isIncludeRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        attributesSnapshot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> attrNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttributeNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>attrNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> attrName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> attrNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cleanupAfterInclude <span class="token operator">||</span> attrName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>DEFAULT_STRATEGIES_PREFIX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                attributesSnapshot<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>attrName<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>attrName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Make framework objects available to handlers and view objects.</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>WEB_APPLICATION_CONTEXT_ATTRIBUTE<span class="token punctuation">,</span> <span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>LOCALE_RESOLVER_ATTRIBUTE<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>localeResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>THEME_RESOLVER_ATTRIBUTE<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>themeResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>THEME_SOURCE_ATTRIBUTE<span class="token punctuation">,</span> <span class="token function">getThemeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FlashMap</span> inputFlashMap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager<span class="token punctuation">.</span><span class="token function">retrieveAndUpdate</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>inputFlashMap <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>INPUT_FLASH_MAP_ATTRIBUTE<span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>inputFlashMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>OUTPUT_FLASH_MAP_ATTRIBUTE<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FlashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>FLASH_MAP_MANAGER_ATTRIBUTE<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">RequestPath</span> requestPath <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parseRequestPath <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">ServletRequestPathUtils</span><span class="token punctuation">.</span><span class="token function">hasParsedRequestPath</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        requestPath <span class="token operator">=</span> <span class="token class-name">ServletRequestPathUtils</span><span class="token punctuation">.</span><span class="token function">parseAndCache</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 处理请求和响应</span>        <span class="token function">doDispatch</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Restore the original attribute snapshot, in case of an include.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>attributesSnapshot <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">restoreAttributesAfterInclude</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> attributesSnapshot<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestPath <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ServletRequestPathUtils</span><span class="token punctuation">.</span><span class="token function">clearParsedRequestPath</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="c-gt-doDispatch"><a href="#c-gt-doDispatch" class="headerlink" title="c&gt;doDispatch()"></a>c&gt;doDispatch()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HttpServletRequest</span> processedRequest <span class="token operator">=</span> request<span class="token punctuation">;</span>    <span class="token class-name">HandlerExecutionChain</span> mappedHandler <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> multipartRequestParsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token class-name">WebAsyncManager</span> asyncManager <span class="token operator">=</span> <span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Exception</span> dispatchException <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            processedRequest <span class="token operator">=</span> <span class="token function">checkMultipart</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            multipartRequestParsed <span class="token operator">=</span> <span class="token punctuation">(</span>processedRequest <span class="token operator">!=</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Determine handler for the current request.</span>            <span class="token comment">/*                mappedHandler：调用链                包含handler、interceptorList、interceptorIndex                handler：浏览器发送的请求所匹配的控制器方法                interceptorList：处理控制器方法的所有拦截器集合                interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行            */</span>            mappedHandler <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">noHandlerFound</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// Determine handler adapter for the current request.</span>               <span class="token comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span>            <span class="token class-name">HandlerAdapter</span> ha <span class="token operator">=</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Process last-modified header, if supported by the handler.</span>            <span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> isGet <span class="token operator">=</span> <span class="token string">"GET"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isGet <span class="token operator">||</span> <span class="token string">"HEAD"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">long</span> lastModified <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletWebRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkNotModified</span><span class="token punctuation">(</span>lastModified<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isGet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 调用拦截器的preHandle()</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mappedHandler<span class="token punctuation">.</span><span class="token function">applyPreHandle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// Actually invoke the handler.</span>            <span class="token comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span>            mv <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>asyncManager<span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">applyDefaultViewName</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 调用拦截器的postHandle()</span>            mappedHandler<span class="token punctuation">.</span><span class="token function">applyPostHandle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dispatchException <span class="token operator">=</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// As of 4.3, we're processing Errors thrown from handler methods as well,</span>            <span class="token comment">// making them available for @ExceptionHandler methods and other scenarios.</span>            dispatchException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NestedServletException</span><span class="token punctuation">(</span><span class="token string">"Handler dispatch failed"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 后续处理：处理模型数据和渲染视图</span>        <span class="token function">processDispatchResult</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> mv<span class="token punctuation">,</span> dispatchException<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span>                               <span class="token keyword">new</span> <span class="token class-name">NestedServletException</span><span class="token punctuation">(</span><span class="token string">"Handler processing failed"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>asyncManager<span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Instead of postHandle and afterCompletion</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                mappedHandler<span class="token punctuation">.</span><span class="token function">applyAfterConcurrentHandlingStarted</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Clean up any resources used by a multipart request.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>multipartRequestParsed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">cleanupMultipart</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="d-gt-processDispatchResult"><a href="#d-gt-processDispatchResult" class="headerlink" title="d&gt;processDispatchResult()"></a>d&gt;processDispatchResult()</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processDispatchResult</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>                                   <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">HandlerExecutionChain</span> mappedHandler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndView</span> mv<span class="token punctuation">,</span>                                   <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> errorView <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">ModelAndViewDefiningException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"ModelAndViewDefiningException encountered"</span><span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>            mv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ModelAndViewDefiningException</span><span class="token punctuation">)</span> exception<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mv <span class="token operator">=</span> <span class="token function">processHandlerException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>            errorView <span class="token operator">=</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Did the handler return a view to render?</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mv<span class="token punctuation">.</span><span class="token function">wasCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 处理模型数据和渲染视图</span>        <span class="token function">render</span><span class="token punctuation">(</span>mv<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errorView<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">clearErrorRequestAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"No view rendering, null ModelAndView returned."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Concurrent handling started during a forward</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Exception (if any) is already handled..</span>        <span class="token comment">// 调用拦截器的afterCompletion()</span>        mappedHandler<span class="token punctuation">.</span><span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="4、SpringMVC的执行流程"><a href="#4、SpringMVC的执行流程" class="headerlink" title="4、SpringMVC的执行流程"></a>4、SpringMVC的执行流程</h3><ol><li>用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</li><li>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</li></ol><p>a) 不存在</p><p>i. 再判断是否配置了mvc:default-servlet-handler</p><p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p><p><img src="/2022/03/23/76-SpringMVC/img006.png" loading="lazy"></p><p><img src="/2022/03/23/76-SpringMVC/img007.png" loading="lazy"></p><p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</p><p><img src="/2022/03/23/76-SpringMVC/img008.png" loading="lazy"></p><p><img src="/2022/03/23/76-SpringMVC/img009.png" loading="lazy"></p><p>b) 存在则执行下面的流程</p><ol><li>根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</li><li>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</li><li>如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】</li><li>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</li></ol><p>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p><p>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p><p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p><p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p><ol><li>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</li><li>此时将开始执行拦截器的postHandle(…)方法【逆向】。</li><li>根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。</li><li>渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</li><li>将渲染结果返回给客户端。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring-MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-Spring5新功能</title>
      <link href="/2022/03/22/75-Spring5%E6%96%B0%E5%8A%9F%E8%83%BD/"/>
      <url>/2022/03/22/75-Spring5%E6%96%B0%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring5新功能"><a href="#Spring5新功能" class="headerlink" title="Spring5新功能"></a>Spring5新功能</h1><ul><li>整个 Spring5 框架的代码基于 Java8，运行时兼容 JDK9，许多不建议使用的类和方法在代码库中删除</li></ul><h2 id="Spring-5-0-框架自带了通用的日志封装"><a href="#Spring-5-0-框架自带了通用的日志封装" class="headerlink" title="Spring 5.0 框架自带了通用的日志封装"></a>Spring 5.0 框架自带了通用的日志封装</h2><p>Spring5 已经移除 Log4jConfigListener，官方建议使用 Log4j2</p><p>Spring5 框架整合 Log4j2</p><ol><li><p>第一步 引入 jar 包<img src="/2022/03/22/75-Spring5%E6%96%B0%E5%8A%9F%E8%83%BD/image-20220322192623516.png" loading="lazy"></p></li><li><p>第二步 创建 log4j2.xml 配置文件</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment">&lt;!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL --></span><span class="token comment">&lt;!--Configuration后面的status用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，可以看到log4j2内部各种详细输出--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">status</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--先定义所有的appender--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appenders</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--输出日志信息到控制台--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>console</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SYSTEM_OUT<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--控制日志输出的格式--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>console</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appenders</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--></span>    <span class="token comment">&lt;!--root：用于指定项目的根日志，如果没有单独指定Logger，则会使用root作为默认的日志输出--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>loggers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>loggers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="Spring5-框架核心容器支持-Nullable-注解"><a href="#Spring5-框架核心容器支持-Nullable-注解" class="headerlink" title="Spring5 框架核心容器支持@Nullable 注解"></a>Spring5 框架核心容器支持@Nullable 注解</h2><ol><li><p>@Nullable 注解可以使用在方法上面，属性上面，参数上面，表示方法返回可以为空，属性值可以为空，参数值可以为空</p></li><li><p>注解用在方法上面，方法返回值可以为空</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Nullable</span><span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>注解使用在方法参数里面，方法参数可以为空</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>注解使用在属性上面，属性值可以为空</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">String</span> bookName<span class="token punctuation">;</span></code></pre></li></ol><h2 id="Spring5-核心容器支持函数式风格GenericApplicationContext"><a href="#Spring5-核心容器支持函数式风格GenericApplicationContext" class="headerlink" title="Spring5 核心容器支持函数式风格GenericApplicationContext"></a>Spring5 核心容器支持函数式风格GenericApplicationContext</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//函数式风格创建对象, 交给spring进行管理</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGenericApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1 创建GenericApplicationContext对象</span>    <span class="token class-name">GenericApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2 调用context的方法对象注册</span>    context<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3 获取在spring注册的对象</span>    <span class="token comment">//User user = (User)context.getBean("com.zr.spring5.test.User");</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="Spring5-支持整合-JUnit5"><a href="#Spring5-支持整合-JUnit5" class="headerlink" title="Spring5 支持整合 JUnit5"></a>Spring5 支持整合 JUnit5</h2><ol><li><p>整合 JUnit4，</p><ul><li>第一步 引入 Spring 相关针对测试依赖<img src="/2022/03/22/75-Spring5%E6%96%B0%E5%8A%9F%E8%83%BD/image-20220323140632194.png" loading="lazy"></li></ul><p><img src="/2022/03/22/75-Spring5%E6%96%B0%E5%8A%9F%E8%83%BD/image-20220323153704565.png" loading="lazy"></p><ul><li><p>第二步 创建测试类，使用注解方式完成</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">//单元测试框架</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span><span class="token string">"classpath:bean1.xml"</span><span class="token punctuation">)</span>    <span class="token comment">//加载配置文件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JTest4</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        userService<span class="token punctuation">.</span><span class="token function">accountMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p>Spring5 整合 JUnit5</p><ul><li><p>第一步 引入 JUnit5 的 jar 包</p><p><img src="/2022/03/22/75-Spring5%E6%96%B0%E5%8A%9F%E8%83%BD/image-20220323153948593.png" loading="lazy"></p></li><li><p>第二步 创建测试类，使用注解完成</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment">//单元测试框架</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span><span class="token string">"classpath:bean1.xml"</span><span class="token punctuation">)</span><span class="token comment">//加载配置文件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JTest5</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        userService<span class="token punctuation">.</span><span class="token function">accountMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p><font color="red">使用一个复合注解替代上面两个注解完成整合</font> </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringJUnitConfig</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token string">"classpath:bean1.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JTest5</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h1 id="Spring5新功能（Webflux）"><a href="#Spring5新功能（Webflux）" class="headerlink" title="Spring5新功能（Webflux）"></a>Spring5新功能（Webflux）</h1><p>SpringWebflux 介绍</p>]]></content>
      
      
      <categories>
          
          <category> Spring全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>74-Spring5事务处理</title>
      <link href="/2022/03/21/74-Spring5%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/"/>
      <url>/2022/03/21/74-Spring5%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="事务概念"><a href="#事务概念" class="headerlink" title="事务概念"></a>事务概念</h1><ol><li>什么事务<ul><li><font color="red">事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果有一个失败所有操作都失败</font> </li><li>典型场景：银行转账</li></ul></li><li><font color="red">事务四个特性（ACID）</font> <ul><li>原子性</li><li>一致性</li><li>隔离性</li><li>持久性</li></ul></li></ol><h1 id="搭建事务操作环境"><a href="#搭建事务操作环境" class="headerlink" title="搭建事务操作环境"></a>搭建事务操作环境</h1><p><img src="/2022/03/21/74-Spring5%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/image-20220322112150109.png" loading="lazy"></p><ol><li><p>创建数据库表，添加记录</p></li><li><p>创建 service，搭建 dao，完成对象创建和注入关系</p><p>service 注入 dao，在 dao 注入 JdbcTemplate，在 JdbcTemplate 注入 DataSource</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//注入dao</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>在 dao 创建两个方法：多钱和少钱的方法，在 service 创建方法（转账的方法）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>    <span class="token comment">//减少钱</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reduceMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"update t_account set money=money-? where userName=?"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"张无忌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//添加钱</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"update t_account set money=money-? where userName=?"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"赵敏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//注入dao</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>    <span class="token comment">//转账的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accountMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//张无忌少100</span>        userDao<span class="token punctuation">.</span><span class="token function">reduceMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//赵敏多100</span>        userDao<span class="token punctuation">.</span><span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>上面代码，如果正常执行没有问题的，但是如果代码执行过程中出现异常，有问题</p><p>使用事务进行解决, 事务操作过程</p><p><img src="/2022/03/21/74-Spring5%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/image-20220322162845281.png" loading="lazy"></p></li></ol><h1 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h1><h2 id="Spring-事务管理介绍"><a href="#Spring-事务管理介绍" class="headerlink" title="Spring 事务管理介绍"></a>Spring 事务管理介绍</h2><ol><li><p>事务添加到 JavaEE 三层结构里面 Service 层（业务逻辑层）</p></li><li><p>在 Spring 进行事务管理操作</p><p>有两种方式：**<font color="purple">编程式事务管理</font><strong>和</strong>*<font color="red">声明式事务管理</font>***（使用）</p></li><li><p>声明式事务管理</p><ul><li>***<font color="red">基于注解方式</font>***（使用）</li><li>基于 xml 配置文件方式</li></ul></li><li><p><font color="blue">在 Spring 进行声明式事务管理，底层使用 AOP 原理</font> </p></li><li><p>Spring 事务管理 API</p><p>提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类</p><p><img src="/2022/03/21/74-Spring5%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/image-20220322164151266.png" loading="lazy"></p></li></ol><h2 id="注解-声明式事务管理-使用"><a href="#注解-声明式事务管理-使用" class="headerlink" title="注解 声明式事务管理 ( 使用 )"></a>注解 声明式事务管理 ( 使用 )</h2><ol><li><p>在 spring 配置文件配置事务管理器</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--创建事务管理器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--注入数据源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>在 spring 配置文件，开启事务注解</p><ol><li><p>在 spring 配置文件引入名称空间 tx</p><p><img src="/2022/03/21/74-Spring5%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/image-20220322165208968.png" loading="lazy"></p></li><li><p>开启事务注解</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--开启事务注解--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>annotation-driven</span><span class="token punctuation">></span></span></code></pre></li></ol></li><li><p>在 service 类上面（或者 service 类里面方法上面）添加事务注解</p><ul><li><p><font color="red">@Transactional，这个注解添加到类上面，也可以添加方法上面</font> </p></li><li><p>如果把这个注解添加类上面，这个类里面所有的方法都添加事务</p></li><li><p>如果把这个注解添加方法上面，为这个方法添加事务</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li></ol><h2 id="声明式事务管理参数配置"><a href="#声明式事务管理参数配置" class="headerlink" title="声明式事务管理参数配置"></a>声明式事务管理参数配置</h2><ul><li>在 service 类上面添加注解@Transactional，在这个注解里面可以配置事务相关参数</li></ul><p><img src="/2022/03/21/74-Spring5%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/image-20220322170202491.png" loading="lazy"></p><h3 id="propagation：事务传播行为"><a href="#propagation：事务传播行为" class="headerlink" title="propagation：事务传播行为"></a><font color="red">propagation：事务传播行为</font></h3><p>多事务方法直接进行调用，这个过程中事务 是如何进行管理的</p><p><img src="/2022/03/21/74-Spring5%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/image-20220322171207965.png" loading="lazy"></p><p><img src="/2022/03/21/74-Spring5%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA.bmp" loading="lazy"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="ioslation：事务隔离级别"><a href="#ioslation：事务隔离级别" class="headerlink" title="ioslation：事务隔离级别"></a><font color="red">ioslation：事务隔离级别</font></h3><ul><li><p>事务有特性称为隔离性，多事务操作之间不会产生影响。如果不考虑隔离性产生很多问题</p></li><li><p>有三个读问题：</p><ul><li><p><font color="purple">脏读 : 一个未提交事务读取到另一个未提交事务的数据</font> </p><p><img src="/2022/03/21/74-Spring5%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/image-20220322174248798.png" loading="lazy"></p></li><li><p><font color="purple">不可重复读 : 一个未提交事务读取到另一提交事务的</font><font color="red">修改数据</font> </p><p><img src="/2022/03/21/74-Spring5%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/image-20220322174639159.png" loading="lazy"></p></li><li><p><font color="purple">虚（幻）读 : 一个未提交事务读取到另一提交事务的</font><font color="red">添加数据</font> </p></li></ul></li><li><p>解决：通过设置事务隔离级别，解决读问题</p><p><img src="/2022/03/21/74-Spring5%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.bmp" loading="lazy"></p><p><font color="green"><em><strong>mysql默认使用 REPEATABLE  READ 可重复读</strong></em></font> </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRED<span class="token punctuation">,</span>isolation <span class="token operator">=</span> <span class="token class-name">Isolation</span><span class="token punctuation">.</span>REPEATABLE_READ<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h3 id="timeout：超时时间"><a href="#timeout：超时时间" class="headerlink" title="timeout：超时时间"></a><font color="red">timeout：超时时间</font></h3><ul><li>事务需要在一定时间内进行提交，如果不提交进行回滚</li><li><font color="blue">默认值是 -1 ，设置时间以秒单位进行计算</font></li></ul><h3 id="readOnly：是否只读"><a href="#readOnly：是否只读" class="headerlink" title="readOnly：是否只读"></a><font color="red">readOnly：是否只读</font></h3><ul><li>读：查询操作，写：添加修改删除操作</li><li>readOnly 默认值 false，表示可以查询，可以添加修改删除操作</li><li>设置 readOnly 值是 true，设置成 true 之后，只能查询</li></ul><h3 id="rollbackFor：回滚"><a href="#rollbackFor：回滚" class="headerlink" title="rollbackFor：回滚"></a><font color="red">rollbackFor：回滚</font></h3><ul><li>设置出现哪些异常进行事务回滚</li></ul><h3 id="noRollbackFor：不回滚"><a href="#noRollbackFor：不回滚" class="headerlink" title="noRollbackFor：不回滚"></a><font color="red">noRollbackFor：不回滚</font></h3><ul><li>设置出现哪些异常不进行事务回滚</li></ul><h2 id="XML-声明式事务管理"><a href="#XML-声明式事务管理" class="headerlink" title="XML 声明式事务管理"></a>XML 声明式事务管理</h2><ul><li><p>在 spring 配置文件中进行配置</p><ol><li><p>第一步 配置事务管理器</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--1 创建事务管理器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--注入数据源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>第二步 配置通知</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--2 配置通知--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txadvice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置事务参数--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--指定哪种规则的方法上面添加事务--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountMoney<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--&lt;tx:method name="account*"/>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span></code></pre></li><li><p>第三步 配置切入点和切面</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--3 配置切入点和切面--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置切入点--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.zr.spring5.service.UserService.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--配置切面--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txadvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ul><h2 id="完全注解-声明式事务管理"><a href="#完全注解-声明式事务管理" class="headerlink" title="完全注解 声明式事务管理"></a>完全注解 声明式事务管理</h2><ul><li><p>创建配置类，使用配置类替代 xml 配置文件</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token comment">//配置类</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.zr"</span><span class="token punctuation">)</span>     <span class="token comment">//组件扫描</span><span class="token annotation punctuation">@EnableTransactionManagement</span>    <span class="token comment">//开启事务</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TxConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建数据库连接池</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DruidDataSource</span> <span class="token function">getDruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">DruidDataSource</span> druidDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        druidDataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        druidDataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/user_db"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        druidDataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        druidDataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> druidDataSource<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//创建JdbcTemplate对象</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">JdbcTemplate</span> <span class="token function">getJdbcTemplate</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//到ioc容器中根据类型找到dataSource</span>        <span class="token class-name">JdbcTemplate</span> jdbcTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注入dataSource</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//创建事务管理器对象</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DataSourceTransactionManager</span> <span class="token function">getDataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">DataSourceTransactionManager</span> transactionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transactionManager<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> transactionManager<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>73-Spring5框架JdbcTemplate</title>
      <link href="/2022/03/21/73-Spring5%E6%A1%86%E6%9E%B6JdbcTemplate/"/>
      <url>/2022/03/21/73-Spring5%E6%A1%86%E6%9E%B6JdbcTemplate/</url>
      
        <content type="html"><![CDATA[<h1 id="JdbcTemplate-概念和准备"><a href="#JdbcTemplate-概念和准备" class="headerlink" title="JdbcTemplate(概念和准备)"></a>JdbcTemplate(概念和准备)</h1><ol><li><p>什么是 JdbcTemplate</p><ul><li>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</li></ul></li><li><p>准备工作</p><ol><li><p>引入相关 jar 包</p><p><img src="/2022/03/21/73-Spring5%E6%A1%86%E6%9E%B6JdbcTemplate/image-20220321174553717.png" loading="lazy"></p></li><li><p>在 spring 配置文件配置数据库连接池</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--直接配置连接池--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/test1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>配置 JdbcTemplate 对象，注入 DataSource</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--JdbcTemplate 对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--注入DataSource--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建 service 类，创建 dao 类，在 dao 注入 jdbcTemplate 对象</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 组件扫描 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre><ul><li><p><font color="red">Service</font> </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//注入dao</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">BookDao</span> bookDao<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><font color="red">Dao</font> </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookDao</span><span class="token punctuation">&#123;</span>    <span class="token comment">//注入JdbcTemplate 对象</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li></ol></li></ol><h1 id="JdbcTemplate-操作数据库"><a href="#JdbcTemplate-操作数据库" class="headerlink" title="JdbcTemplate 操作数据库"></a>JdbcTemplate 操作数据库</h1><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><ol><li><p>对应数据库创建实体类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userStatus<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>编写 service 和 dao</p><ul><li><p>在 dao 进行数据库添加操作</p></li><li><p>调用 JdbcTemplate 对象里面 update 方法实现添加操作</p><p><img src="/2022/03/21/73-Spring5%E6%A1%86%E6%9E%B6JdbcTemplate/image-20220321193344691.png" loading="lazy"></p><p>第一个参数：sql 语句</p><p>第二个参数：可变参数 ? ，设置 sql 语句值</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookDao</span><span class="token punctuation">&#123;</span>    <span class="token comment">//注入JdbcTemplate 对象</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>    <span class="token comment">//添加的方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1 创建sql语句</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into t_book values(?,?,?)"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> update <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getUserStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p>测试类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BookService</span> bookService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"bookService"</span><span class="token punctuation">,</span> <span class="token class-name">BookService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    book<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    book<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    book<span class="token punctuation">.</span><span class="token function">setUserStatus</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bookService<span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/03/21/73-Spring5%E6%A1%86%E6%9E%B6JdbcTemplate/image-20220321201200456.png" loading="lazy"></p></li></ol><h2 id="修改和删除"><a href="#修改和删除" class="headerlink" title="修改和删除"></a>修改和删除</h2><ol><li><p>修改</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//修改方法</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1 创建sql语句</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"update t_book set userName=?,userStatus=? where userId=?"</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token punctuation">&#123;</span> book<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getUserStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> update <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>删除</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//删除方法</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteBook</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"delete from t_book where usreId=?"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> update <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h2 id="查询返回某个值"><a href="#查询返回某个值" class="headerlink" title="查询返回某个值"></a>查询返回某个值</h2><ol><li><p>查询表里面有多少条记录，返回是某个值</p></li><li><p>使用 JdbcTemplate 实现查询返回某个值代码</p><p><img src="/2022/03/21/73-Spring5%E6%A1%86%E6%9E%B6JdbcTemplate/image-20220321204231588.png" loading="lazy"></p><p>第一个参数：sql 语句</p><p>第二个参数：返回类型 Class</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//查询表中的记录数</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">selectCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select count(*) from t_book"</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> count <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h2 id="查询返回对象"><a href="#查询返回对象" class="headerlink" title="查询返回对象"></a>查询返回对象</h2><ol><li><p>场景：查询图书详情</p></li><li><p>JdbcTemplate 实现查询返回对象</p><p><img src="/2022/03/21/73-Spring5%E6%A1%86%E6%9E%B6JdbcTemplate/image-20220321205550744.png" loading="lazy"></p><p>第一个参数：sql 语句</p><p>第二个参数：RowMapper 是接口，针对返回不同类型数据，使用这个接口里面实现类完成数据封装</p><p>第三个参数：sql 语句 ? 的值</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//查询返回对象</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">selectBookInfo</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from t_book where userId=?"</span><span class="token punctuation">;</span>    <span class="token class-name">Book</span> book <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> book<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h2 id="查询返回集合"><a href="#查询返回集合" class="headerlink" title="查询返回集合"></a>查询返回集合</h2><ol><li><p>查询图书列表分页…</p></li><li><p>调用 JdbcTemplate 方法实现查询返回集合</p><p><img src="/2022/03/21/73-Spring5%E6%A1%86%E6%9E%B6JdbcTemplate/image-20220321210625937.png" loading="lazy"></p><p>第一个参数：sql 语句</p><p>第二个参数：RowMapper 是接口，针对返回不同类型数据，使用这个接口里面实现类完成数据封装</p><p>第三个参数：sql 语句值</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//查询返回集合</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from t_book"</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> bookList <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bookList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h2 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h2><ol><li><p>批量操作：操作表里面多条记录</p></li><li><p>JdbcTemplate 方法实现<font color="purple">批量添加操作</font> </p><p><img src="/2022/03/21/73-Spring5%E6%A1%86%E6%9E%B6JdbcTemplate/image-20220321211507037.png" loading="lazy"></p><p>第一个参数：sql 语句</p><p>第二个参数：List 集合，添加多条记录数据</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//批量添加</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">batchAddBook</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> batchArgs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into t_book values(?,?,?)"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">batchUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> batchArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>批量添加测试方法: </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//批量添加</span><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> batchArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> o1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"jQuery"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> o2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"Servlet"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> o3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"JDBC"</span><span class="token punctuation">,</span><span class="token string">"f"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>batchArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>batchArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>batchArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o3<span class="token punctuation">)</span><span class="token punctuation">;</span>bookService<span class="token punctuation">.</span><span class="token function">batchAdd</span><span class="token punctuation">(</span>batchArgs<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>JdbcTemplate 实现<font color="purple">批量修改操作</font> </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//批量修改</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">batchUpdateBook</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> batchArgs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"update t_book set userName=?,userStatus=? where userId=?"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">batchUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> batchArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>批量修改测试方法:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//批量修改</span><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> batchArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> o1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"jQuery"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> o2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"JSP"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> o3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"JdbcTemplate"</span><span class="token punctuation">,</span><span class="token string">"f"</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>batchArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>batchArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>batchArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o3<span class="token punctuation">)</span><span class="token punctuation">;</span>bookService<span class="token punctuation">.</span><span class="token function">batchUpdate</span><span class="token punctuation">(</span>batchArgs<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>JdbcTemplate 实现<font color="purple">批量删除操作</font> </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//批量删除</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">batchDeleteBook</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> batchArgs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"delete from t_book where userId=?"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">batchUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> batchArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>批量删除测试方法:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//批量删除</span><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> batchArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> o1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> o2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>batchArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>batchArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>bookService<span class="token punctuation">.</span><span class="token function">batchDelete</span><span class="token punctuation">(</span>batchArgs<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>72-Spring5框架AOP</title>
      <link href="/2022/03/20/72-Spring5%E6%A1%86%E6%9E%B6AOP/"/>
      <url>/2022/03/20/72-Spring5%E6%A1%86%E6%9E%B6AOP/</url>
      
        <content type="html"><![CDATA[<h1 id="AOP概念"><a href="#AOP概念" class="headerlink" title="AOP概念"></a>AOP概念</h1><ol><li><p>什么是 AOP</p><ul><li><p>面向切面编程（方面），利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p></li><li><p><font color="red">通俗描述：不通过修改源代码方式，在主干功能里面添加新功能</font> </p></li><li><p>使用登录例子说明 AOP</p><p><img src="/2022/03/20/72-Spring5%E6%A1%86%E6%9E%B6AOP/image-20220320173955875.png" loading="lazy"></p></li></ul></li></ol><h1 id="AOP底层原理"><a href="#AOP底层原理" class="headerlink" title="AOP底层原理"></a>AOP底层原理</h1><ul><li><p>AOP 底层使用动态代理</p><ul><li><p>有两种情况动态代理</p><ol><li><p><font color="red">有接口情况，使用 JDK 动态代理</font> </p><p>创建接口实现类代理对象，增强类的方法</p><p><img src="/2022/03/20/72-Spring5%E6%A1%86%E6%9E%B6AOP/image-20220320211120545.png" loading="lazy"></p></li><li><p><font color="red">没有接口情况，使用 CGLIB 动态代理</font> </p><p>创建子类的代理对象，增强类的方法</p><p><img src="/2022/03/20/72-Spring5%E6%A1%86%E6%9E%B6AOP/image-20220320211209670.png" loading="lazy"></p></li></ol></li></ul></li></ul><h2 id="AOP（JDK-动态代理）"><a href="#AOP（JDK-动态代理）" class="headerlink" title="AOP（JDK 动态代理）"></a>AOP（JDK 动态代理）</h2><ol><li><p><font color="red">使用 JDK 动态代理，使用 Proxy 类里面的方法创建代理对象</font> </p><p><img src="/2022/03/20/72-Spring5%E6%A1%86%E6%9E%B6AOP/image-20220320212047655.png" loading="lazy"></p><ul><li><p>调用 newProxyInstance 方法</p><p><img src="/2022/03/20/72-Spring5%E6%A1%86%E6%9E%B6AOP/image-20220320212235806.png" loading="lazy"></p><ul><li>方法有三个参数： </li><li>第一参数，类加载器 </li><li>第二参数，增强方法所在的类，这个类实现的接口，支持多个接口 </li><li>第三参数，实现这个接口 InvocationHandler，创建代理对象，写增强的部分</li></ul></li></ul></li><li><p>编写 JDK 动态代理代码</p><ol><li><p>创建接口，定义方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>创建接口实现类，实现方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>使用 Proxy 类创建接口代理对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKProxy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建接口实现类代理对象</span>        <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">UserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//        Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, new InvocationHandler() &#123;</span><span class="token comment">//            @Override</span><span class="token comment">//            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><span class="token comment">//                return null;</span><span class="token comment">//            &#125;</span><span class="token comment">//        &#125;);</span>        <span class="token class-name">UserDaoImpl</span> userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserDao</span> dao <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserDao</span><span class="token punctuation">)</span><span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">JDKProxy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoProxy</span><span class="token punctuation">(</span>userDao<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result="</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建代理对象代码</span><span class="token keyword">class</span> <span class="token class-name">UserDaoProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1 把创建的是'谁'的代理对象, 把'谁'传递进来</span>    <span class="token comment">//有参数构造传递</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> obj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UserDaoProxy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//增强的逻辑</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//方法之前</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法之前执行..."</span><span class="token operator">+</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--传递的参数:..."</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//被增强的方法执行</span>        <span class="token class-name">Object</span> res <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方法之后</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法之后执行..."</span><span class="token operator">+</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol></li></ol><h1 id="AOP-术语"><a href="#AOP-术语" class="headerlink" title="AOP(术语)"></a>AOP(术语)</h1><blockquote><ul><li><font color="red">连接点</font> <ul><li><font color="purple">类里面哪些方法可以被增强, 这些方法称为连接点 </font> </li></ul></li><li><font color="red">切入点</font> <ul><li><font color="brown">实际被真正增强的方法, 称为切入点</font> </li></ul></li><li><font color="red">通知（增强）</font> <ol><li><font color="green">实际增强的逻辑部分称为通知 ( 增强 ) </font> </li><li><font color="green">通知有多种类型</font> <ul><li><font color="brown">前置通知</font> @Before</li><li><font color="brown">后置通知</font> @AfterReturning</li><li><font color="brown">环绕通知</font> @Around</li><li><font color="brown">异常通知</font> @AfterThrowing</li><li><font color="brown">最终通知</font> @After</li></ul></li></ol></li><li><font color="red">切面</font> <ul><li><strong>是动作: 把通知应用到切入点的过程</strong> </li></ul></li></ul></blockquote><h1 id="AOP操作-准备工作"><a href="#AOP操作-准备工作" class="headerlink" title="AOP操作 ( 准备工作 )"></a>AOP操作 ( 准备工作 )</h1><ol><li><p><font color="red">Spring 框架一般都是基于 AspectJ 实现 AOP 操作</font> </p><ul><li><font color="brown">AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使用，进行 AOP 操作</font> </li></ul></li><li><p><font color="red">基于 AspectJ 实现 AOP 操作</font> </p><ol><li>基于 xml 配置文件实现</li><li>基于注解方式实现（使用）</li></ol></li><li><p>在项目工程里面引入 AOP 相关依赖</p><p><img src="/2022/03/20/72-Spring5%E6%A1%86%E6%9E%B6AOP/image-20220320223145165.png" loading="lazy"></p></li><li><p><font color="red">切入点表达式</font> </p><ul><li><p><font color="purple">切入点表达式作用：知道对哪个类里面的哪个方法进行增强</font> </p></li><li><p><font color="green">语法结构： <strong><code>execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]) )</code></strong></font> </p><ul><li><p>举例1: 对 com.atguigu.dao.BookDao 类里面的 add 进行增强 </p><p>(* com.atguigu.dao.BookDao.add(..))</p><p><font color="red"><code>返回类型可以省略    ..表示参数</code></font> </p></li><li><p>举例2: 对 com.atguigu.dao.BookDao 类里面的所有的方法进行增强 </p><p>execution(* com.atguigu.dao.BookDao.* (..))</p></li><li><p>举例3: 对 com.atguigu.dao 包里面所有类，类里面所有方法进行增强 </p><p>execution(* com.atguigu.dao.*.* (..))</p></li></ul></li></ul></li></ol><h1 id="AOP-操作（AspectJ-注解）"><a href="#AOP-操作（AspectJ-注解）" class="headerlink" title="AOP 操作（AspectJ 注解）"></a>AOP 操作（AspectJ 注解）</h1><ol><li><p>创建类，在类里面定义方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>创建增强类（编写增强逻辑）</p><p>在增强类里面，创建方法，让不同方法代表不同通知类型</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//增强的类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProxy</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//前置通知</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><font color="red">进行通知的配置</font> </p><ol><li><p>在 spring 配置文件中，开启注解扫描</p><p><img src="/2022/03/20/72-Spring5%E6%A1%86%E6%9E%B6AOP/image-20220321134435948.png" loading="lazy"></p></li><li><p>使用注解创建 User 和 UserProxy 对象</p><p><img src="/2022/03/20/72-Spring5%E6%A1%86%E6%9E%B6AOP/image-20220321134609364.png" loading="lazy"></p></li><li><p>在增强类上面添加注解 @Aspect</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//增强的类</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span> <span class="token comment">//生成代理对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProxy</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>在 spring 配置文件中开启生成代理对象</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--开启Aspect生成代理对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span></code></pre></li></ol></li><li><p><font color="red">配置不同类型的通知</font> </p><p><font color="red">在增强类的里面，在作为通知方法上面添加通知类型注解，使用切入点表达式配置</font> </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//增强的类</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span> <span class="token comment">//生成代理对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProxy</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//前置通知</span>    <span class="token comment">//@Before注解表示作为前置通知</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.zr.spring5.aopanno.User.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//后置通知（返回通知）</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.zr.spring5.aopanno.User.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">AfterReturning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AfterReturning..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//最终通知</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.zr.spring5.aopanno.User.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//异常通知</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.zr.spring5.aopanno.User.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">AfterThrowing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AfterThrowing..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//环绕通知</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.zr.spring5.aopanno.User.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕之前..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//被增强的方法执行</span>        proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕之后..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>相同的切入点抽取</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//相同切入点抽取</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.zr.spring5.aopanno.User.add(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointdemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//前置通知</span><span class="token comment">//@Before注解表示作为前置通知</span><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pointdemo()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>有多个增强类对同一个方法进行增强，设置增强类优先级</p><p>在增强类上面添加注解 @Order(数字类型值)，数字类型值越小优先级越高</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonProxy</span> <span class="token punctuation">&#123;</span></code></pre></li></ol><h3 id="完全使用注解开发"><a href="#完全使用注解开发" class="headerlink" title="完全使用注解开发"></a><font color="purple">完全使用注解开发</font></h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"com.zr"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>proxyTargetClass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//开启Aspect生成代理对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigAop</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="AOP-操作（AspectJ-配置文件）"><a href="#AOP-操作（AspectJ-配置文件）" class="headerlink" title="AOP 操作（AspectJ 配置文件）"></a>AOP 操作（AspectJ 配置文件）</h1><ol><li><p>创建两个类，增强类和被增强类，创建方法</p></li><li><p>在 spring 配置文件中创建两个类对象</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--创建对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.aopxml.Book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookProxy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.aopxml.BookProxy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>在 spring 配置文件中配置切入点</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置 aop 增强--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置切入点--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.zr.spring5.aopxml.Book.buy(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--配置切面--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookProxy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--配置作用在具体的方法上--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>71-Spring5框架IOC</title>
      <link href="/2022/03/18/71-Spring5%E6%A1%86%E6%9E%B6IOC/"/>
      <url>/2022/03/18/71-Spring5%E6%A1%86%E6%9E%B6IOC/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring概念"><a href="#1-Spring概念" class="headerlink" title="1.Spring概念"></a>1.Spring概念</h1><ol><li>Spring是轻量级的开源的JavaEE框架</li><li>Spring可以解决企业应用开发的复杂性</li><li>Spring有两个核心部分:IOC和Aop <ol><li>IOC：控制反转，把创建对象过程交给Spring进行管理</li><li>Aop：面向切面，不修改源代码进行功能增强</li></ol></li><li>Spring特点：<ol><li>方便解耦，简化开发</li><li>Aop编程支持</li><li>方便程序的测试</li><li>方便和其他框架进行整合</li><li>方便进行事务操作</li><li>降低API开发难度</li></ol></li></ol><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><ol><li><p>下载Spring5最新稳定版(snapshot:快照  GA:稳定版)，官网：<code>spring.io</code></p><p><img src="/2022/03/18/71-Spring5%E6%A1%86%E6%9E%B6IOC/image-20220318153043985.png" loading="lazy"></p><p>下载地址</p><p><a href="https://repo.spring.io/artifactory/release/org/springframework/spring/">https://repo.spring.io/artifactory/release/org/springframework/spring/</a></p></li><li><p>打开idea工具，创建普通Java工程</p><p><img src="/2022/03/18/71-Spring5%E6%A1%86%E6%9E%B6IOC/image-20220318155201324.png" loading="lazy"></p><p><img src="/2022/03/18/71-Spring5%E6%A1%86%E6%9E%B6IOC/image-20220318155832316.png" loading="lazy"></p></li><li><p>导入Spring5相关jar包</p><p><img src="/2022/03/18/71-Spring5%E6%A1%86%E6%9E%B6IOC/image-20220318163205141.png" loading="lazy"></p></li><li><p>创建普通类，在这个类中创建普通方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>创建Spring配置文件，在配置文件中配置创建的对象</p><ol><li><p>Spring配置文件使用xml格式文件</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置User类对象创建 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li></ol></li><li><p>进行测试代码编写</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1 加载spring配置文件</span>    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2 获取配置创建的对象</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h1 id="2-IOC容器"><a href="#2-IOC容器" class="headerlink" title="2.IOC容器"></a>2.IOC容器</h1><ol><li><p>什么是IOC：</p><ul><li>***控制反转 (Inversion of Control)***，把对象创建和对象之间的调用过程，交给Spring进行管理</li><li><font color="red">使用IOC的目的：为了耦合度降低</font></li><li>做的入门案例就是IOC实现</li></ul></li><li><p>IOC底层原理</p><ul><li><font color="red">xml解析、工厂模式、反射</font></li></ul></li><li><p>画图讲解IOC底层原理</p><p><img src="/2022/03/18/71-Spring5%E6%A1%86%E6%9E%B6IOC/image-20220318204338098.png" loading="lazy"></p></li><li><p>IOC接口（BeanFactory）</p><ul><li><p><font color="red">IOC 思想基于 IOC 容器完成，IOC 容器底层就是对象工厂</font></p></li><li><p>Spring 提供 IOC 容器实现两种方式：（两个接口）</p><ol><li><font color="blue">BeanFactory：</font>IOC 容器基本实现，是 Spring 内部的使用接口，不提供开发人员进行使用 <ul><li><font color="red">加载配置文件时候不会创建对象，在获取对象（使用）才去创建对象</font></li></ul></li><li><font color="blue">ApplicationContext：</font>BeanFactory 接口的子接口，提供更多更强大的功能，一般由开发人员进行使用 <ul><li><font color="red">加载配置文件时候就会把在配置文件对象进行创建</font></li></ul></li></ol></li><li><p>ApplicationContext 接口有实现类</p><p><img src="/2022/03/18/71-Spring5%E6%A1%86%E6%9E%B6IOC/image-20220318210455986.png" loading="lazy"></p></li></ul></li><li><p>什么是 Bean 管理</p><ul><li>Bean 管理指的是两个操作<ol><li>Spring 创建对象</li><li>Spirng 注入属性</li></ol></li><li>Bean 管理操作有两种方式<ol><li>基于 xml 配置文件方式实现</li><li>基于 注解 方式实现</li></ol></li></ul></li></ol><h2 id="IOC操作-Bean管理"><a href="#IOC操作-Bean管理" class="headerlink" title="IOC操作 Bean管理"></a>IOC操作 Bean管理</h2><h3 id="1-基于xml"><a href="#1-基于xml" class="headerlink" title="1.基于xml"></a>1.基于xml</h3><ul><li><p>基于 xml 方式创建对象</p><p><img src="/2022/03/18/71-Spring5%E6%A1%86%E6%9E%B6IOC/image-20220318211746724.png" loading="lazy"></p><ol><li>在 spring 配置文件中，使用 bean 标签，标签里面添加对应属性，就可以实现对象创建</li><li>在 bean 标签有很多属性，介绍常用的属性<ul><li> id 属性：唯一标识</li><li> class 属性：类全路径（包类路径）</li></ul></li><li><font color="red">创建对象时候，默认也是执行无参数构造方法完成对象创建</font></li></ol></li><li><p>基于 xml 方式注入属性</p><ul><li>DI：依赖注入，就是注入属性</li></ul></li></ul><h4 id="第一种注入方式：使用-set-方法进行注入"><a href="#第一种注入方式：使用-set-方法进行注入" class="headerlink" title="第一种注入方式：使用 set 方法进行注入"></a>第一种注入方式：使用 set 方法进行注入</h4><ol><li><p>创建一个类，定义属性和Set方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建属性</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> bname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> bauthor<span class="token punctuation">;</span>    <span class="token comment">//创建属性对应的 set 方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBname</span><span class="token punctuation">(</span><span class="token class-name">String</span> bname<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bname <span class="token operator">=</span> bname<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBauthor</span><span class="token punctuation">(</span><span class="token class-name">String</span> bauthor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bauthor <span class="token operator">=</span> bauthor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>在Spring配置文件配置对象的创建，配置属性注入</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.Book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--使用 property 完成属性注入         name：类里面属性名称         value：向属性注入的值         --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>易筋经<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>达摩老祖<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ol><h4 id="第二种注入方式：使用有参数构造进行注入"><a href="#第二种注入方式：使用有参数构造进行注入" class="headerlink" title="第二种注入方式：使用有参数构造进行注入"></a>第二种注入方式：使用有参数构造进行注入</h4><ol><li><p>创建类，定义属性，创建属性对应有参数构造方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Orders</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//属性</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> oname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token comment">//有参数构造</span>    <span class="token keyword">public</span> <span class="token class-name">Orders</span><span class="token punctuation">(</span><span class="token class-name">String</span> oname<span class="token punctuation">,</span><span class="token class-name">String</span> address<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>oname <span class="token operator">=</span> oname<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>在 spring 配置文件中进行配置</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 有参数构造注入属性--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orders<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.spring5.Orders<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>电脑<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>China<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ol><h4 id="p-名称空间注入（了解）-简化第一种set注入方式"><a href="#p-名称空间注入（了解）-简化第一种set注入方式" class="headerlink" title="p 名称空间注入（了解）(简化第一种set注入方式)"></a><font color="greyyellow">p 名称空间注入（了解）</font>(简化第一种set注入方式)</h4><ul><li><p>使用 p 名称空间注入，可以简化基于 xml 配置方式</p><ol><li><p>添加 p 名称空间在配置文件中</p><p><img src="/2022/03/18/71-Spring5%E6%A1%86%E6%9E%B6IOC/image-20220318221306534.png" loading="lazy"></p></li><li><p>进行属性注入，在 bean 标签里面进行操作</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--p 名称空间注入属性--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.Book<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>九阳神功<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>author</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>和尚<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ul><h4 id="xml-注入其他类型属性"><a href="#xml-注入其他类型属性" class="headerlink" title="xml 注入其他类型属性"></a>xml 注入其他类型属性</h4><h5 id="1-字面量"><a href="#1-字面量" class="headerlink" title="1. 字面量"></a>1. 字面量</h5><ul><li><p>null值，在 bean 标签里面进行操作</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--        null值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>null</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre></li><li><p>属性值包含特殊符号</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--属性值包含特殊符号1 把&lt;>进行转义 &amp;lt; &amp;gt;2 把特殊符号内容写到CDATA     &lt;![CDATA[输出的值]]>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span><span class="token cdata">&lt;![CDATA[&lt;&lt;南京>>]]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre></li></ul><h5 id="2-注入属性-外部-bean"><a href="#2-注入属性-外部-bean" class="headerlink" title="2. 注入属性-外部 bean"></a>2. 注入属性-外部 bean</h5><ol><li><p>创建两个类 service 类和 dao 类</p></li><li><p>在 service 调用 dao 里面的方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建UserDao类型属性,生成set方法</span>    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span> userDao<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service add..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>在 spring 配置文件中进行配置</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--service和dao对象创建--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.service.UserService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--注入userDao对象            name属性: 类里面的属性名称            ref属性: 创建userDao对象bean标签id值    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.dao.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ol><h5 id="3-注入属性-内部-bean"><a href="#3-注入属性-内部-bean" class="headerlink" title="3. 注入属性-内部 bean"></a>3. 注入属性-内部 bean</h5><ul><li><p>一对多关系：部门和员工</p><p>一个部门有多个员工，一个员工属于一个部门, 部门是一，员工是多</p></li><li><p>在实体类之间表示一对多关系，</p><p><font color="red">员工表示所属部门，使用对象类型属性进行表示</font></p></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//部门类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dept</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> dname<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDname</span><span class="token punctuation">(</span><span class="token class-name">String</span> dname<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dname <span class="token operator">=</span> dname<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//员工类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> ename<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span><span class="token comment">//员工属于某一个部门,使用对象形式表示</span>    <span class="token keyword">private</span> <span class="token class-name">Dept</span> dept<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDept</span><span class="token punctuation">(</span><span class="token class-name">Dept</span> dept<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dept <span class="token operator">=</span> dept<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEname</span><span class="token punctuation">(</span><span class="token class-name">String</span> ename<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ename <span class="token operator">=</span> ename<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span><span class="token class-name">String</span> gender<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>在 spring 配置文件中进行配置</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--内部bean--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.bean.Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--先设置两个普通属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zhurui<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--对象类型属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.bean.Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>保安部<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h5 id="4-注入属性–级联赋值"><a href="#4-注入属性–级联赋值" class="headerlink" title="4. 注入属性–级联赋值"></a>4. 注入属性–级联赋值</h5><ul><li>第一种写法</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--级联赋值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.bean.Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--先设置两个普通属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zhurui<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--级联赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.bean.Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>财务部<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ul><li>第二种写法    (废话, 实体类肯定要有get方法的, 用这个)</li></ul><p><img src="/2022/03/18/71-Spring5%E6%A1%86%E6%9E%B6IOC/image-20220319182100911.png" loading="lazy"></p><p><img src="/2022/03/18/71-Spring5%E6%A1%86%E6%9E%B6IOC/image-20220319182337883.png" loading="lazy"></p><h4 id="xml注入集合属性"><a href="#xml注入集合属性" class="headerlink" title="xml注入集合属性"></a>xml注入集合属性</h4><ul><li><p>注入数组类型属性</p></li><li><p>注入List集合类型属性</p></li><li><p>注入Map集合类型属性</p></li></ul><ol><li><p>创建类，定义数组、list、map、set 类型属性，生成对应 set 方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1 数组类型属性</span>    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> courses<span class="token punctuation">;</span>    <span class="token comment">//2 list集合类型属性</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token punctuation">;</span>    <span class="token comment">//3 Map集合类型属性</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> maps<span class="token punctuation">;</span>    <span class="token comment">//4 Set集合类型属性</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> sets<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCourses</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> courses<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>courses <span class="token operator">=</span> courses<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMaps</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> maps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maps <span class="token operator">=</span> maps<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSets</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> sets<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sets <span class="token operator">=</span> sets<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>在 spring 配置文件进行配置</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--1 集合类型属性注入 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.collectiontype.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--数组类型属性注入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>courses<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>java课程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>MySQL课程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--list类型属性注入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>大名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>小名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--map类型属性注入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JAVA<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PHP<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--set类型属性注入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sets<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>MySQL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ol><hr><h5 id="在集合里面设置-对象类型值"><a href="#在集合里面设置-对象类型值" class="headerlink" title="在集合里面设置 对象类型值"></a><font color="red">在集合里面设置 对象类型值</font></h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--创建多个course对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>course1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.collectiontype.Course<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Spring5框架<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>course2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.collectiontype.Course<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Mybatis框架<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--注入list集合类型, 值是对象类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>courseList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>course1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>course2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h5 id="把集合注入部分提取出来"><a href="#把集合注入部分提取出来" class="headerlink" title="把集合注入部分提取出来"></a><font color="red">把集合注入部分提取出来</font></h5><ol><li><p>在 spring 配置文件中引入<font color="green">名称空间 util</font></p><p><img src="/2022/03/18/71-Spring5%E6%A1%86%E6%9E%B6IOC/image-20220319201847873.png" loading="lazy"></p></li><li><p>使用 util 标签完成 list 集合注入提取</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--1 提取list集合类型属性注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">util:</span>list</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>易筋经<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>九阳神功<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>葵花宝典<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">util:</span>list</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--2 提取list集合类型属性注入使用--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.collectiontype.Book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ol><h4 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h4><ol><li><strong>Spring 有两种类型 bean，一种普通 bean，另外一种工厂 bean（FactoryBean）</strong></li><li><strong>普通 bean：在配置文件中定义 bean 类型就是返回类型</strong></li><li><strong>工厂 bean：在配置文件定义 bean 类型可以和返回类型不一样</strong></li></ol><p><font color="red">第一步 创建类，让这个类作为工厂 bean，实现接口 FactoryBean</font></p><p><font color="red">第二步 实现接口里面的方法，在实现的方法中定义返回的 bean 类型</font></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Course</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//定义返回bean</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Course</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Course</span> course <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        course<span class="token punctuation">.</span><span class="token function">setCname</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> course<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>测试方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean3.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Course</span> course <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"myBean"</span><span class="token punctuation">,</span> <span class="token class-name">Course</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>spring配置文件</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.factorybean.MyBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><hr><h4 id="bean作用域"><a href="#bean作用域" class="headerlink" title="bean作用域"></a>bean作用域</h4><ol><li><p>在 Spring 里面，设置创建 bean 实例是单实例还是多实例</p></li><li><p><font color="red">在 Spring 里面，默认情况下，bean 是单实例对象</font></p></li><li><p>如何设置单实例还是多实例</p><ol><li><p><font color="red">在 spring 配置文件 bean 标签里面有属性（scope）用于设置单实例还是多实例</font></p></li><li><p>scope属性值</p><p>第一个值 默认值，singleton，表示是单实例对象</p><p>第二个值 prototype，表示是多实例对象</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.collectiontype.Book<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/03/18/71-Spring5%E6%A1%86%E6%9E%B6IOC/image-20220319205830223.png" loading="lazy"></p><p><img src="/2022/03/18/71-Spring5%E6%A1%86%E6%9E%B6IOC/image-20220319205900153.png" loading="lazy"></p></li><li><p><font color="red">singleton 和 prototype 区别</font></p><p>第一 singleton 单实例，prototype 多实例 </p><p>第二 设置 scope 值是 singleton 时候，加载 spring 配置文件时候就会创建单实例对象</p><p><font color="red">设置 scope 值是 prototype 时候，不是在加载 spring 配置文件时候创建 对象，在调用 getBean 方法时候创建多实例对象</font></p></li></ol></li></ol><h4 id="bean-生命周期"><a href="#bean-生命周期" class="headerlink" title="bean 生命周期"></a>bean 生命周期</h4><ul><li><p>生命周期</p><p>从对象创建到对象销毁的过程</p></li><li><p><strong><font color="red">bean 生命周期</font></strong></p><ol><li>通过构造器创建 bean 实例（无参数构造）</li><li>为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</li><li>调用 bean 的初始化的方法（需要进行配置初始化的方法）</li><li>bean 可以使用了（对象获取到了）</li><li>当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</li></ol></li><li><p>演示 bean 生命周期</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Orders</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> oname<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Orders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一步 执行了无参数构造创建bean实例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOname</span><span class="token punctuation">(</span><span class="token class-name">String</span> oname<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>oname <span class="token operator">=</span> oname<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二步 调用了set方法设置属性值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//创建执行的初始化方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第三步 执行初始化方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//创建执行的销毁方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第五步 执行销毁方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>配置文件</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orders<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.bean.Orders<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>initMethod<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destroyMethod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>手机<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>测试方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBean4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean4.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Orders</span> orders <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"orders"</span><span class="token punctuation">,</span> <span class="token class-name">Orders</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第四步 获取创建bean实例对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>orders<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//手动销毁bean实例</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">)</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果</p><p><img src="/2022/03/18/71-Spring5%E6%A1%86%E6%9E%B6IOC/image-20220319213356867.png" loading="lazy"></p></li><li><p><strong><font color="red">bean 的后置处理器，bean 生命周期有七步</font></strong></p><ol><li>通过构造器创建 bean 实例（无参数构造）</li><li>为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</li><li><font color="red">把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization </font>.</li><li>调用 bean 的初始化的方法（需要进行配置初始化的方法）</li><li><font color="red">把 bean 实例传递 bean 后置处理器的方法 postProcessAfterInitialization</font>.</li><li>bean 可以使用了（对象获取到了）</li><li>当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</li></ol></li><li><p>演示添加后置处理器效果</p><ul><li><p>创建类，实现接口 <font color="red">BeanPostProcessor</font>，创建后置处理器</p></li><li><p>```java<br>public class MyBeanPost implements BeanPostProcessor {</p><pre><code>@Overridepublic Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;    System.out.println(&quot;第三步 在我们的初始化之前执行的方法&quot;);    return bean;&#125;@Overridepublic Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;    System.out.println(&quot;第五步 在我们的初始化之后执行的方法&quot;);    return bean;&#125;</code></pre><p>}</p><pre class="language-none"><code class="language-none">&#96;&#96;&#96;xml&lt;!--配置后置处理器--&gt;&lt;bean id&#x3D;&quot;myBeanPost&quot; class&#x3D;&quot;com.zr.spring5.bean.MyBeanPost&quot;&gt;&lt;&#x2F;bean&gt;</code></pre><p>运行结果</p><p><img src="/2022/03/18/71-Spring5%E6%A1%86%E6%9E%B6IOC/image-20220319215125732.png" loading="lazy"></p></li></ul></li></ul><h4 id="xml-自动装配-基本不用-用注解"><a href="#xml-自动装配-基本不用-用注解" class="headerlink" title="xml 自动装配 ( 基本不用, 用注解 )"></a>xml 自动装配 ( 基本不用, 用注解 )</h4><ul><li><p>什么是自动装配</p><ul><li>根据指定装配规则（属性名称或者属性类型），Spring 自动将匹配的属性值进行注入</li></ul></li><li><p>演示自动装配过程</p><ol><li><p>根据属性名称自动注入</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--实现自动装配    bean标签属性 autowire,配置自动装配    autowire属性常用两个值:        byName根据属性名称注入, 注入值bean的id值和类属性名称一样        byType根据属性类型注入, 多个相同类型的bean标签不好分辨--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.autowire.Emp<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.autowire.Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><p>根据属性类型自动注入</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.autowire.Emp<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr.spring5.autowire.Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ul><h4 id="外部属性文件"><a href="#外部属性文件" class="headerlink" title="外部属性文件"></a>外部属性文件</h4><ul><li><font color="red">直接配置数据库信息</font><ol><li><p>配置德鲁伊 ( druid ) 连接池</p></li><li><p>引入德鲁伊连接池依赖 jar 包</p><p><img src="/2022/03/18/71-Spring5%E6%A1%86%E6%9E%B6IOC/image-20220320150703131.png" loading="lazy"></p></li><li><p>直接配置连接池</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--直接配置连接池--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/test1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ol></li><li><font color="red">引入外部属性文件配置数据库连接池</font><ol><li><p>创建外部属性文件，properties 格式文件，写数据库信息</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">jdbc.driverClass</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://127.0.0.1:3306/test1</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span></code></pre></li><li><p>把外部 properties 属性文件引入到 spring 配置文件中</p><p>引入 <font color="green">context 名称空间</font>.</p><p><img src="/2022/03/18/71-Spring5%E6%A1%86%E6%9E%B6IOC/image-20220319232243534.png" loading="lazy"></p></li><li><p>在 spring 配置文件使用标签引入外部属性文件</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--引入外部属性文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--配置连接池--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.driveClass&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ul><hr><h3 id="2-基于注解"><a href="#2-基于注解" class="headerlink" title="2.基于注解"></a>2.基于注解</h3><ul><li>什么是注解<ol><li>注解是代码特殊标记，格式：<font color="red">@注解名称(属性名称=属性值, 属性名称=属性值..)</font></li><li>使用注解，注解作用在类上面，方法上面，属性上面</li><li>使用注解目的：简化 xml 配置</li></ol></li><li>Spring 针对 Bean 管理中<font color="blue"><strong>创建对象</strong></font>提供注解<ul><li><font color="orange">@Component</font> (value=””)</li><li><font color="orange">@Service</font> </li><li><font color="orange">@Controller</font> </li><li><font color="orange">@Repository</font> </li><li><font color="red">上面四个注解功能是一样的，都可以用来创建 bean 实例</font></li></ul></li></ul><h4 id="1-基于注解方式实现对象创建"><a href="#1-基于注解方式实现对象创建" class="headerlink" title="1. 基于注解方式实现对象创建"></a>1. 基于注解方式实现对象创建</h4><ol><li><p>引入依赖</p><p><img src="/2022/03/18/71-Spring5%E6%A1%86%E6%9E%B6IOC/image-20220320151257106.png" loading="lazy"></p></li><li><p>开启组件扫描</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--开启组件扫描    1 如果扫描多个包，多个包使用逗号隔开    2 或者扫描包上层目录--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建类，在类上面添加创建对象注解</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//在注解里面 value 属性值可以省略不写，</span><span class="token comment">//默认值是类名称，首字母小写</span><span class="token comment">//UserService -- userService</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"userService"</span><span class="token punctuation">)</span>    <span class="token comment">//&lt;bean id="userService" class=".."/></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service add..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>开启组件扫描 细节配置</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--示例1    use-default-filters="false" 表示现在不使用默认filter, 自己配置filter    context:include-filter, 设置扫描哪些内容expression: 表示只扫描标识Service或者Controller等等注解的类--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Service<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--示例2    下面配置扫描包所有内容    context:exclude-filter, 设置哪些内容不进行扫描--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre></li></ol><h4 id="2-基于注解方式实现属性注入"><a href="#2-基于注解方式实现属性注入" class="headerlink" title="2. 基于注解方式实现属性注入"></a>2. 基于注解方式实现属性注入</h4><ol><li><p><font color="red">@Autowired：根据属性类型进行自动装配</font> </p><p>第一步 把 service 和 dao 对象创建，在 service 和 dao 类添加创建对象注解</p><p>第二步 在 service 注入 dao 对象，在 service 类添加 dao 类型属性，在属性上面使用注解</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//定义dao类型属性</span>    <span class="token comment">///添加注入属性注解, 不需要添加 set 方法</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service add..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><font color="red">@Qualifier：根据名称进行注入</font> </p><p><font color="blue">这个@Qualifier 注解的使用，和上面@Autowired 一起使用</font> </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//定义dao类型属性</span><span class="token comment">///添加注入属性注解, 不需要添加 set 方法</span><span class="token annotation punctuation">@Autowired</span>  <span class="token comment">//根据类型进行注入</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"UserDaoImpl"</span><span class="token punctuation">)</span> <span class="token comment">//根据名称注入</span><span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span></code></pre></li><li><p><font color="red">@Resource：可以根据类型注入，可以根据名称注入</font></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//@Resource 根据类型进行注入</span><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"usrDaoImpl1"</span><span class="token punctuation">)</span> <span class="token comment">//根据名称注入</span><span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span></code></pre></li><li><p><font color="red">@Value：注入普通类型属性</font></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></code></pre></li></ol><h4 id="3-完全注解开发"><a href="#3-完全注解开发" class="headerlink" title="3. 完全注解开发"></a>3. 完全注解开发</h4><ol><li><p>创建配置类，替代 xml 配置文件</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token comment">//作为配置类, 替代xml配置文件</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"com.zr"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>编写测试类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//使用完全注解方式测试</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testService2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">SpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UserService</span> userService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> <span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>    userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>70-jQuery中的Ajax</title>
      <link href="/2022/03/17/70-jQuery%E4%B8%AD%E7%9A%84Ajax/"/>
      <url>/2022/03/17/70-jQuery%E4%B8%AD%E7%9A%84Ajax/</url>
      
        <content type="html"><![CDATA[<p><strong>jQuery对Ajax的操作进行了封装</strong></p><ul><li>$.ajax()</li><li>$.load()、<font color="red">$.get()、$.post()</font></li><li>$.getScript()、$.getJSON()</li></ul><p><strong>load(url,[data],[callback])</strong></p><ul><li>load()方法是jQuery中最为简单和常用的Ajax方法，能载入远程的HTML代码并插入到DOM中</li><li>方法参数的含义<ul><li> url</li><li>String类型，请求HTML网页的URL地址 </li><li>data<ul><li>Object类型，发送到服务器的key/value数据 </li></ul></li><li>callback<ul><li>回调函数，请求完成时的回调函数，无论请求成功或者失败都会调用</li></ul></li></ul></li><li>程序员只需要使用jQuery选择器为HTML片段指定目标位置，然后将要加载的文件的url作为参数传递给load()方法即可</li><li>如果只需要加载目标HTML网页内的某些元素，则可以通过load()方法的url参数来达到目的。通过URL参数指定选择符，就可以方便地从加载过来的HTML文档中选出所需要的内容。load()方法的URL参数的语法结构为”url selector”（注意：url和选择器之间有一个空格）</li><li>传递方式：load()方法的传递参数根据参数data来自动给定。如果没有参数传递，采用GET方式传递，否则采用POST方式</li><li>对于必须在加载完才能继续的操作，load()方法提供了回调函数，该函数有三个参数：代表请求返回内容的data， 代表请求状态的textStatus对象和XMLHttpRequest对象</li></ul><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a:first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>href<span class="token punctuation">;</span>        <span class="token comment">//防止页面有缓存，加上时间戳</span>        <span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"time"</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a:gt(0)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>href <span class="token operator">+</span> <span class="token string">" h2"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"time"</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>helloWorld.txt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataType?method=html&amp;gameName=lol<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>英雄联盟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataType?method=html&amp;gameName=war<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>魔兽争霸<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataType?method=html&amp;gameName=sc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>星际争霸<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataType?method=html&amp;gameName=red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>红色警戒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><strong>get(url,[data],[callback],[type])</strong></p><ul><li>$.get()方法使用GET方式进行异步请求</li><li>方法参数的含义<ul><li>url<ul><li>String类型，请求HTML网页的URL地址 </li></ul></li><li>data<ul><li>Object类型，发送到服务器的key/value数据，数据会作为 queryString附加到请求的URL中 </li></ul></li><li>callback<ul><li>回调函数，载入成功时回调函数，只有当Response的返回状态是 success才能调用该方法，自动将请求的结果和状态传递给该方法 </li></ul></li><li>type<ul><li>String类型，服务器返回内容的格式，包括xml、html、script、 json、text和_default</li></ul></li></ul></li><li>$.get()方法的回调函数只有两个参数<ul><li>data<ul><li>服务器返回回来的内容，可以是xml文档、json文件、html片段等 </li></ul></li><li>textstatus<ul><li>请求的状态，其值可能为success、error、notmodify，timeout</li></ul></li></ul></li></ul><p><strong>$.get()和$.post()方法在处理返回回来的数据是xml格式的时候，需要先将返回的数据包装成jQuery对象，再使用 find()方法查找节点并取值</strong></p><p><strong>$.get()和$.post()方法如果希望返回回来的数据是json格式，需要将方法的第4个参数设置成”json” ，或者直接使用getJSON()方法</strong></p><p><strong>$.get()和$.post()方法在处理返回回来的数据是json格式的时候，需要先将返回的数据包装成jQuery对象，再使用. 的方式取值</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>69-JSON</title>
      <link href="/2022/03/17/69-JSON/"/>
      <url>/2022/03/17/69-JSON/</url>
      
        <content type="html"><![CDATA[<h1 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h1><p><strong>在服务器端Ajax是一门与语言无关的技术，在业务逻辑层使用任何的服务器端语言都可以</strong></p><p><strong>从服务器端接收数据的时候，那些数据必须以浏览器能够理解的格式来发送。服务器端的编程语言只能以如下3 种格式返回数据</strong></p><ul><li>HTML</li><li>XML</li><li>JSON</li></ul><h1 id="HTML格式"><a href="#HTML格式" class="headerlink" title="HTML格式"></a>HTML格式</h1><p><strong>HTML由一些普通文本组成，如果服务器通过 XMLHttpRequest发送HTML，文本将被存储在responseText属性中</strong></p><p><strong>不需要从responseText属性中读取数据，它已经是希望的格式，可以直接将它插入到网页中</strong></p><p><strong>插入HTML代码最简单的方法是更新这个元素的 innerHTML属性</strong></p><pre class="language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> method <span class="token operator">=</span> <span class="token string">"GET"</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>href<span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span> <span class="token operator">||</span> request<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">304</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> request<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>优点</strong></p><ul><li>从服务器端发送的HTML代码在浏览器端不需要用 JavaScript进行解析</li><li>HTML的可读性好</li><li>HTML代码块与innerHTML属性搭配，效率高</li></ul><p><strong>缺点</strong></p><ul><li>若需要通过Ajax更新一篇文档的多个部分，HTML不合适</li><li>innerHTML属性并非是DOM的标准</li></ul><h1 id="XML格式"><a href="#XML格式" class="headerlink" title="XML格式"></a>XML格式</h1><p><strong>XML由一些普通文本组成，如果服务器通过 XMLHttpRequest发送HTML，文本将被存储在 responseXML属性中</strong></p><p><strong>服务器返回的数据可以是一个XML文件，如果是通过响应的方式向客户端输出一个XML文件的内容，响应内容的 MIME类型要设置成text/xml</strong></p><p><strong>需要从responseXML属性中读取数据去解析，再通过 DOM动态创建节点的方式将它插入到网页中</strong></p><pre class="language-js" data-language="js"><code class="language-js">request<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span> <span class="token operator">||</span> request<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">304</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//结果是XML格式，需要从responseXML获取</span>            <span class="token keyword">var</span> result <span class="token operator">=</span> request<span class="token punctuation">.</span>responseXML<span class="token punctuation">;</span>            <span class="token comment">//使用DOM编程的方式取出XML中的数据</span>            <span class="token keyword">var</span> gameName <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"gameName"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>nodeValue<span class="token punctuation">;</span>            <span class="token keyword">var</span> desc <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"desc"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>nodeValue<span class="token punctuation">;</span>            <span class="token comment">//使用DOM动态创建标签</span>            <span class="token comment">//创建一个font节点</span>            <span class="token keyword">var</span> fontNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"font"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置font节点color属性的属性值</span>            fontNode<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>            <span class="token comment">//创建font节点内部的文本节点</span>            <span class="token keyword">var</span> fontTextNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>gameName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将上面创建的font节点内部的文本节点 作为子节点添加进font节点中</span>            fontNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fontTextNode<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">var</span> h3Node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"h3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            h3Node<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fontNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> fontNode2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"font"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fontNode2<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token string">"3"</span><span class="token punctuation">;</span>            fontNode2<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> divNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            divNode<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            divNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>h3Node<span class="token punctuation">)</span><span class="token punctuation">;</span>            divNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fontNode2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>优点</strong></p><ul><li>XML是一种通用的数据格式</li><li>不需要把数据强加到已定义好的格式中，而是要为数据自 定义合适的标记</li><li>利用DOM可以完全掌控文档</li></ul><p><strong>缺点</strong></p><ul><li>如果文档来自于服务器，就必须保证文档含有正确的头部 信息，如果文档类型不正确，那么responseXML的值为 null</li><li>当浏览器接收到很长的XML文件或者XML文档内容后， DOM解析有可能会变得很复杂</li></ul><h1 id="JSON格式"><a href="#JSON格式" class="headerlink" title="JSON格式"></a>JSON格式</h1><p><strong>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，基于ECMAScript的一个子集</strong></p><p><strong>JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C、C++、C#、Java、 JavaScript、Perl、Python等）。这些特性使JSON成为理想的数据交换语言，易于人阅读和编写，同时也易于机器解析和生成（一般用于提升网络传输速率）</strong></p><h2 id="JSON语法"><a href="#JSON语法" class="headerlink" title="JSON语法"></a>JSON语法</h2><p><strong>JSON语法是JavaScript对象表示语法的子集</strong></p><ul><li>数据在键值对中 </li><li>数据由逗号分隔 </li><li>花括号保存对象 </li><li>方括号保存数组</li></ul><p><strong>JSON值可以是如下的值</strong></p><ul><li>数字（整数或浮点数） </li><li>字符串（在双引号中） </li><li>逻辑值（true 或 false） </li><li>数组（在方括号中） </li><li>对象（在花括号中） </li><li>null</li></ul><h2 id="JSON有两种结构"><a href="#JSON有两种结构" class="headerlink" title="JSON有两种结构"></a>JSON有两种结构</h2><ul><li><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul><li>对象在JavaScript中表示为”{}”括起来的内容，数据结构为 <code>&#123;key： value,key：value,...&#125;</code>的键值对结构，在面向对象的语言中，key为对象的属性，value为对应的属性值，所以很容易理解，取值方法为<code>对 象.key</code>获取属性值，这个属性值的类型可以是数字、字符串、数组、 对象几种 <ul><li>对象是一个无序的<code>&quot;名称/值&quot;</code>对集合</li><li>一个对象以”{“（左括号）开始，”}”（右括号）结束</li><li>每个”名称”后跟一个”:”（冒号）</li><li>“名称/值”对之间使用”,”（逗号）分隔</li></ul></li><li><img src="/2022/03/17/69-JSON/image-20220317204559317.png" loading="lazy"></li></ul></li></ul><ul><li><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li>数组在JavaScript中是中括号”[]”括起来的内容，数据结构为 <code>[&quot;java&quot;,&quot;javascript&quot;,&quot;vb&quot;,...]</code>，取值方式和所有语言中一样，使用索引获取，字段值的类型可以是数字、字符串、数组、对象几种<ul><li>数组是值（value）的有序集合</li><li>一个数组以”[“（左中括号）开始，”]”（右中括号）结束</li><li>值之间使用”,”（逗号）分隔</li></ul></li><li><img src="/2022/03/17/69-JSON/image-20220317204653300.png" loading="lazy"></li></ul></li></ul><pre class="language-js" data-language="js"><code class="language-js">request<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span> <span class="token operator">||</span> request<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">304</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//结果是JSON格式，需要从responseText获取</span>            <span class="token keyword">var</span> result <span class="token operator">=</span> request<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>            <span class="token comment">//将json的字符串包装成json对象</span>            <span class="token keyword">var</span> jsonObject <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token operator">+</span>result<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//从json对象中取出相应的值</span>            <span class="token keyword">var</span> gameName <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span>game<span class="token punctuation">.</span>gameName<span class="token punctuation">;</span>            <span class="token keyword">var</span> desc <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span>game<span class="token punctuation">.</span>desc<span class="token punctuation">;</span>            <span class="token keyword">var</span> fontNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"font"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fontNode<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> fontTextNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>gameName<span class="token punctuation">)</span><span class="token punctuation">;</span>            fontNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fontTextNode<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">var</span> h3Node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"h3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            h3Node<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fontNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> fontNode2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"font"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fontNode2<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token string">"3"</span><span class="token punctuation">;</span>            fontNode2<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> divNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            divNode<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            divNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>h3Node<span class="token punctuation">)</span><span class="token punctuation">;</span>            divNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fontNode2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="XML和JSON的区别"><a href="#XML和JSON的区别" class="headerlink" title="XML和JSON的区别"></a>XML和JSON的区别</h2><ul><li>可读性 <ul><li>JSON和XML的数据可读性基本相同，JSON和XML的可读性可谓不相上下，一边是建议的语法，一边是规范的标签形式，XML可读性较好些</li></ul></li><li>可扩展性 <ul><li>XML天生有很好的扩展性，JSON当然也有，没有什么是XML能扩展，JSON不能的</li></ul></li><li>编码难度 <ul><li>XML有丰富的编码工具，比如Dom4j、JDom等，JSON也有 json.org提供的工具，但是JSON的编码明显比XML容易许多，即使不借助工具也能写出JSON的代码，可是要写好XML就不太容易了</li></ul></li><li>解码难度 <ul><li>XML的解析得考虑子节点父节点，让人头昏眼花，而JSON的解析难度几乎为0，这一点XML输的真是没话说</li></ul></li><li>流行度 <ul><li>XML已经被业界广泛的使用，而JSON才刚刚开始，但是在Ajax这个特定的领域，未来的发展一定是XML让位于JSON。到时Ajax应该变成Ajaj（Asynchronous Javascript and JSON）了</li></ul></li><li>解析手段 <ul><li>JSON和XML同样拥有丰富的解析手段</li></ul></li><li>数据体积 <ul><li>JSON相对于XML来讲，数据的体积小，传递的速度更快些</li></ul></li><li>数据交互 <ul><li>JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互</li></ul></li><li>数据描述<ul><li>JSON对数据的描述性比XML较差</li></ul></li><li>传输速度 <ul><li>JSON的速度要远远快于XML</li></ul></li></ul><h2 id="三种数据格式的使用场景推荐"><a href="#三种数据格式的使用场景推荐" class="headerlink" title="三种数据格式的使用场景推荐"></a>三种数据格式的使用场景推荐</h2><ul><li>若应用程序不需要与其他应用程序共享数据的时候，使用 HTML片段来返回数据是最简单的</li><li>如果数据需要重用，JSON文件格式是个不错的选择，其 在性能和文件大小方面有优势</li><li>当远程应用程序未知时，XML文档是首选，因为XML是 Web服务领域的通用数据传输语言</li></ul><h1 id="FastJson"><a href="#FastJson" class="headerlink" title="FastJson"></a>FastJson</h1><p><strong>阿里巴巴FastJson是一个Json处理工具包，包括“序 列化”和”反序列化”两部分，它具备如下特征</strong></p><ul><li>速度最快<ul><li>测试表明，fastjson具有极快的性能，超越任其他的Java Json parser，包括自称最快的JackJson</li></ul></li><li>功能强大 <ul><li>完全支持JavaBean、集合、Map、日期、Enum，支持范型，支持自省</li></ul></li><li>无依赖 <ul><li>能够直接运行在Java SE 5.0以上版本</li></ul></li><li>支持Android</li><li>开源 (Apache 2.0)</li></ul><p><strong>FastJson常用方法</strong></p><ul><li>public static final Object toJSON(Object javaObject) <ul><li>将JavaBean转换为JSONObject或者JSONArray</li></ul></li><li>public static final T parseObject(String text, Class  clazz) <ul><li>把JSON文本解析成JavaBean</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>68-Ajax</title>
      <link href="/2022/03/17/68-Ajax/"/>
      <url>/2022/03/17/68-Ajax/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Ajax简介"><a href="#一、Ajax简介" class="headerlink" title="一、Ajax简介"></a>一、Ajax简介</h1><p><strong>Ajax是什么?</strong></p><ul><li>Ajax是Asynchronous JavaScript and XML的缩写</li><li>Ajax这项技术在Google在Google Labs发布Google  Maps和Google Suggest后真正为人们所认识</li><li>Ajax是一种不需要刷新整个页面便可以与服务器通讯</li><li>传统的Web模型，客户端向服务器发送一个请求，服务器返回整个页面，相当于整个页面的刷新</li><li>Ajax模型，客户端向服务器发送一个请求，服务器可以不返回整个页面，只返回客户端需要使用的数据，客户端取得服务器返回的数据之后使用DOM编程将该数据使用在适当的DOM元素之上，相当于局部页面的刷新</li></ul><p><strong>不刷新整个网页就可以与服务器进行通信的办法</strong></p><ul><li>Flash</li><li>Java applet</li><li>框架<ul><li>如果使用框架构造了一个网页，可以只更新其中一个框架，而不必惊动整个页面</li></ul></li><li>隐藏的iframe</li><li>XMLHttpRequest<ul><li>该对象是对JavaScript的一个扩展，可使网页与服务器进行通信</li><li>该方式是创建Ajax应用的最佳选择</li><li>在很大一定程度上，Ajax实际上就是XMLHttpRequest</li></ul></li></ul><p><strong>Ajax的工作原理</strong></p><p><img src="/2022/03/17/68-Ajax/image-20220317160628083.png" loading="lazy"></p><p><strong>Ajax相关技术</strong></p><ul><li>Ajax并不是一项新技术，它实际上是几种技术，每种技术各尽其职，以一种全新的方式聚合在了一起<ul><li>服务器端语言<ul><li>服务器需要具备向浏览器发送特定信息的能力</li><li>Ajax与服务器语言无关</li></ul></li><li>XML（过时，用json）<ul><li>eXtensible Markup Language，可扩展标记语言</li><li>一种描述数据的格式</li><li>Ajax程序需要某种格式化的格式来在服务器端和客户端之间传递信息， XML数据格式只是其中的一种</li></ul></li><li>XHTML<ul><li>eXtended Hypertext Markup Language，扩展超媒体标记语言</li><li>呈现网页</li></ul></li><li>CSS<ul><li>Cascading Style Sheet，级联样式表</li><li>修饰网页</li></ul></li><li>DOM<ul><li>Document Object Model，稳定对象模型</li><li>实现动态显示和交互 </li></ul></li><li>XMLHttpRequest<ul><li>使用XMLHTTP组件的XMLHttpRequest对象进行异步数据读取</li></ul></li><li>JavaScript<ul><li>使用JavaScript绑定和处理所有的数据</li></ul></li></ul></li></ul><p><strong>Ajax的缺陷</strong></p><ul><li>由JavaScript和Ajax引擎导致的浏览器兼容性问题（用jquery没问题）</li><li>页面是局部刷新的，导致后退等功能失效</li><li>对流媒体的支持没有Flash、Applet好</li></ul><h1 id="二、XMLHttpRequest"><a href="#二、XMLHttpRequest" class="headerlink" title="二、XMLHttpRequest"></a>二、XMLHttpRequest</h1><p><strong>XMLHttpRequest最早在IE5中以ActiveX组件的形式实现的，并非是W3C的标准</strong></p><p><strong>XMLHttpRequest对象的创建</strong></p><ul><li>由于XMLHttpRequest并非标准，所以实现的方式不统一<ul><li>非IE浏览器（如Firefox、Chrome、Safari等）把XMLHttpRequest对象实现为一个本地的JavaScript对象</li><li>IE7之前版本的浏览器把XMLHttpRequest对象实现为一个ActiveX对象，而IE7以后就和其他浏览器一样了，也实现为本地的一个JavaScript对象</li><li>XMLHttpRequest对象在不同浏览器上的实现是兼容的，所以可以用同样的方式访问XMLHttpRequest实例的属性和方法，而不需要去理论这个实例是用什么方式创建的</li></ul></li></ul><h2 id="1-获得XMLHttpRequest实例"><a href="#1-获得XMLHttpRequest实例" class="headerlink" title="1.获得XMLHttpRequest实例"></a>1.获得XMLHttpRequest实例</h2><ul><li><p>如下方法的封装就是为了要得到XMLHttpRequest实例</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getXMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>ActiveXObject<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> request<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h3 id="XMLHttpRequest实例的方法"><a href="#XMLHttpRequest实例的方法" class="headerlink" title="XMLHttpRequest实例的方法"></a><strong>XMLHttpRequest实例的方法</strong></h3><ul><li>abort()<ul><li>停止当前请求</li></ul></li><li>getAllResponseHeaders()<ul><li> 把HTTP请求的所有响应头部作为key-value对返回</li></ul></li><li>getResponseHeader(“header”)<ul><li>返回指定头部名的值</li></ul></li><li><font color="red">open(“method”,”url”)</font><ul><li>建立对服务器的调用，method参数可以是GET、POST、PUT等， url参数可以是相对URL或者是绝对URL</li></ul></li><li><font color="red">send(content)</font><ul><li>向服务器发送请求</li></ul></li><li><font color="blue">sendRequestHeader(“header”,”value”)</font><ul><li>把指定头部设置为所提供的值，在设置头部之前要先open()</li></ul></li></ul><h3 id="XMLHttpRequest实例的属性"><a href="#XMLHttpRequest实例的属性" class="headerlink" title="XMLHttpRequest实例的属性"></a><strong>XMLHttpRequest实例的属性</strong></h3><ul><li><font color="red">onreadystatechange</font><ul><li>每个状态改变都会触发这个事件处理器，通常会调用一个JavaScript函数</li></ul></li><li><font color="red">readyState</font><ul><li>请求的状态，有5个值可取：0-为初始化，1-正在加载，2-已经加载， 3-交互中，4-完成</li></ul></li><li><font color="blue">responseText</font><ul><li>服务器的响应，表示为一个字符串</li></ul></li><li><font color="blue">responseXML</font><ul><li>服务器的响应，表示为XML，这个对象可以解析为DOM对象</li></ul></li><li><font color="red">status</font><ul><li>服务器的HTTP状态码，比如200、304、404、500等</li></ul></li><li>statusText<ul><li>HTTP状态码对应的文本，比如OK、NotFound等</li></ul></li></ul><p><strong>Ajax的helloWorld</strong></p><p><img src="/2022/03/17/68-Ajax/image-20220317161630262.png" loading="lazy"></p><h2 id="2-发送请求"><a href="#2-发送请求" class="headerlink" title="2.发送请求"></a>2.发送请求</h2><p><strong>利用XMLHttpRequest实例与服务器进行通信包含如下三个关键点</strong></p><ul><li>open()方法 </li><li>send()方法 </li><li>onreadystatechange属性指定的事件处理函数</li></ul><h3 id="2-1-open-method-url-asynch"><a href="#2-1-open-method-url-asynch" class="headerlink" title="2.1 open(method,url,asynch)"></a>2.1 open(method,url,asynch)</h3><blockquote><ul><li>XMLHttpRequest实例的open方法允许开发人员用一个Ajax调用向服务器发送请求 </li><li>method参数<ul><li>请求类型</li><li>类似”GET”或者”POST”的字符串</li><li>如果只想从服务器检索一个文件，而不需要发送任何的数据，使用 GET（可以在GET请求里面通过附加在url上的查询字符串来发送数据， 不过数据大小限制为2000个字符），如果需要向服务器发送数据， 则使用POST</li><li>在某些情况下，有些浏览器会把多个XMLHttpRequest请求的结果缓 存在同一个URL，如果对每个请求的响应不同，就会带来不好的结果， 在此时应该将时间戳追加到URL的最后，就能确保URL的唯一性，从 而避免浏览器缓存结果</li></ul></li><li>url参数<ul><li>路径字符串</li><li>指向服务器上的那个资源，可以是绝对路，也可以是相对路径</li></ul></li><li> asynch</li><li>表示请求是否要异步传输，默认值是true</li><li>如果是true，在读取后面的脚本之前，不需要等待服务器的响应；如 果是false，当脚本处理过程经过这点时，会停下来，一直等到Ajax 请求执行完毕再继续执行</li><li>一般情况下不设置该参数，表示使用默认值true，表示使用异步</li></ul></blockquote><hr><h3 id="2-2-send-data"><a href="#2-2-send-data" class="headerlink" title="2.2 send(data)"></a>2.2 send(data)</h3><blockquote><ul><li>open方法定义了Ajax请求的细节，send方法可以为已经待命的请求发送指令</li><li>data参数<ul><li>将要传递给服务器的字符串 </li></ul></li><li>如果选择的是GET请求，表示不会向服务器发送任何的数据，给send方法传递一个null即可</li><li>当向send方法提供参数时，要确保open方法中指定的method参数一定是POST，如果没有数据作为请求体的一部分发送，则使用 null</li></ul></blockquote><hr><h3 id="2-3-onreadystatechange"><a href="#2-3-onreadystatechange" class="headerlink" title="2.3 onreadystatechange"></a>2.3 onreadystatechange</h3><blockquote><ul><li>该事件处理函数由服务器触发，并不是用户</li><li>在Ajax执行过程中，服务器会通知客户端的通信状态。这依靠更新XMLHttpRequest对象的readState来实现。改变readState属性是服务器对客户端连接操作的一种方式。 每次readyState属性的改变都会触发readystatechange 事件</li></ul></blockquote><hr><h3 id="发送GET请求"><a href="#发送GET请求" class="headerlink" title="发送GET请求"></a>发送GET请求</h3><blockquote><p><img src="/2022/03/17/68-Ajax/image-20220317180932602.png" loading="lazy"></p></blockquote><h3 id="发送POST请求"><a href="#发送POST请求" class="headerlink" title="发送POST请求"></a>发送POST请求</h3><blockquote><p><img src="/2022/03/17/68-Ajax/image-20220317180955669.png" loading="lazy"></p><p><strong>setRequestHeader(header,value)</strong></p><ul><li>当浏览器向服务器发送请求时，它会伴随这个请求发送一组头部信息。这些头部信息是一系列描述请求的元数据（Metadata）。 头部信息用来声明一个请求是GET请求还是POST请求 </li><li>Ajax请求中，发送头部信息的工作可以交给setRequestHeader这个方法去完成 </li><li>参数header是请求头的名称；参数value是请求头对应的值 </li><li><font color="red">如果用POST请求向服务器发送数据，需要将”Content-Type”的请求头设置为<code>&quot;application/x-www-form-urlencoded&quot;</code></font>，它会告知服务器正在发送数据，并且数据已经符合URL编码了</li><li>该方法必须在open方法之后才能调用</li></ul></blockquote><h2 id="3-接收响应"><a href="#3-接收响应" class="headerlink" title="3.接收响应"></a>3.接收响应</h2><p><strong>用XMLHttpRequest的方法可以向服务器发送请求，在Ajax处理过程中，XMLHttpRequest的如下一些属性可以被服务器更改</strong></p><ul><li>readyState </li><li>status </li><li>responseText </li><li>responseXML</li></ul><h3 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a>readyState</h3><blockquote><ul><li>readyState属性表示Ajax请求的当前状态，它的值用数字表示<ul><li>0-代表未初始化，表示还没有调用open方法</li><li>1-代表正在加载，表示open已经调用，但是send方法还没有调用</li><li>2-代表已经加载完毕，表示send已经被调用，请求已经开始</li><li>3-代表交互中，表示服务器正在发送响应</li><li>4-代表完成，表示服务器响应发送完毕</li></ul></li><li>每一次readState值的改变，都会触发readystatechange事件， 如果把onreadystatechange事件处理函数赋给一个函数，那么每次readyState值得改变都会引发该函数体的执行</li><li>readyState值的变化会因浏览器的不同而有所差异。但是，当请求结束的时候，每个浏览器都会把readyState的值统一设为4</li></ul></blockquote><h3 id="status"><a href="#status" class="headerlink" title="status"></a>status</h3><blockquote><ul><li>服务器发送的每一个响应页都带有头部信息。三位数的状态码是服务器发送的响应中最重要的头部信息，并且属于超文本传输协议中的一部分</li><li>常用状态码及其含义<ul><li>404-没有找到资源（not found）</li><li>403-禁止访问（forbidden）</li><li>500-内部服务器出错（internal service error）</li><li>200-一切正常（ok）</li><li>304-没有被修改（not modified）</li></ul></li><li>在XMLHttpRequest对象中，服务器发送的状态码都保存在status属性里。通过把这个值和200或者304作比较，可以确保服务器是否已经发送了一个成功的响应</li></ul></blockquote><h3 id="responseText"><a href="#responseText" class="headerlink" title="responseText"></a>responseText</h3><blockquote><ul><li>XMLHttpRequest的responseText属性包含了从服务器发送的数据。它是一个HTML、XML或者普通文本，这取决于服务器发送的内容</li><li>当readyState属性值变成4时，responseText属性才可用，表明Ajax请求已经结束</li></ul></blockquote><h3 id="responseXML"><a href="#responseXML" class="headerlink" title="responseXML"></a>responseXML</h3><blockquote><ul><li>如果服务器返回的是XML，那么数据将存储在responseXML属性中</li><li>只有服务器发送了带有正确头部信息的数据时，resonseXML属性才是可用的。MIME类型必须为text/html</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>67-jQuery的事件和动画</title>
      <link href="/2022/03/16/67-jQuery%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%8A%A8%E7%94%BB/"/>
      <url>/2022/03/16/67-jQuery%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="一、jQuery的事件"><a href="#一、jQuery的事件" class="headerlink" title="一、jQuery的事件"></a>一、jQuery的事件</h1><h2 id="加载DOM"><a href="#加载DOM" class="headerlink" title="加载DOM"></a>加载DOM</h2><p><strong>在页面加载完毕后，浏览器会通过JavaScript为DOM元素添加事件。在常规的JavaScript代码中，通常使用 window.onload方法，在jQuery中使用 $(document).ready() 方法</strong></p><table><thead><tr><th align="center">方法</th><th align="center">window.onload</th><th align="center">$(document).ready()</th></tr></thead><tbody><tr><td align="center">执行时机</td><td align="center">必须等待网页中的所有内容 （包括图片）加载完毕后才 能执行</td><td align="center">网页中的所有DOM结构绘制完毕后就执行，可能DOM元素关联的东西并没有加载完毕</td></tr><tr><td align="center">编写数量</td><td align="center">不能同时编写多个</td><td align="center">能同时编写多个</td></tr><tr><td align="center">简化写法</td><td align="center">无</td><td align="center">$()</td></tr></tbody></table><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><ul><li>bind()<ul><li>对匹配的元素进行特定的事件绑定</li></ul></li><li>is()<ul><li>判断某一个jQuery对象是否符合指定的jQuery选择器</li></ul></li></ul><p><img src="/2022/03/16/67-jQuery%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%8A%A8%E7%94%BB/image-20220316123034049.png" loading="lazy"></p><h2 id="事件合成"><a href="#事件合成" class="headerlink" title="事件合成"></a>事件合成</h2><ul><li>hover()<ul><li>模拟光标悬停事件</li><li>当光标移动到元素上时，会触发指定的第一个函数，当光标移出这个元素时，会触发指定的第二个函数</li></ul></li><li>toggle()<ul><li>模拟鼠标连续单击事件</li><li>第一次单击元素，触发指定的第一个函数，当再一次单击同一个元素时，则触发指定的第二个函数，如果有更多个函数，则依次触发，直到最后一个</li><li>toggle()方法的另一个作用是切换元素的可见状态</li></ul></li></ul><p><img src="/2022/03/16/67-jQuery%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%8A%A8%E7%94%BB/image-20220316123159008.png" loading="lazy"></p><h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><ul><li>事件会按照DOM层次结构像水泡一样不断向上直至顶端</li><li>解决: <font color="red">在事件处理函数中返回false，会对事件停止冒泡， 还可以停止元素的默认行为</font></li></ul><p><img src="/2022/03/16/67-jQuery%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%8A%A8%E7%94%BB/image-20220316123237232.png" loading="lazy"></p><h2 id="事件对象的属性"><a href="#事件对象的属性" class="headerlink" title="事件对象的属性"></a>事件对象的属性</h2><ul><li>事件对象<ul><li>当触发事件时，事件对象就被创建了</li><li>在程序中使用事件只需要为函数添加一个参数，该事件对象只有事件处理函数才能访问到</li><li>事件处理函数执行完毕后，事件对象就被销毁了</li></ul></li><li>事件对象的属性<ul><li>pageX：获取到光标相对于页面的x坐标</li><li>pageY：获取到光标相对于页面的y坐标</li></ul></li></ul><p><img src="/2022/03/16/67-jQuery%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%8A%A8%E7%94%BB/image-20220316123326676.png" loading="lazy"></p><h2 id="事件的移除"><a href="#事件的移除" class="headerlink" title="事件的移除"></a>事件的移除</h2><ul><li>unbind()<ul><li>选择器.unbind(事件) <ul><li>移除指定选择器元素上面指定的事件</li></ul></li><li>选择器.unbind() <ul><li>移除指定选择器元素上面所有的事件</li></ul></li></ul></li><li>one()<ul><li>该方法可以为元素绑定处理函数</li><li>第一次绑定的指定事件不会执行，类似于移除了该事件，后续再次触发指定事件时会继续执行</li></ul></li></ul><p><img src="/2022/03/16/67-jQuery%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%8A%A8%E7%94%BB/image-20220316123428563.png" loading="lazy"></p><h1 id="二、jQuery的动画"><a href="#二、jQuery的动画" class="headerlink" title="二、jQuery的动画"></a>二、jQuery的动画</h1><h2 id="显示和隐藏"><a href="#显示和隐藏" class="headerlink" title="显示和隐藏"></a>显示和隐藏</h2><ul><li>hide()<ul><li>在HTML文档中，为一个元素调用hide()方法会将该元素的display样式改为none，代码功能同css(“display”,  “none”);</li></ul></li><li>show()<ul><li>将元素的display样式改为先前的显示状态</li></ul></li><li>以上两个方法在不带任何参数的情况下，作用是立即隐藏或显示匹配的元素，不会有任何动画。可以通过制定速度参数使元素动起来</li><li>以上两个方法会同时减少（增大）内容的高度、宽度和透明度</li></ul><p><img src="/2022/03/16/67-jQuery%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%8A%A8%E7%94%BB/image-20220316123934593.png" loading="lazy"></p><h2 id="淡进淡出"><a href="#淡进淡出" class="headerlink" title="淡进淡出"></a>淡进淡出</h2><ul><li>fadeIn()<ul><li>在指定的一段时间内增加元素的透明度</li></ul></li><li>fadeOut()<ul><li>在指定的一段时间内降低元素的透明度</li></ul></li></ul><p><img src="/2022/03/16/67-jQuery%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%8A%A8%E7%94%BB/image-20220316124009841.png" loading="lazy"></p><h2 id="上下进出"><a href="#上下进出" class="headerlink" title="上下进出"></a>上下进出</h2><ul><li>slideDown()、slideUp()</li><li>只会改变元素的高度<ul><li>如果一个元素的display属性为 none，当调用slideDown()方法时，这个元素将由上至下延伸显示。 slideUp()方法正好相反，元素由下至上缩短隐藏</li></ul></li></ul><p><img src="/2022/03/16/67-jQuery%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%8A%A8%E7%94%BB/image-20220316124058480.png" loading="lazy"></p><h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><ul><li>toggle()<ul><li>切换元素的可见状态</li><li>如果元素时可见的，则切换为隐藏；如果元素时隐藏的， 则切换为可见的</li></ul></li><li>slideToggle()<ul><li>通过高度变化来切换匹配元素的可见性</li></ul></li><li>fadeToggle()<ul><li>通过透明度变化来切换匹配元素的可见性</li></ul></li><li>fadeTo(speed,doubleValue)<ul><li>把透明度以渐进的方式调整到指定的值（0–1之间）</li></ul></li></ul><p><img src="/2022/03/16/67-jQuery%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%8A%A8%E7%94%BB/image-20220316124152269.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>66-jQuery的DOM操作</title>
      <link href="/2022/03/16/66-jQuery%E7%9A%84DOM%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/03/16/66-jQuery%E7%9A%84DOM%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="一、节点的查找"><a href="#一、节点的查找" class="headerlink" title="一、节点的查找"></a>一、节点的查找</h1><h2 id="节点的分类"><a href="#节点的分类" class="headerlink" title="节点的分类"></a>节点的分类</h2><ul><li>元素节点<ul><li>9大选择器都是用来查找元素节点的</li></ul></li><li>属性节点<ul><li>找到元素节点之后，调用<code>attr(attrName)</code>方法获得属性节点的值，调用<code>attr(attrName,attrValue)</code>方法设置属性节点的值</li><li>如果找到的元素属性是value属性，可以调用<code>val()</code>方法获得该属性的值，也可以调用<code>val(attrValue)</code>方法设置该属性的值</li></ul></li><li>文本节点<ul><li>找到元素节点之后，调用<code>text()</code>方法获得文本节点的值，调用 <code>text(content)</code>方法设置文本节点的值</li></ul></li></ul><p><img src="/2022/03/16/66-jQuery%E7%9A%84DOM%E6%93%8D%E4%BD%9C/image-20220316124457920.png" loading="lazy"></p><h2 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h2><ul><li><strong>使用jQuery的工厂函数$()：<font color="red">$(html)</font>;会根据传入的html标签字符串创建一个DOM对象，并把这个DOM对象包装成一个jQuery对象返回</strong></li><li><strong>注意</strong><ul><li>动态创建的新元素节点不会被自动添加到文档中，而是需要使用其他方法将其插入到文档中</li><li>当创建单个元素时，需注意闭合标签和使用标准的 XHTML格式。例如创建一个<code>&lt;p&gt;</code>元素，可以使用<code>$(&quot;&lt;p/&gt;&quot;)</code>或<code>$(&quot;&lt;p&gt;&lt;/p&gt;&quot;)</code>，但不能使用<code>$(&quot;&lt;p&gt;&quot;)</code></li></ul></li><li><strong>创建文本节点就是在创建元素节点时直接把文本内容写出来，创建属性节点也是在创建元素节点时一起创建</strong></li></ul><h2 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h2><ul><li><p>单独地动态创建HTML元素并没有实际用处，还需要将新创建的节点插入到文档中，即成为文档中某个节点的子节点</p></li><li><h3 id="常用的内部插入节点的方法"><a href="#常用的内部插入节点的方法" class="headerlink" title="常用的内部插入节点的方法"></a>常用的内部插入节点的方法</h3><ul><li>append() <ul><li>向每个匹配的元素的<font color="red">内部的结尾处</font>追加内容</li></ul></li><li>appendTo() <ul><li>将每个匹配的元素追加到指定的元素中的<font color="red">内部的结尾处</font></li></ul></li><li>prepend() <ul><li>向每个匹配的元素的<font color="red">内部的开始处</font>追加内容</li></ul></li><li>prependTo() <ul><li>将每个匹配的元素追加到指定的元素中的<font color="red">内部的开始处</font></li></ul></li></ul></li><li><p>内部插入</p><p><img src="/2022/03/16/66-jQuery%E7%9A%84DOM%E6%93%8D%E4%BD%9C/image-20220316125226947.png" loading="lazy"></p></li></ul><ul><li><h3 id="常用的外部插入节点的方法"><a href="#常用的外部插入节点的方法" class="headerlink" title="常用的外部插入节点的方法"></a>常用的外部插入节点的方法</h3><ul><li>after() <ul><li>向每个匹配的元素的<font color="red">后面</font>插入内容</li></ul></li><li>insertAfter() <ul><li>将每个匹配的元素插入到指定元素的<font color="red">后面</font></li></ul></li><li>before() <ul><li>向每个匹配的元素的<font color="red">前面</font>插入内容</li></ul></li><li>insertBefore() <ul><li>将每个匹配的元素插入到指定元素的<font color="red">前面</font></li></ul></li></ul></li><li><p>外部插入</p><p><img src="/2022/03/16/66-jQuery%E7%9A%84DOM%E6%93%8D%E4%BD%9C/image-20220316125410388.png" loading="lazy"></p></li></ul><h2 id="删除清空节点"><a href="#删除清空节点" class="headerlink" title="删除清空节点"></a>删除清空节点</h2><p><strong>删除节点的方法</strong></p><ul><li>remove() <ul><li>从DOM中删除所有匹配的元素。传入的参数用于根据jQuery表达式来筛选元素，当某个节点用remove()方法删除后，该节点所包含的所有后代节点将被同时删除。这个方法的返回值是一个指向已被删除的节点的引用</li></ul></li></ul><p><strong>清空节点的方法</strong></p><ul><li>empty() <ul><li>清空元素中的所有后代节点（不包含属性节点） </li><li>一般用在容器标签上</li></ul></li></ul><p><img src="/2022/03/16/66-jQuery%E7%9A%84DOM%E6%93%8D%E4%BD%9C/image-20220316125523004.png" loading="lazy"></p><h2 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h2><p><strong>克隆节点的方法</strong></p><ul><li>clone() <ul><li>克隆匹配的DOM元素，返回值为克隆后的副本，但此时复制的新节点不具有任何行为</li></ul></li><li>clone(true) <ul><li>复制元素的同时也复制元素中的的事件</li></ul></li><li>注意 <ul><li><font color="red">复制节点的时候，如果被复制的节点有id属性，需要修改复制后的元素的id属性值</font></li></ul></li></ul><p><img src="/2022/03/16/66-jQuery%E7%9A%84DOM%E6%93%8D%E4%BD%9C/image-20220316125646746.png" loading="lazy"></p><h2 id="替换节点"><a href="#替换节点" class="headerlink" title="替换节点"></a>替换节点</h2><p><strong>替换节点的方法</strong></p><ul><li>replaceWith() <ul><li>将所有匹配的元素都替换为指定的HTML或DOM元素 </li><li>如果指定的HTML或DOM元素本来就存在，则是移动效果，原来的元素消失</li></ul></li><li>replaceAll() <ul><li>用匹配的元素替换掉所有的匹配到的元素 </li><li>如果指定的HTML或DOM元素本来就存在，则是移动效果，原来的元素消失</li></ul></li><li>注意 <ul><li>若在替换之前，已经在元素上绑定了事件，替换后原先绑定的事件会与原先的元素一起消失</li></ul></li></ul><p><img src="/2022/03/16/66-jQuery%E7%9A%84DOM%E6%93%8D%E4%BD%9C/image-20220316125809361.png" loading="lazy"></p><h2 id="包裹节点"><a href="#包裹节点" class="headerlink" title="包裹节点"></a>包裹节点</h2><p><strong>包裹节点的方法</strong></p><ul><li>wrap() <ul><li>将指定节点用其他标记包裹起来，即每一个匹配的节点都会被一个其他标记所包裹</li></ul></li><li>wrapAll() <ul><li>将所有匹配的元素用一个元素来包裹，即所有匹配的节点都会一起被一个其他的标记所包裹</li></ul></li><li>wrapInner() <ul><li>将每一个匹配的元素的子内容（包括文本节点）用其他结构化标记包裹起来</li></ul></li></ul><p><img src="/2022/03/16/66-jQuery%E7%9A%84DOM%E6%93%8D%E4%BD%9C/image-20220316125902845.png" loading="lazy"></p><h1 id="二、节点的属性"><a href="#二、节点的属性" class="headerlink" title="二、节点的属性"></a>二、节点的属性</h1><ul><li>attr()<ul><li>如果只有一个参数，则表示获取该属性的值</li><li>如果有两个参数，则表示设置该属性的值</li></ul></li><li>removeAttr()<ul><li>删除指定元素的指定属性</li></ul></li><li>jQuery中有很多方法都是一个函数实现获取和设置<ul><li>attr()、html()、text()、val()、height()、width()、css()  等</li></ul></li></ul><p><img src="/2022/03/16/66-jQuery%E7%9A%84DOM%E6%93%8D%E4%BD%9C/image-20220316130002425.png" loading="lazy"></p><h1 id="三、节点的样式"><a href="#三、节点的样式" class="headerlink" title="三、节点的样式"></a>三、节点的样式</h1><ul><li>class<ul><li>class是元素的一个属性，所以获取class和设置class都可以使用attr()方法来完成</li></ul></li><li>样式相关的其他方法<ul><li>addClass() <ul><li>追加样式</li></ul></li><li>removeClass() <ul><li>移除样式，从匹配的元素中删除全部或指定的class</li></ul></li><li>toggleClass() <ul><li>切换样式，控制样式上的重复切换。如果类名存在则删除它，如果类名不存在则添加它</li></ul></li><li>hasClass() <ul><li>判断是否含有某个样式，判断元素中是否含有某个class，如果有返回true，没有则返回false</li></ul></li></ul></li></ul><p><img src="/2022/03/16/66-jQuery%E7%9A%84DOM%E6%93%8D%E4%BD%9C/image-20220316130201681.png" loading="lazy"></p><h1 id="四、节点的HTML代码、文本、值"><a href="#四、节点的HTML代码、文本、值" class="headerlink" title="四、节点的HTML代码、文本、值"></a>四、节点的HTML代码、文本、值</h1><ul><li>html()<ul><li>读取和设置某个元素中的HTML内容，可以用于XHTML，但不能用于XML文档</li></ul></li><li>text()<ul><li>读取和设置某个元素中的文本内容，可以用于XHTML也可以用于XML文档</li></ul></li><li>val()<ul><li>读取和设置某个元素中的值，类似JavaScript中的value 属性。对于文本框、下拉列表框、单选框该方法可返回元素的值（多选框只能返回第一个值）。如果为多选下拉列表框，则返回一个包含所有选择值的数组</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>65-jQuery</title>
      <link href="/2022/03/14/65-jQuery/"/>
      <url>/2022/03/14/65-jQuery/</url>
      
        <content type="html"><![CDATA[<h1 id="一、jQuery简介"><a href="#一、jQuery简介" class="headerlink" title="一、jQuery简介"></a>一、jQuery简介</h1><ul><li><p>JavaScript库</p><ul><li>为了简化JavaScript的开发，一些JavsScript的库就诞生了</li><li>JavaScript库封装了很多预定义的对象和实用函数，能帮助使用者建立有高难度交互的Web2.0特性的富客户端页面，并且兼容各大浏览器</li></ul></li><li><p>流行的JavaScript库</p><ul><li>jQuery、EXT_JS、DWR、Prototype、Dojo、 MooTools、YUI</li></ul></li><li><p>jQuery是继Prototype之后又一个优秀的JavaScript库，是一个由John Resig创建于2006年1月的开源项目</p></li><li><p>现在的jQuery团队主要包括核心库、UI和插件等</p></li><li><p>jQuery凭借着简洁的语法和跨平台的兼容性，极大地简化了JavaScript开发人员查找元素、操作DOM、处理事件、 执行动画和开发Ajax的操作</p></li></ul><h1 id="二、jQuery特点"><a href="#二、jQuery特点" class="headerlink" title="二、jQuery特点"></a>二、jQuery特点</h1><ul><li>jQuery的宗旨<ul><li>WRITE LESS，DO MORE</li><li>写更少的代码，做更多的事情</li></ul></li><li>特点<ul><li>轻量级<ul><li>jQuery非常轻巧，采用Dean Edwards编写的Packer （<a href="http://dean.edwards.name/packer/%EF%BC%89%E5%8E%8B%E7%BC%A9%E5%90%8E%EF%BC%8C%E5%A4%A7%E5%B0%8F%E4%B8%8D%E5%88%B0">http://dean.edwards.name/packer/）压缩后，大小不到</a> 30KB。如果使用Min版并且在服务器端启用Gzip压缩后，大小只有18KB</li></ul></li><li>强大的选择器<ul><li>jQuery允许开发者使用从CSS1到CSS3几乎所有的选择器，以及jQuery独创的高级而复杂的选择器。另外还可以加入插件使其支持XPath选择器，甚至开发者可以编写属于自己的选择器</li></ul></li><li>出色的DOM操作的封装<ul><li>jQuery封装了大量常用的DOM操作，使开发者在编写DOM操作相关程序的时候能够得心应手</li></ul></li><li>可靠的事件处理机制<ul><li>吸收了javaScript专家Dean Edwards编写的事件处理函数的精华， 使得jQuery在处理事件绑定的时候非常可靠。在预留退路、循序渐进以及非入侵式变成思想方面，jQuery做得非常不错</li></ul></li><li>完善的Ajax<ul><li>使开发者处理Ajax的时候能够专心处理业务逻辑而无需关心复杂的浏览器兼容性和XMLHttpRequest对象的创建和使用的问题</li></ul></li><li>不污染顶级变量<ul><li>jQuery只建立一个名为jQuery对象，其所有的函数方法都在这个对象之下</li></ul></li><li>出色的浏览器兼容性<ul><li>jQuery修复了一些浏览器之间的差异，使开发者不必在开展项目前建立浏览器兼容库</li></ul></li><li>链式操作方式<ul><li>jQuery中最有特色的莫过于它的链式操作方式 —— 即对发生在同一个jQuery对象上的一组动作，可以直接连写而无需重复获取对象</li></ul></li><li>隐式迭代</li><li>行为层与结构层的分离<ul><li>开发者可以使用jQuery选择器选中元素，然后直接给元素添加事件。这种将行为层与结构层完全分离的思想，可以使jQuery开发人员和HTML或其他页面开发人员各司其职，摆脱开发冲突或个人单干的开发模式</li></ul></li><li>丰富的插件支持，后期扩展非常方便<ul><li>jQuery的易扩展性，吸引了来自全球的开发者编写jQuery的扩展插件。目前已经有超过几百种的官方插件支持，而且还不断有新插件面世</li></ul></li><li>完善的文档<ul><li>jQuery的文档非常丰富</li></ul></li></ul></li></ul><h1 id="三、DOM和jQuery对象之间的互转"><a href="#三、DOM和jQuery对象之间的互转" class="headerlink" title="三、DOM和jQuery对象之间的互转"></a>三、DOM和jQuery对象之间的互转</h1><h2 id="1-DOM对象"><a href="#1-DOM对象" class="headerlink" title="1.DOM对象"></a>1.DOM对象</h2><ul><li>DOM解析HTML页面，将页面元素解释为元素节点、属性节点和文本节点</li><li>而通过DOM解析HTML页面元素，所得到的DOM元素就是DOM对象</li><li>DOM对象可以使用JavaScript中的方法</li></ul><h2 id="2-jQuery对象"><a href="#2-jQuery对象" class="headerlink" title="2.jQuery对象"></a>2.jQuery对象</h2><ul><li>jQuery对象就是通过jQuery包装DOM对象后产生的对象</li><li>jQuery对象是jQuery所独有的</li><li>虽然jQuery对象是包装DOM对象后产生的，但是jQuery无法使用DOM对象的任何方法，同理DOM对象也不能使用jQuery里的方法，乱使用会报错</li><li><font color="red">规定：如果获取的是jQuery对象，那么要在变量前面加上$</font></li></ul><h2 id="3-DOM对象转成jQuery对象"><a href="#3-DOM对象转成jQuery对象" class="headerlink" title="3.DOM对象转成jQuery对象"></a>3.DOM对象转成jQuery对象</h2><ul><li><p>对于已经是一个DOM对象，只需要用$()把DOM对象包装起来，就可以获得一个jQuery对象</p></li><li><p>原始javaScript的方式</p><p><img src="/2022/03/14/65-jQuery/image-20220315151852135.png" loading="lazy"></p></li><li><p>jQuery的方式</p><p><img src="/2022/03/14/65-jQuery/image-20220315151935020.png" loading="lazy"></p></li></ul><h2 id="4-jQuery对象转成DOM对象"><a href="#4-jQuery对象转成DOM对象" class="headerlink" title="4.jQuery对象转成DOM对象"></a>4.jQuery对象转成DOM对象</h2><p><strong>两种转换方式可以将一个jQuery对象转换成DOM对象</strong></p><ul><li><code>[index]</code><ul><li><font color="red">jQuery对象是一个数组对象</font>，可以通过<code>[index]</code>的方法得到相应的DOM对象</li></ul></li><li><code>.get(index)</code><ul><li>jQuery本身直接提供get(index)方法得到相应的DOM对象</li></ul></li></ul><p><strong>两种转换方式可以将一个jQuery对象转换成DOM对象</strong></p><ul><li><img src="/2022/03/14/65-jQuery/image-20220315182659175.png" loading="lazy"></li></ul><h1 id="四、jQuery的选择器"><a href="#四、jQuery的选择器" class="headerlink" title="四、jQuery的选择器"></a>四、jQuery的选择器</h1><p><strong>什么是jQuery选择器</strong></p><ul><li>jQuery中的选择器完全集成了CSS的风格</li><li>利用jQuery选择器可以非常便捷和快速地找出特定的 DOM元素</li><li>学会使用选择器是学习jQuery的基础</li></ul><p><strong>jQuery选择器的优势</strong></p><ul><li>语法简洁<ul><li>$()函数在很多JavaScript类库中都被作为一个选择器函数来使用，在jQuery中也不例外</li></ul></li><li>支持CSS1到CSS3选择器，jQuery选择器支持CSS1、CSS2的全部和CSS3的部分选择器，同时拥有少量独有的选择器<ul><li>使用jQuery选择器时无需考虑浏览器是否支持这些选择器</li></ul></li><li>完善的处理机制</li></ul><hr><h2 id="1-基本选择器"><a href="#1-基本选择器" class="headerlink" title="1.基本选择器"></a>1.基本选择器</h2><p><strong>基本选择器是jQuery中最常用的选择器，也是最简单的选择器，它通过元素<font color="red">id、class、标签名</font>来查找DOM元素（在网页中id只能使用一次，class允许使用多次）</strong></p><p><strong>分类</strong></p><blockquote><ul><li>id选择器<ul><li>语法：$(“#div”)</li><li>返回值：单个元素的组成的集合</li><li>含义：选择网页中id的值为div的元素组成的集合</li></ul></li><li>class选择器<ul><li>语法：$(“.div”)</li><li>返回值：集合</li><li>含义：选择网页中class的值为div的元素组成的集合</li></ul></li><li>Element（元素）选择器<ul><li>语法：$(“div”) </li><li>返回值：集合 </li><li>含义：选择网页中div的元素组成的集合</li></ul></li><li>*选择器<ul><li>语法：$(“*”) </li><li>返回值：集合 </li><li>含义：选择网页上下文中所匹配的元素组成的集合</li></ul></li><li>selector1,selector2 … selectorN选择器（组合选择器）<ul><li>语法：$(“div,span,p.myClass”) </li><li>返回值：集合 </li><li>含义：将每一个选择器匹配到的元素合并后一起返回，可以指定任意多个选择器，并将匹配到的元素合并到一个结果内</li></ul></li></ul></blockquote><h2 id="2-层次选择器"><a href="#2-层次选择器" class="headerlink" title="2.层次选择器"></a>2.层次选择器</h2><p><strong>如果想通过DOM元素之间的层次关系来获取特定元素,  例如<font color="red">后代元素、子元素、相邻元素、兄弟元素</font>等, 则需要 使用层次选择器</strong></p><p><strong>分类</strong></p><blockquote><ul><li>ancestor descendant<ul><li>语法：$(“ancestor descendant”) </li><li>返回值：集合 </li><li>含义：在给定的ancestor元素下所有descendant（后代）元素</li></ul></li><li>parent &gt; child<ul><li>语法：$(“parent &gt; child”) </li><li>返回值：集合</li><li>含义：在给定的父元素下匹配所有子元素（<font color="red">不包括孙子元素</font>）</li></ul></li><li>prev + next<ul><li>语法：$(“prev+next”) </li><li>返回值：集合</li><li>含义：匹配所有紧接在prev元素后的next元素（<font color="red">匹配同辈元素</font>）</li><li>注意：<font color="red">该选择器只能选择紧贴着prev元素后面的next元素，如果next元素是在prev元素的后面，但是不是紧贴着的，该选择器无效，需要借助方法和过滤选择器解决该问题</font></li></ul></li><li>prev ~ siblings<ul><li>语法：$(“prev ~ siblings”) </li><li>返回值：集合</li><li>含义：匹配prev元素后面的所有siblings元素。匹配之后的元素不包含该元素在内，并且siblings匹配的是和prev同辈的元素，其后辈元素不被匹配，该选择器只能选择”#prev”元素后面的同辈元素，<font color="green">而jQuery中的<code>siblings()方法</code>与前后位置无关，只要是同辈节点就可以选取</font>.</li></ul></li></ul></blockquote><h2 id="3-过滤选择器"><a href="#3-过滤选择器" class="headerlink" title="3.过滤选择器"></a>3.过滤选择器</h2><p><strong>过滤选择器主要是通过特定的过滤规则来筛选出所需的DOM元素，该选择器都以”:”开头</strong></p><p><strong>按照不同的过滤规则，过滤选择器可以分为如下6种</strong></p><blockquote><ul><li>基础过滤选择器</li><li>内容过滤选择器</li><li>可见性过滤选择器</li><li>属性过滤选择器</li><li>子元素过滤选择器</li><li>表单对象属性过滤选择器</li></ul></blockquote><h3 id="基础过滤选择器"><a href="#基础过滤选择器" class="headerlink" title="基础过滤选择器"></a>基础过滤选择器</h3><blockquote><ul><li>:first<ul><li>语法：$(“li:first”)</li><li>返回值：获取第一个元素</li><li>含义：获取匹配的第一个元素</li></ul></li><li>：last<ul><li>语法：$(“li:last”) </li><li>返回值：获取最后个元素</li><li>含义：获取匹配的最后个元素</li></ul></li><li>:not(selector) <ul><li>语法：$(“input:not(:checked)”)</li><li>返回值：集合</li><li>含义：去除所有与给定选择器匹配的元素</li></ul></li><li>:even <ul><li>语法：$(“tr:even”) </li><li>返回值：集合</li><li>含义：匹配所有索引值为偶数的元素，从0开始计数</li></ul></li><li>:odd<ul><li>语法：$(“tr:odd”) </li><li>返回值：集合</li><li>含义：匹配所有索引值为奇数的元素，从0开始计数</li></ul></li><li>:eq(index) <ul><li>语法：$(“tr:eq(1)”)</li><li>返回值：集合</li><li>含义：匹配一个给定索引值的元素，从0开始计数</li></ul></li><li>:gt(index)<ul><li>语法：$(“tr:gt(1)”) </li><li>返回值：集合</li><li>含义：匹配所有大于给定索引值的元素</li></ul></li><li>:lt(index)<ul><li>语法：$(“tr:lt(2)”) </li><li>返回值：集合 </li><li>含义：匹配所有小于给定索引值的元素</li></ul></li><li>:header<ul><li>语法：$(“:header”) </li><li>返回值：集合 </li><li>含义：匹配如 h1, h2, h3之类的标题元素</li></ul></li><li>:animated<ul><li>语法：$(“:animated”) </li><li>返回值：集合 </li><li>含义：匹配所有正在执行动画效果的元素</li></ul></li><li>:focus<ul><li>语法：$(“:focus”) </li><li>返回值：jQuery对象 </li><li>含义：匹配当前获取焦点的元素</li></ul></li></ul></blockquote><h3 id="内容过滤选择器"><a href="#内容过滤选择器" class="headerlink" title="内容过滤选择器"></a>内容过滤选择器</h3><p><strong>内容过滤选择器的过滤规则主要体现在它所包含的子元素和文本内容上</strong></p><blockquote><ul><li>:contains(text)<ul><li>语法：$(“div:contains(‘John’)”) </li><li>返回值：集合 </li><li>含义：匹配包含给定文本的元素</li></ul></li><li>:empty <ul><li>语法：$(“td:empty”) </li><li>返回值：集合 </li><li>含义：匹配所有不包含子元素或者文本的空元素</li></ul></li><li>:has(selector) <ul><li>语法：$(“div:has(p)”) </li><li>返回值：集合 </li><li>含义：匹配含有选择器所匹配的元素的元素</li></ul></li><li>:parent <ul><li>语法：$(“td:parent”) </li><li>返回值：集合 </li><li>含义：匹配含有子元素或者文本的元素</li></ul></li></ul></blockquote><h3 id="可见度过滤选择器"><a href="#可见度过滤选择器" class="headerlink" title="可见度过滤选择器"></a>可见度过滤选择器</h3><p><strong>可见度过滤选择器是根据元素的可见和不可见状态来选择相应的元素</strong></p><blockquote><ul><li>:hidden<ul><li>语法：$(“tr:hidden”) </li><li>返回值：集合</li><li>含义：匹配所有不可见元素，或者type为hidden的元素</li></ul></li><li>:visible<ul><li>语法：$(“tr:visible”) </li><li>返回值：集合 </li><li>含义：匹配所有的可见元素</li></ul></li></ul></blockquote><h3 id="属性过滤选择器"><a href="#属性过滤选择器" class="headerlink" title="属性过滤选择器"></a>属性过滤选择器</h3><p><strong>属性过滤选择器的过滤规则是通过元素的属性来获取相应的元素</strong></p><blockquote><ul><li>[attribute]<ul><li>语法：$(“div[id]”) </li><li>返回值：集合 </li><li>含义：匹配包含给定属性的元素</li></ul></li><li>[attribute=value]<ul><li>语法：$(“input[name=’newsletter’]”).attr(“checked”, true); </li><li>返回值：集合 </li><li>含义：匹配给定的属性是某个特定值的元素</li></ul></li><li>[attribute!=value]<ul><li>语法：$(“input[name!=’newsletter’]”).attr(“checked”, true); </li><li>返回值：集合 </li><li>含义：<ul><li>匹配所有不含有指定的属性，或者属性不等于特定值的元素</li><li>此选择器等价于:not([attr=value])</li><li>要匹配含有特定属性但不等于特定值的元素，请使用 [attr]:not([attr=value])</li></ul></li></ul></li><li>[attribute^=value]<ul><li>语法：$(“input[name^=’news’]”) </li><li>返回值：集合 </li><li>含义：匹配给定的属性是以某些值开始的元素</li></ul></li><li>[attribute$=value]<ul><li>语法：$(“input[name$=’letter’]”) </li><li>返回值：集合 </li><li>含义：匹配给定的属性是以某些值结尾的元素</li></ul></li><li>[attribute*=value]<ul><li>语法：$(“input[name*=’man’]”) </li><li>返回值：集合 </li><li>含义：匹配给定的属性是以包含某些值的元素</li></ul></li><li>[selector1][selector2][selectorN]<ul><li>语法：$(“input[id][name$=’man’]”) </li><li>返回值：集合 </li><li>含义：复合属性选择器，需要同时满足多个条件时使用</li></ul></li></ul></blockquote><h3 id="子元素过滤选择器"><a href="#子元素过滤选择器" class="headerlink" title="子元素过滤选择器"></a>子元素过滤选择器</h3><blockquote><ul><li>:nth-child(index) <ul><li>语法：$(“div :nth-child(2)”) </li><li>返回值：集合 </li><li>含义：<ul><li>匹配其父元素下的第n个子元素<font color="red">（n从1开始）</font></li><li>这个选择器和之前的基础过滤器中的eq()有些类似，不同的地方就是前者是从0开始，后者是从1开始的 </li></ul></li></ul></li><li>:nth-child(even) <ul><li>语法：$(“div :nth-child(even)”) </li><li>返回值：集合 </li><li>含义：匹配其父元素下的<font color="red">偶数</font>子元素</li></ul></li><li>:nth-child(odd) <ul><li>语法：$(“div :nth-child(odd)”) </li><li>返回值：集合 </li><li>含义：匹配其父元素下的<font color="red">奇数</font>子元素</li></ul></li><li>:nth-child(3n) <ul><li>语法：$(“div :nth-child(3n)”) </li><li>返回值：集合 </li><li>含义：匹配其父元素下的3的倍数的子元素，n从0开始</li></ul></li><li>:nth-child(3n+1) <ul><li>语法：$(“div :nth-child(3n+1)”) </li><li>返回值：集合 </li><li>含义：匹配其父元素下的3的倍数+1的子元素，n从0开始</li></ul></li><li>:first-child <ul><li>语法：$(“div :first-child”) </li><li>返回值：集合 </li><li>含义：匹配第一个子元素</li></ul></li><li>:last-child <ul><li>语法：$(“div :last-child”) </li><li>返回值：集合 </li><li>含义：匹配最后一个子元素</li></ul></li><li>:only-child <ul><li>语法：$(“div :only-child”) </li><li>返回值：集合 </li><li>含义：如果某个元素是父元素中唯一的子元素，那将会被匹配；如果父元素中含有其他元素，那将不会被匹配</li></ul></li><li>注意<ul><li><font color="red">子元素过滤器之前有一个空格，不能写成</font><font color="blue"> $(“div:last-child”)</font>.</li></ul></li></ul></blockquote><h3 id="表单对象属性过滤选择器"><a href="#表单对象属性过滤选择器" class="headerlink" title="表单对象属性过滤选择器"></a>表单对象属性过滤选择器</h3><p><strong>此选择器主要对所选择的表单元素进行过滤</strong></p><blockquote><ul><li>:enabled <ul><li>语法：$(“input:enabled”) </li><li>返回值：集合 </li><li>含义：匹配所有可用元素</li></ul></li><li>:disabled <ul><li>语法：$(“input:disabled”) </li><li>返回值：集合 </li><li>含义：匹配所有不可用元素</li></ul></li><li>:checked <ul><li>语法：$(“input:checked”) </li><li>返回值：集合 </li><li>含义：匹配所有选中的被选中元素（复选框、单选框等）</li></ul></li><li>:selected <ul><li>语法 ：$(“select option:selected”) </li><li>返回值：集合 </li><li>含义：匹配所有选中的option元素</li></ul></li></ul></blockquote><hr><h2 id="4-表单选择器"><a href="#4-表单选择器" class="headerlink" title="4.表单选择器"></a>4.表单选择器</h2><blockquote><ul><li>:input <ul><li>语法：$(“:input”) </li><li>返回值：集合 </li><li>含义：<font color="green">匹配所有的input、textarea、select和button元素</font></li></ul></li><li>:text <ul><li>语法：$(“:text”) </li><li>返回值：集合 </li><li>含义：匹配所有的单行文本框</li></ul></li><li>:password <ul><li>语法：$(“:password”) </li><li>返回值：集合 </li><li>含义：匹配所有的密码框</li></ul></li><li>:radio <ul><li>语法：$(“:radio”) </li><li>返回值：集合 </li><li>含义：匹配所有的单选按钮</li></ul></li><li>:checkbox <ul><li>语法：$(“:checkbox”) </li><li>返回值：集合 </li><li>含义：匹配所有的复选框</li></ul></li><li>:submit <ul><li>语法：$(“:submit”) </li><li>返回值：集合 </li><li>含义：匹配所有的提交按钮</li></ul></li><li>:image <ul><li>语法：$(“:image”) </li><li>返回值：集合 </li><li>含义：匹配所有的图像域，img不算在内</li></ul></li><li>:reset <ul><li>语法：$(“:reset”) </li><li>返回值：集合 </li><li>含义：匹配所有的重置按钮</li></ul></li><li>:button <ul><li>语法：$(“:button”) </li><li>返回值：集合 </li><li>含义：匹配所有的按钮</li></ul></li><li>:file <ul><li>语法：$(“:file”) </li><li>返回值：集合 </li><li>含义：匹配所有的文件域</li></ul></li><li>:hidden <ul><li>语法：$(“:hidden”) </li><li>返回值：集合 </li><li>含义：匹配所有不可见元素，或者type为hidden的元素</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>64-JSP的EL表达式和JSTL</title>
      <link href="/2022/03/13/64-JSP%E7%9A%84EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8CJSTL/"/>
      <url>/2022/03/13/64-JSP%E7%9A%84EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8CJSTL/</url>
      
        <content type="html"><![CDATA[<h1 id="表达式语言"><a href="#表达式语言" class="headerlink" title="表达式语言"></a>表达式语言</h1><ul><li>表达式语言（Expression Language，简称EL表达式）是一种简化的数据访问方式。使用表达式语言可以方便地访问JSP的隐含对象（内置对象）和javaBean组件，在JSP2.0规范中，建议尽量使用表达式语言可用于简化JSP页面的开发，允许美工设计人员使用表达式语言的语法获取业务逻辑组件传过来的变量值</li><li>格式<ul><li><strong><font color="red">${ expression }</font></strong></li></ul></li></ul><p><strong>EL表达式支持算术运算符和三目运算符</strong></p><ul><li>${1}</li><li>${1.2+2.3}</li><li>${1.2E4+1.4}</li><li>${-4-2}</li><li>${21*2}</li><li>${3/4}、${3 div 4}</li><li>${10%4}、${10 mod 4}</li><li>${(1==2)?3:4}</li></ul><p><strong>EL表达式支持逻辑运算符</strong></p><ul><li>${1&lt;2}、${1 lt 2}</li><li>${1 &gt; (4/2)}、${1 gt (4/2)}</li><li>${4.0 &gt;= 3}、${4.0 ge 3}</li><li>${4 &lt;= 3}、${4 le 3}</li><li>${100.0 == 100}、${100.0 eq 100}</li><li>${(10*10) != 100}、${(10*10) ne 100}</li><li>${‘a’&lt;’b’}、${‘hip’&lt;’hip’}</li><li>${‘4’&gt;3}</li><li>${‘4’&gt;50}</li></ul><h2 id="EL表达式的内置对象"><a href="#EL表达式的内置对象" class="headerlink" title="EL表达式的内置对象"></a>EL表达式的内置对象</h2><ul><li>使用EL表达式，可以直接获取请求参数值，可以获取页面 中javaBean的指定的属性值，获取请求头以及获取page、 request、session、application范围的属性值等，这些 都是EL表达式的内置对象</li></ul><p><strong>EL表达式包含如下11个内置对象</strong></p><ul><li>pageContext<ul><li>代表该页面pageContext对象，与JSP的pageContext内置对象相同</li></ul></li><li>pageScope<ul><li>用于获取page范围的属性值</li></ul></li><li>requestScope<ul><li>用于获取request范围的属性值</li></ul></li><li>sessionScope<ul><li>用于获取session范围的属性值</li></ul></li><li>applicationScope<ul><li>用于获取application范围的属性值</li></ul></li><li>param<ul><li>用于获取请求的参数值</li></ul></li><li>paramValues<ul><li>用于获取请求的参数值，与param的区别在于，该对象用于获取属性值为数组的属性值</li></ul></li><li>header<ul><li>用于获取请求头的属性值</li></ul></li><li>headerValues<ul><li>用于获取请求头的属性值，与header的区别在于，该对象用于属性值为数组的属性值</li></ul></li><li>initParam<ul><li>用于获取请求WEB应用的初始化参数</li></ul></li><li>cookie<ul><li>用于获取指定的cookie值</li></ul></li></ul><h1 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h1><p><strong>JSP提供的自定义标签功能，扩展了JSP对标签的处理能力。 很多的开发人员都定制了自身应用的标签库，用于完成某些功能，然而同一功能由不同的开发人员去实现，定制的标签可能是不同的，这使得自定义标签的使用变得十分个性化。在JavaWeb开发中，有许多功能都是开发人员经常用到的，那么，为什么不定义一套标准的标签库供所有人使用呢？</strong></p><ul><li><p><strong>SUN公司定制了一套标签库的规范，这就是JSP的标准标签库：JSTL（JavaServer Pages Standard Tag Library）</strong></p></li><li><p><strong>JSTL的目标是为了简化JSP页面的设计。对于页面设计人 员来说，使用脚本语言操作动态数据时比较困难的，而采 用标签和表达式语言则相对容易一些，JSTL的使用为页面 设计人员和程序开发人员的分工协作提供了便利</strong></p></li></ul><p><strong>JSTL虽然叫做标准标签库，但实际上是由5个不同功能的标签库组成的</strong></p><blockquote><p><img src="/2022/03/13/64-JSP%E7%9A%84EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8CJSTL/image-20220313221418799.png" loading="lazy"></p></blockquote><h2 id="配置JSTL"><a href="#配置JSTL" class="headerlink" title="配置JSTL"></a>配置JSTL</h2><ul><li>JSTL规范中定义的功能由Apache的Jakarta小组负责实现， 为了使用JSTL，我们需要从Apache的网站上下载JSTL的 安装包，可喜的是，使用MyEclipse开发，选择JavaEE4 版本会提供JSTL的jar包，如果选择的不是JavaEE4版本， 请将这两个jar拷贝到工程中的libs目录下</li></ul><h2 id="Core标签库"><a href="#Core标签库" class="headerlink" title="Core标签库"></a>Core标签库</h2><ul><li>Core标签库主要包括了一般用途的标签、条件标签、迭 代标签和URL相关的标签</li><li>使用格式<ul><li>&lt;%@ taglib uri=”<a href="http://www.sum.com/jsp/jstl/core&quot;">http://www.sum.com/jsp/jstl/core&quot;</a> prefix=”c” %&gt;</li></ul></li></ul><h2 id="Core标签的一般用途"><a href="#Core标签的一般用途" class="headerlink" title="Core标签的一般用途"></a>Core标签的一般用途</h2><ul><li><p><code>&lt;c:out&gt;</code></p><ul><li>用于计算一个表达式的值，并将其结果输出到当前的JspWriter，功能类似于JSP表达式&lt;%= %&gt;，或者EL表达式${ el-expression }</li></ul></li><li><p><code>&lt;c:set&gt;</code></p><ul><li>用于设置范围变量的值或者JavaBean对象的属性</li><li><code>&lt;c:set var=&quot;name&quot; value=&quot;lisi&quot; scope=&quot;session&quot;/&gt;</code><ul><li>这样就相当于设置了在session中添加了一个名为name，值为lisi的属性</li></ul></li></ul></li><li><p><code>&lt;c:remove&gt;</code></p><ul><li>相对于<code>&lt;c:set&gt;</code>其范围变量属性<ul><li><code>&lt;c:remove var=&quot;name&quot; scope=&quot;session&quot;/&gt;</code><ul><li>从session范围中去除名为name的属性</li></ul></li></ul></li></ul></li><li><p><code>&lt;c:catch&gt;</code></p><ul><li><p>用于捕获在其中嵌套的操作所抛出的异常对象，并将异常信息保存到变量中</p><ul><li>我们将有可能抛出异常的代码放置到开始标签：<code>&lt;c:catch&gt;</code>和结束标 签：<code>&lt;/c:catch&gt;</code>之间。如果其中代码出现异常，异常对象将被捕获， 保存在var声明的变量中，该变量总是有page范围。如果没有发生异 常，而var所标识的范围变量将被移除</li><li>如果没有指定var属性，异常只是简单的被捕获，异常信息并不会被保存</li></ul></li><li><p>用于捕获在其中嵌套的操作所抛出的异常对象，并将异常信息保存到变量中</p><ul><li><p>```jsp<br>&lt;c:catch var=”exception”&gt;</p><pre><code>&lt;%     int i = 5;    int j =0;    int k=i/j;%&gt;</code></pre><p><br>&lt;c:out value=”${exception}”/&gt;<br><br>&lt;c:out value=”${exception.message}”/&gt;</p><pre class="language-none"><code class="language-none">      后一句相当于: exception.getMessage();## Core标签的条件标签- &#96;&lt;c:if&gt;&#96;  - 用于实现java中的if语句功能    - &#96;&#96;&#96;jsp      &lt;c:if test&#x3D;&quot;$&#123;user.age&gt;&#x3D;18&#125;&quot;&gt;      &lt;c:out value&#x3D;&quot;$&#123;age&#125;&quot;&#x2F;&gt;      &lt;&#x2F;c:if&gt;</code></pre><p>若为true，会执行中间部分</p></li></ul></li></ul></li><li><p><code>&lt;c:choose&gt;</code>、<code>&lt;c:when&gt;</code>、<code>&lt;c:otherwise&gt;</code></p><ul><li><p><code>&lt;c:choose&gt;</code>和<code>&lt;c:when&gt;</code>、<code>&lt;c:otherwise&gt;</code>一起实现互斥条件执行，类似于java中的if    else</p></li><li><p><code>&lt;c:choose&gt;</code>一般作为<code>&lt;c:when&gt;</code>、<code>&lt;c:otherwise&gt;</code>的父标签</p></li><li><p>```jsp<br>&lt;c:choose&gt;</p><pre><code>&lt;c:when test=&quot;$&#123;age&lt;18&#125;&quot;&gt;    少年，你还未成年呢！&lt;/c:when&gt;&lt;c:when test=&quot;$&#123;age&gt;=18 &amp;&amp; age&lt;=60&#125;&quot;&gt;    兄弟，还想什么呢？你要为你的行为负责任了！&lt;/c:when&gt;&lt;c:otherwise&gt;    大爷，你还是早点回家洗洗睡吧！&lt;/c:otherwise&gt;</code></pre><p></p><pre class="language-none"><code class="language-none">## Core标签的迭代标签- 迭代标签从&#96;&lt;c:forEach&gt;&#96;开始，到&#96;&lt;&#x2F;c:forEach&gt;&#96;结束  - &#96;&#96;&#96;jsp    &lt;c:forEach items&#x3D;&quot;$&#123;users&#125;&quot; varStatus&#x3D;&quot;status&quot; var&#x3D;&quot;user&quot;&gt;         &lt;tr&gt;            &lt;td align&#x3D;&quot;center&quot;&gt;$&#123;status.count&#125;&lt;&#x2F;td&gt;            &lt;td align&#x3D;&quot;center&quot;&gt;$&#123;user.name&#125;&lt;&#x2F;td&gt;            &lt;td align&#x3D;&quot;center&quot;&gt;$&#123;user.age&#125;&lt;&#x2F;td&gt;            &lt;td align&#x3D;&quot;center&quot;&gt;&#123;user.gender&#125;&lt;&#x2F;td&gt;        &lt;&#x2F;tr&gt;    &lt;&#x2F;c:forEach&gt;</code></pre></li><li><p>注意</p><ul><li>${status.count}序号从1开始</li><li>${status.index}序号从0开始</li><li>${status.first}第一个序号</li><li>${status.last}最后一个序号</li></ul></li></ul></li><li><p>可以设定固定次数</p><ul><li><pre><code class="jsp">&lt;c:forEach var =&quot;i&quot; begin=&quot;100&quot; end=&quot;110&quot;&gt;    $&#123;i&#125;&lt;/c:forEach&gt;</code></pre><p>如果再加个step=”2”，那么每次增长为2</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>63-JSP内置对象</title>
      <link href="/2022/03/13/63-JSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/03/13/63-JSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="JSP脚本中的内置对象"><a href="#JSP脚本中的内置对象" class="headerlink" title="JSP脚本中的内置对象"></a>JSP脚本中的内置对象</h1><p><strong>JSP脚本中包含9个内置对象，这9个内置对象都是Servlet  API接口的实例，只是JSP规范对它们进行了默认初始化（由JSP页面对应Servlet的_jspService()方法来创建这些实例）。也就是说，它们已经是对象，可以直接使用</strong></p><h2 id="1-application"><a href="#1-application" class="headerlink" title="1.application"></a>1.application</h2><blockquote><ul><li>javax.servlet.ServletContext的实例，该实例代表JSP所属的WEB应用本身，可用于JSP页面，或者在Servlet之间交换信息</li><li>常用方法<ul><li>getAttribute(String attName) </li><li>setAttribute(String attName，String attName) </li><li>getInitParameter(String paramName)</li></ul></li></ul></blockquote><blockquote><ul><li>该对象代表WEB应用本身，因此使用application来操作 WEB应用相关的数据，一般有如下两个作用</li><li>在整个WEB应用的多个JSP、Servlet之间共享数据<ul><li>setAttribute方法用于设置数据，类似于在Map中put一个数据， 然后使用getAttribute方法获取数据</li><li>在Servlet中通过ServletContext对象设置和获取数据<ul><li>ServletContext context = this.getServletContext();</li></ul></li></ul></li></ul></blockquote><blockquote><p>访问WEB应用的配置参数</p><ul><li><p>web.xml配置application级别的参数</p><ul><li><context-param><p>​    <param-name>driver</param-name></p><p>​    <param-value>com.mysql.jdbc.Driver</param-value></p></context-param></li></ul></li><li><p>在JSP脚本访问</p><ul><li>application.getInitParameter(“driver”);</li></ul></li><li><p>在Servlet代码中访问</p><ul><li>this.getServletContext().getInitParameter(“driver”);</li></ul></li></ul></blockquote><h2 id="2-session"><a href="#2-session" class="headerlink" title="2.session"></a>2.session</h2><blockquote><ul><li>javax.servlet.http.HttpServletSession的实例，该对象代表一次会话。当客户端浏览器与web站点建立连接时，会话开始；当客户端关闭浏览器，或者限定的会话时间到时，会话结束</li><li>常用方法<ul><li>getAttribute(String attName) </li><li>setAttribute(String attName，String attName)</li></ul></li></ul></blockquote><blockquote><ul><li>该对象非常重要，代表一次用户会话。一次用户会话是指从客户端浏览器连接服务器开始，到客户端浏览器与服务器断开为止</li><li>session通常用于跟踪用户的会话信息</li><li>session范围内的属性可以在多个页面的跳转之间共享。 一旦关闭浏览器，即session结束，session范围内的属性将全部丢失</li></ul></blockquote><h2 id="3-request"><a href="#3-request" class="headerlink" title="3.request"></a>3.request</h2><blockquote><ul><li>javax.servlet.http.HttpServletRequest的实例，该对象封装了一次请求，客户端的请求参数都被封装在该对象里。 这是一个常用的对象，获取客户端请求参数必须使用该对象</li><li>常用方法<ul><li>getParameter(String paramName) </li><li>getParameterValues(String paramName) </li><li>getAttribute(String attName) </li><li>setAttribute(String attName,String attValue) </li><li>setCharacterEncoding(String env)</li></ul></li></ul></blockquote><blockquote><ul><li>request对象是JSP中重要的对象，每一个request封装着一次用户的请求，并且所有的请求参数都被封装在 request对象中，因此request对象是获取请求参数的重要途径</li><li>request可以代表本次请求的范围，可以操作request范围内的属性</li><li>常用方法<ul><li>String getParameter(String paramName)<ul><li>获取paramName请求参数的值 </li></ul></li><li>Map getParameterMap()<ul><li>获取所有请求参数名和参数值所组成的Map对象 </li></ul></li><li>Enumeration getParameterNames()<ul><li>获取所有请求参数名所组成的枚举对象 </li></ul></li><li>String[] getParameterValues(String name)<ul><li>paramName请求参数的值，当请求参数有多个值时，该方法将返回 多个值所组成的数组。如多选框选择的值</li></ul></li><li>String getHeader(String name)<ul><li>获取指定请求头的值 </li></ul></li><li>Enumeration getHeaderNames()<ul><li>获取所有请求头的名称 </li></ul></li><li>Enumeration getHeaders(String name)<ul><li>获取指定请求头的多个值 </li></ul></li><li>int getIntHeader(String name)<ul><li>获取指定请求头的值，并将该值转为整数值</li></ul></li></ul></li></ul></blockquote><blockquote><ul><li><p>请求头和请求参数都是由用户的客户端发送到服务器端的</p></li><li><p>请求头由浏览器自动添加，一次请求总是包含若干请求头， 请求参数由用户主动添加</p></li><li><p>客户端发送请求的两种方式</p><ul><li><p>GET请求</p><ul><li><p>直接在浏览器地址栏输入访问地址所发送的请求或者提交表单发 送请求时，该表单对应的form的method属性没有设置，或者设 置成了get，或者是一个连接。GET请求会将请求参数的名和值转 换成字符串，并附加在原URL之后，因此可以在地址栏中看到请 求参数的名和值。并且，GET请求传送的数据量较小，一般不会 超过2kb</p></li><li><p>如:</p><p><a href="http://localhost:8080/test/login-result.jsp?name=zhangsan&amp;password=123">http://localhost:8080/test/login-result.jsp?name=zhangsan&amp;password=123</a></p></li></ul></li><li><p>POST请求</p><ul><li>这种方式通常使用提交表单的方式来发送，并且需要设置form表 单的method属性为post。POST请求方式传送的数据量较大，并 且不受限制，但是有时候取决于服务器的限制。POST请求方式的 请求参数以及对应的值存放在HTML的header中传输，所以用户 不能在地址栏里看到请求参数值，安全性相对较高。通常情况下 使用POST请求</li></ul></li></ul></li></ul></blockquote><h2 id="4-pageContext"><a href="#4-pageContext" class="headerlink" title="4.pageContext"></a>4.pageContext</h2><blockquote><ul><li>javax.servlet.jsp.PageContext的实例，该对象代表该JSP页面上下文，使用该对象可以访问页面中的共享数据</li><li>常用方法有 <ul><li>getServletContext() </li><li>getServletConfig() </li><li>getAttribute(String attName) </li><li>setAttribute(String attName,String attValue) </li><li><font color="red">getAttribute与setAttribute方法在pageContext并不是常用，在这里列出，主要是跟之前的几个对象作为比较</font>.</li></ul></li></ul></blockquote><blockquote><ul><li>该对象代表页面上下文对象，该对象主要用于访问JSP之间的共享数据。使用pageContext可以访问page、 request、session、application范围内的变量</li><li>常用方法 <ul><li>getAttribute(String name)<ul><li>获取page范围内的name属性的值 </li></ul></li><li>getAttribute(String name,int scope)<ul><li>获取指定范围内的name属性的值</li><li>scope的取值<ul><li>PageContext.PAGE_SCOPE：对应于page范围</li><li>PageContext.REQUEST_SCOPE：对应于request范围</li><li>PageContext.SESSION_SCOPE：对应于session范围</li><li>PageContext.APPLICATION_SCOPE：对应于application范围</li></ul></li></ul></li><li>setAttribute(String name,Object value)<ul><li>将value对象存放在page范围中</li></ul></li><li>setAttribute(String name,Object value，int scope)<ul><li>将value对象存放在指定的范围中 </li></ul></li><li>ServletRequest getRequest() <ul><li>获取request对象 </li></ul></li><li>ServletResponse getResponse()<ul><li>获取response对象 </li></ul></li><li>ServletConfig getServletConfig() <ul><li>获取config对象 </li></ul></li><li>ServletContext getServletContext()<ul><li>获取application对象 </li></ul></li><li>HttpSession getSession()<ul><li>获取session对象</li></ul></li></ul></li><li>一旦在JSP、Servlet编程中获取到了pageContext对象，可以通过它提供的方法获取其他的内置对象</li></ul></blockquote><blockquote><p><font color="red">application、session、request、pageContext是JSP9个内置对象中的4个空间对象，其作用的范围依次递减、 影响的时间也依次递减</font>，如果共享数据，或者是在JSP中传递数据，可以选用适合空间对象的setAttribute方法设置数据，再调用对应的getAttribute方法获取数据</p></blockquote><h2 id="5-response"><a href="#5-response" class="headerlink" title="5.response"></a>5.response</h2><blockquote><ul><li>javax.servlet.http.HttpServletResponse的实例，代表服务器对客户端的响应。通常很少在JSP页面中直接使用该对象响应，而是使用out对象，除非需要生成非字符型的响应，在Servlet编程中用得比较广泛，而response对象常用于重定向</li><li>常用方法 <ul><li>getOutputStream()</li><li>sendRedirect(String location)</li></ul></li></ul></blockquote><blockquote><ul><li>response代表服务器对客户端的响应。大部分时候，程 序无须使用response来响应客户端的请求，因为有一个 更加简单的响应的对象——out，它代表页面输出流，直 接使用out生成响应更加简单</li><li>out是JspWriter的实例，JspWriter是Writer的子类， Writer是字符流，无法输出非字符内容。如果需要在JSP 页面中动态生成一副图片、或者输出一个PDF文档，使用 out作为响应将无法完成，此时必须使用response作为响 应输出</li><li>response有如下一些作用<ul><li>response响应生成非字符响应</li><li>重定向</li><li>增加Cookie</li></ul></li><li>response重定向<ul><li>重定向是response的另外一个用处，与请求的转发不一样，<font color="red">重定向会丢失所有请求的参数和属性</font>，因为重定向将生成第二次请求， 与前面一次的请求不在同一个request范围之内</li></ul></li><li>HttpServletResponse提供了一个sendRedirect(String  path)方法，该方法用于重定向到path指定的资源</li></ul></blockquote><blockquote><h2 id="请求的转发与响应的重定向的区别"><a href="#请求的转发与响应的重定向的区别" class="headerlink" title="请求的转发与响应的重定向的区别"></a><font color="green"><strong>请求的转发与响应的重定向的区别</strong></font></h2><ul><li>转发执行后依然是上一次的请求；而重定向是生成了第二次请求</li><li>转发执行后，由于是同一个请求，所有请求里面的参数与属性再转发之后还能取到；而重定向是第二次请求，之前请求里面的参数与属性全部丢失，重定向之后不能取到</li><li>转发执行后地址栏里面的请求URL不会变；而重定向是生成了第二次请求，类似于在地址栏里面重新输入一个新的 URL，所以地址栏里面的请求URL会变</li></ul></blockquote><h2 id="6-out"><a href="#6-out" class="headerlink" title="6.out"></a>6.out</h2><blockquote><ul><li>javax.servlet.jsp.JspWriter的实例，该实例代表JSP页面的输出流，用于输出内容，形成HTML页面</li><li>常用方法有<ul><li>write(String str)</li><li>print(String str)</li><li>println(String str)</li></ul></li><li>out对象代表一个页面输出流，通常用于在页面上输出变量值以及常量。一般在使用输出表达式的地方，都可以使用out对象来达到同样的效果</li><li>&lt;%= 表达式 %&gt;，这种方式等价于out.write(…)</li></ul></blockquote><h2 id="7-config"><a href="#7-config" class="headerlink" title="7.config"></a>7.config</h2><blockquote><ul><li>javax.servlet.ServletConfig的实例，该实例代表该JSP的配置信息。实际上，JSP页面通常无须配置，也就不存在什么配置信息。该对象在Servlet中用得更多</li><li>常用方法有<ul><li>getInitParameter(String paramName)</li><li>getInitParameters()</li></ul></li></ul></blockquote><h2 id="8-page"><a href="#8-page" class="headerlink" title="8.page"></a>8.page</h2><ul><li>代表该页面本身，通常没有太大的用处。也就是Servlet中的this，其类型就是JSP编译生成的Servlet类，能使用 page的地方就能使用this</li></ul><h2 id="9-exception"><a href="#9-exception" class="headerlink" title="9.exception"></a>9.exception</h2><blockquote><ul><li>java.lang.Throwable的实例，该实例代表其他页面中的异常和错误。只有当页面是错误处理页面，<font color="red">即编译指令page的 isErrorPage属性为true时，该对象才可以使用</font>.</li><li>JSP页面无须处理错误和异常，如果要处理，可以将错误和异常指定到错误页面，在错误页面的page编译指令中加上 isErrorPage=”true”，就可以拿到exception对象，在错误页面中通过调用相应的方法来输出相应的错误、异常信息</li><li>常用方法<ul><li>getMessage()</li><li>printStackTrace()</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>62-JSP编译与动作指令</title>
      <link href="/2022/03/10/62-JSP%E7%BC%96%E8%AF%91%E4%B8%8E%E5%8A%A8%E4%BD%9C%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/03/10/62-JSP%E7%BC%96%E8%AF%91%E4%B8%8E%E5%8A%A8%E4%BD%9C%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="一、JSP的编译指令"><a href="#一、JSP的编译指令" class="headerlink" title="一、JSP的编译指令"></a>一、JSP的编译指令</h1><ul><li><p>JSP的编译指令是通知JSP引擎的消息<font color="red">（就是将jsp编译成servlet时起作用）</font>，它不直接生成输出</p></li><li><p>编译指令都有默认值，因此不需要为每一个指令设置值</p></li><li><p>常见的编译指令</p><ul><li><p>page</p><ul><li>该指令是针对当前页面的指令</li></ul></li><li><p>include</p><ul><li>用于指定包含另外一个页面</li></ul></li><li><p>taglib</p><ul><li>用于定义和访问自定义的标签</li></ul></li></ul></li></ul><h2 id="1-page编译指令"><a href="#1-page编译指令" class="headerlink" title="1.page编译指令"></a>1.page编译指令</h2><h3 id="page指令的格式"><a href="#page指令的格式" class="headerlink" title="page指令的格式"></a>page指令的格式</h3><ul><li><font color="red">&lt;%@ page pageEncoding=”UTF-8” %&gt;</font></li></ul><h3 id="page指令"><a href="#page指令" class="headerlink" title="page指令"></a>page指令</h3><blockquote><p>page指令通常位于JSP页面的顶端，一个JSP页面可以使用多条page指令，如下是page指令的属性、属性值、以及意义的描述</p><ul><li>language = “java”<ul><li>声明当前JSP页面使用的脚本语言的种类，默认值是java，无需配置</li></ul></li><li>extends=”package.class”<ul><li>声明当前JSP页面编译后的Java类所继承的父类，或者所实现的接口。通常情况下，JSP页面编译后的Java类都默认继承自HttpJspBase类和实现JspSourceDependent接口，我们一般也无需再让它继承其他的类或者再实现其他的接口，无需配置 </li></ul></li><li><font color="red">import=”package.class | package.*,…”</font><ul><li>声明当前JSP页面需要导入的包。默认导入的包有：java.lang.*、 javax.servlet.*、javax.servlet.jsp.*、javax.servlet.http.*</li></ul></li><li> session=”true | false”</li><li>声明当前的JSP页面是否需要HTTPSession</li><li>buffer=”none | 8k | size kb“<ul><li>指定输出缓冲区的大小。输出缓冲区的JSP内置对象：out用于缓存JSP 页面对客户端浏览器的输出，默认是8kb，可以设置为none，也可以设置为其他的值，单位是kb。通常情况下就使用默认大小，无需配置 </li></ul></li><li>autoFlush=”true | false”<ul><li>当输出要强制输出缓冲区中的内容。设置为 true正常输出，如果设置为false，则会在buffer溢出时产生一个异常。 如果buffer属性不设置，该属性也无需设置</li></ul></li><li>isThreadSafe=”true | false”<ul><li>声明当前JSP页面生成的Servlet是否是线程安全的，告诉服务器，你的代码是安全还是不安全的，不安全，服务器就阻止并发，默认是true， 如果真的不安全，可以自行在关键的地方加上同步代码，可以不设置</li></ul></li><li>info=”text”<ul><li>设置该JSP程序的信息</li></ul></li><li><font color="red">errorPage=”relativeURL”</font><ul><li>指定错误处理页面。如果本页产生了异常或者是错误，而该JSP页面没有对应的处理代码，则会自动调用该属性所指定的JSP页面</li></ul></li><li>isErrorPage=”true | false”<ul><li>设置本JSP页面是否为错误处理程序。如果该页面已经是错误处理页面，则通常无需指定errorPage属性</li></ul></li><li>pageEncoding=”gbk”<ul><li>指定网页生成的字符集编码，<font color="green">（和contentType同时设置，以pageEncoding为准）</font></li></ul></li><li><font color="red">contentType=（”mimeType;charset=characterSet” ）| “text/html;charSet=gbk”</font><ul><li>用于设定生成网页的文件格式和编码字符集，即MIME类型和页面字符集类型，默认的MIME类型是text/html，默认的字符集类型为ISO-8859-1</li></ul></li><li>isELIgnored = “false”<ul><li>是否忽略EL表达式，默认false不需设置</li></ul></li></ul></blockquote><h2 id="2-include编译指令"><a href="#2-include编译指令" class="headerlink" title="2.include编译指令"></a>2.include编译指令</h2><h3 id="include指令的格式"><a href="#include指令的格式" class="headerlink" title="include指令的格式"></a>include指令的格式</h3><ul><li><font color="red">&lt;%@ include file = “relativeURL” %&gt;</font></li></ul><h3 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h3><ul><li>使用include指令，可以将一个外部文件嵌入到当前JSP文件中，同时解析这个页面中的JSP语句（如果有的话）。 这个是<font color="red">静态的include</font>语句，<font color="blue">它会把目标页面的其他编译指令也包含进来，而动态include则不会</font></li></ul><p><strong>include既可以包含静态文本，也可以包含动态的JSP页面</strong></p><h2 id="3-taglib编译指令"><a href="#3-taglib编译指令" class="headerlink" title="3.taglib编译指令"></a>3.taglib编译指令</h2><p><strong>taglib编译指令一般是使用在导入第三方标签库的时候使用</strong></p><p>例子:</p><p><code>&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;</code></p><hr><h1 id="二、JSP的动作指令"><a href="#二、JSP的动作指令" class="headerlink" title="二、JSP的动作指令"></a>二、JSP的动作指令</h1><p><strong>动作指令与编译不同，编译指令是通知Servlet引擎处理消息，而动作指令只是在运行时的动作，JSP有如下7个动作指令</strong></p><blockquote><p><font color="red"><code>jsp:forward</code></font></p><ul><li>执行页面转向，将请求的处理转发到下一个页面</li></ul><p><font color="red"><code>jsp:param </code></font></p><ul><li>用于传递参数，必须与其他支持采纳数的标签一起使用</li></ul><p><font color="red"><code>jsp:include </code></font></p><ul><li>用于动态引入一个JSP页面</li></ul><p><code>jsp:plugin </code></p><ul><li>用于下载JavaBean或者Applet到客户端执行</li></ul><p><code>jsp:useBean </code></p><ul><li>创建或使用一个JavaBean的实例</li></ul><p><code>jsp:setProperty </code></p><ul><li>设置JavaBean实例的属性值</li></ul><p><code>jsp:getProperty </code></p><ul><li>输出JavaBean实例的属性值</li></ul></blockquote><h2 id="1-forward动作指令"><a href="#1-forward动作指令" class="headerlink" title="1.forward动作指令"></a>1.forward动作指令</h2><p><strong>forward指令用于将页面响应转发到另外的页面。既可以转发到静态的HTML页面，也可以转发的动态的JSP页面，使用格式:</strong></p><ul><li><p><code>&lt;jsp:forward page=&quot;relativeURL&quot; /&gt;</code></p></li><li><p><code>&lt;jsp:forward page=&quot;relativeURL&quot; &gt;</code></p><p>​        <code>&lt;jsp:param name=&quot;name&quot; value=&quot;zhangsan&quot; /&gt;</code></p><p><code>&lt;/jsp:forward&gt;</code></p></li><li><p><font color="red">第二种语法用于转发时增加额外的请求参数。增加的请求参数值可以通过HttpServletRequest类的getParameter() 方法获取</font></p><p>详码见jsp-03-action</p></li></ul><h2 id="2-param动作指令"><a href="#2-param动作指令" class="headerlink" title="2.param动作指令"></a>2.param动作指令</h2><p><strong>该指令用于设置参数，这个指令自己本身不能单独使用，需要和其他的指令相互配合才能使用，比如include、forward指令，以及plugin指令，使用格式:</strong></p><ul><li>&lt;jsp:param name=”name” value=”zhangsan” /&gt;</li></ul><h2 id="3-include动作指令"><a href="#3-include动作指令" class="headerlink" title="3.include动作指令"></a>3.include动作指令</h2><p><strong>include指令是一个<font color="red">动态include指令</font>，也用于包含某个页面。<font color="blue">它不会导入被include页面的编译指令，仅仅将被导入页面的body内容插入页面</font>，使用格式</strong></p><ul><li><p><code>&lt;jsp:include page=&quot;relativeURL&quot; flush=&quot;true&quot;/&gt;</code></p></li><li><p><code>&lt;jsp:include page=&quot;relativeURL&quot; flush=&quot;true&quot;&gt;</code></p><p>​        <code>&lt;jsp:param name=&quot;paramName&quot; value=&quot;paramValue&quot; </code>/&gt;<br><code>&lt;/jsp:include&gt;</code></p></li></ul><p><strong>flush属性用于指定输出缓存是否转移到被导入文件中。 true，表示包含在导入文件中；false，表示包含在原文件中</strong></p><blockquote><h3 id="JSP中编译指令中的静态导入与动作指令中的动态导入的区别-star-star-star-star"><a href="#JSP中编译指令中的静态导入与动作指令中的动态导入的区别-star-star-star-star" class="headerlink" title="JSP中编译指令中的静态导入与动作指令中的动态导入的区别:star::star::star::star:"></a>JSP中编译指令中的静态导入与动作指令中的动态导入的区别:star::star::star::star:</h3><ul><li>静态导入是将被导入页面的代码完全融入，两个页面融合成一个整体Servlet；而动态导入则在Servlet中使用 include方法来引入被导入页面的内容</li><li>静态导入时被导入页面的编译指令会起作用；而动态导入时被导入页面的编译指令则失去作用，只是插入被导入页面的body内容动态导入，还可以增加额外的参数</li><li>动态导入的效率要高于静态导入</li></ul></blockquote><h2 id="4-plugin动作指令"><a href="#4-plugin动作指令" class="headerlink" title="4.plugin动作指令"></a>4.plugin动作指令</h2><p><strong>plugin指令主要是用于下载服务器端的JavaBean或者 Applet到客户端执行。由于程序在客户端执行，因此客户 端必须安装虚拟机以及其他的软件。再者，Applet是SUN 公司企图统一客户端编程开发的失败技术，也没有必要再去研究它了</strong></p><h2 id="5-useBean动作指令"><a href="#5-useBean动作指令" class="headerlink" title="5.useBean动作指令"></a>5.useBean动作指令</h2><p><strong>useBean、setProperty、getProperty这个三个动作指令都与JavaBean有关</strong></p><ul><li>useBean用于在JSP页面中实例化一个Java对象</li><li>setProperty用于为JavaBean对象的属性设置</li><li>getProperty用于输出JavaBean对象的属性</li></ul><p><strong>useBean的使用格式:</strong></p><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;jsp:useBean id&#x3D;&quot;name&quot;             class&#x3D;&quot;package.className&quot;             scope&#x3D;&quot;page|request|session|application&quot; &#x2F;&gt;</code></pre><ul><li>id：javaBean的实例名称</li><li>class：javaBean的实现类</li><li>scope：javaBean实例的作用范围<ul><li>page：该JavaBean实例仅在当前该页面有效</li><li>request：该JavaBean实例在本次请求中有效</li><li>session：该JavaBean实例在本次会话中有效</li><li>application：该JavaBean实例在本应用内一直有效</li></ul></li></ul><h3 id="useBean标签的class、type属性有什么区别"><a href="#useBean标签的class、type属性有什么区别" class="headerlink" title="useBean标签的class、type属性有什么区别"></a>useBean标签的class、type属性有什么区别</h3><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;jsp:useBean id&#x3D;&quot;student&quot; class&#x3D;&quot;package.Student&quot; scope&#x3D;&quot;session&quot; &#x2F;&gt;&lt;jsp:useBean id&#x3D;&quot;student&quot; type&#x3D;&quot;package.Student&quot; scope&#x3D;&quot;session&quot; &#x2F;&gt;</code></pre><ul><li>以上的两种写法，当student!=null两者似乎没什么区别，若使用session.setAttribute(“student”,null);设置后，在访问包含有<code>&lt;jsp:useBean id=&quot;student&quot; type=&quot;package.Student&quot; scope=&quot;session&quot; /&gt;</code>语句的页面时就会抛出异常 （org.apache.jasper.JasperException: bean product  not found within scope）。</li><li>而使用<code>&lt;jsp:useBean id=&quot;student&quot; class=&quot;package.Student&quot; scope=&quot;session&quot; /&gt;</code>不会抛异常</li><li>假如使用class，它是先判断拿不拿得到实例的bean，若拿不到就使用new关键字实例化一个；而使用的是type时，它只是查找指定的范围中是否存在，在不存在时就会抛出异常，因此在使用type时就需要注意这点</li></ul><h2 id="6-setProperty动作指令"><a href="#6-setProperty动作指令" class="headerlink" title="6.setProperty动作指令"></a>6.setProperty动作指令</h2><p><strong>setProperty的使用格式</strong></p><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;jsp:setProperty name&#x3D;&quot;beanName&quot;                 property&#x3D;&quot;propertyName&quot;                 value&#x3D;&quot;value&quot; &#x2F;&gt;</code></pre><ul><li>name：指定需要设定javaBean的实例名称</li><li>property：指定需要设置的属性名称</li><li>value：指定需要设置的属性值</li></ul><h2 id="7-getProperty动作指令"><a href="#7-getProperty动作指令" class="headerlink" title="7.getProperty动作指令"></a>7.getProperty动作指令</h2><p><strong>getProperty的使用格式:</strong></p><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;jsp:getProperty name&#x3D;&quot;beanName&quot; property&#x3D;&quot;propertyName&quot; &#x2F;&gt;</code></pre><ul><li>name：指定需要输出javaBean的实例名称</li><li>property：指定需要输出的属性名称</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用注释</title>
      <link href="/2022/03/10/%E5%B8%B8%E7%94%A8%E6%B3%A8%E9%87%8A/"/>
      <url>/2022/03/10/%E5%B8%B8%E7%94%A8%E6%B3%A8%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle："><a href="#Oracle：" class="headerlink" title="Oracle："></a>Oracle：</h1><ul><li>单行注释：–</li><li>多行注释：/*    */</li></ul><h1 id="MySQL："><a href="#MySQL：" class="headerlink" title="MySQL："></a>MySQL：</h1><ul><li>单行注释：–</li><li>多行注释：/*    */</li></ul><h1 id="Java："><a href="#Java：" class="headerlink" title="Java："></a>Java：</h1><ul><li>单行注释：//</li><li>多行注释：/*    */</li><li>文档注释：/**    */</li></ul><h1 id="Properties："><a href="#Properties：" class="headerlink" title="Properties："></a>Properties：</h1><ul><li>单行注释：#</li></ul><h1 id="HTML："><a href="#HTML：" class="headerlink" title="HTML："></a>HTML：</h1><ul><li>多行注释：<code>&lt;!--    --&gt;</code></li></ul><h1 id="XML："><a href="#XML：" class="headerlink" title="XML："></a>XML：</h1><ul><li>多行注释：<code>&lt;!--    --&gt;</code></li></ul><h1 id="CSS："><a href="#CSS：" class="headerlink" title="CSS："></a>CSS：</h1><ul><li>多行注释：/*    */</li></ul><h1 id="JavaScript："><a href="#JavaScript：" class="headerlink" title="JavaScript："></a>JavaScript：</h1><ul><li>单行注释：//</li><li>多行注释：/*    <em>/    /</em>*    */</li></ul><h1 id="Servlet："><a href="#Servlet：" class="headerlink" title="Servlet："></a>Servlet：</h1><ul><li>单行注释：//</li><li>多行注释：/*    <em>/    /</em>*    */</li></ul><h1 id="JSP："><a href="#JSP：" class="headerlink" title="JSP："></a>JSP：</h1><ul><li>单行注释：//</li><li>多行注释：&lt;%–    –%&gt;</li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>61-JSP基础</title>
      <link href="/2022/03/09/61-JSP%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/03/09/61-JSP%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><strong>JSP</strong>（全称<strong>J</strong>ava<strong>S</strong>erver <strong>P</strong>ages）</p><h1 id="一、JSP的基本原理"><a href="#一、JSP的基本原理" class="headerlink" title="一、JSP的基本原理"></a>一、JSP的基本原理</h1><ul><li>JSP的本质是Servlet，当用户向指定的Servlet发送请求时，Servlet利用输出流动态地生成HTML页面，包括每一个静态的HTML标签和所有在HTML页面中出现的内容</li><li>通常情况下，一张HTML页面包括如下一些内容：页面布局、样式、主题、静态文字、静态图片、动态文字、动态图片，通常的Servlet开发，会将这些内容作为输出流的参数，全部以类似打印的方式输出到客户端，总结一句话： <font color="red">Servlet开发视图，就是在Java代码里面插入HTML代码</font></li><li>JSP的出现，解决了Servlet画页面的尴尬局面，从而让Servlet专门专注于业务逻辑，页面显示全部交给JSP来完成，JSP技术就是对Servlet技术在页面展现这一块功能的一个封装，总结一句话：<font color="red">JSP展示页面，就是在HTML代码里面加入JSP标签，或者是部分Java代码</font></li></ul><h2 id="1-JSP的内容分为两个部分"><a href="#1-JSP的内容分为两个部分" class="headerlink" title="1.JSP的内容分为两个部分"></a>1.JSP的内容分为两个部分</h2><blockquote><ol><li><p>静态内容</p><p>标准的HTML标签、静态的页面内容，这些内容与静态HTML页面相同</p></li><li><p>动态内容</p><p>受Java程序控制的内容，这些内容由Java程序来动态生成</p><p><font color="red">（生成的java代码默认放在编译后的Servlet中的jspService( )方法里面，所以一个方法中不能再定义成员变量和方法。）</font></p></li></ol><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page language&#x3D;&quot;java&quot; pageEncoding&#x3D;&quot;utf-8&quot;%&gt;&lt;html&gt;    &lt;head&gt;        &lt;title&gt;index.jsp&lt;&#x2F;title&gt;    &lt;&#x2F;head&gt;    &lt;body&gt;        欢迎学习Java Web,现在时间是:        &lt;%           out.print(new java.util.Date());        %&gt;    &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre></blockquote><ul><li>JSP本质就是Servlet，每一个JSP就是一个Servlet实例——JSP页面由系统编译成Servlet，Servlet再负责响应用户的请求</li><li>JSP是Servlet在页面显示功能上面的简化，即使使用JSP，其实实际上还是使用Servlet </li><li>对于Tomcat服务器而言，JSP编译成的Servlet存放在work目录对应的WEB应用下面</li></ul><pre class="language-html" data-language="html"><code class="language-html">&lt;%@ page language="java" pageEncoding="utf-8"%><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>test.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        使用JavaScript技术输出各个标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">">标题"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"&lt;/h"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span>        使用jsp技术输出各个标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        &lt;%            for (int i=1;i&lt;=6;i++)&#123;                out.write("<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h"+i+"</span><span class="token punctuation">></span></span>标题"+i+"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h"+i+"</span><span class="token punctuation">></span></span>");            &#125;        %>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="2-JSP的工作原理"><a href="#2-JSP的工作原理" class="headerlink" title="2.JSP的工作原理"></a>2.JSP的工作原理</h2><blockquote><p><img src="/2022/03/09/61-JSP%E5%9F%BA%E7%A1%80/image-20220310124123045.png" loading="lazy"></p></blockquote><ul><li>JSP文件必须在JSP服务器内部运行</li><li>JSP文件必须生成Servlet才能执行</li><li>每个JSP页面的第一个访问者速度很慢，因为必须等待JSP编译成Servlet</li><li>JSP页面的访问者无需安装任何客户端，甚至不需要刻意运行Java的运行环境，因为JSP页面输送到客户端的是标准的HTML页面</li></ul><h1 id="二、JSP的声明"><a href="#二、JSP的声明" class="headerlink" title="二、JSP的声明"></a>二、JSP的声明</h1><ul><li><p>JSP声明用于声明变量和方法<font color="green">（成员变量、成员方法）</font></p></li><li><p>JSP声明的语法格式： <font color="red">&lt;%! 声明部分 %&gt;</font></p><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;&lt;%!   private int age &#x3D; 20;   public int add(int a,int b)&#123;       return a+b;   &#125;%&gt;&lt;html&gt;    &lt;head&gt;    &lt;&#x2F;head&gt;    &lt;body&gt;        &lt;%-- 第一种输出方法 --%&gt;        &lt;%            out.write(&quot;age&#x3D;&quot;+age+&quot;&lt;br&#x2F;&gt;&quot;);        out.write(&quot;4+2&#x3D;&quot;+add(4,2));        %&gt;        &lt;hr&#x2F;&gt;        &lt;%-- 声明的都是成员变量,成员方法 --%&gt;        &lt;%!             private int score &#x3D; 100;            public int max(int a,int b)&#123;                return a&gt;b?a:b;            &#125;        %&gt;                &lt;%-- 第二种输出方法 --%&gt;        score &#x3D; &lt;% out.write(&quot;&quot;+score); %&gt;&lt;br&#x2F;&gt;        max(1,2) &#x3D; &lt;% out.write(&quot;&quot;+max(1,2)); %&gt;                &lt;%-- 第三种输出方法(jsp的输出表达式) --%&gt;        score &#x3D; &lt;%&#x3D; score %&gt;    &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre></li><li><p>JSP声明部分，会变成Servlet的<font color="red">成员变量和成员方法</font>，所以前面<font color="red">可以使用访问修饰符修饰</font></p></li><li><p>可以使用静态修饰符修饰</p></li><li><p><font color="red">不可以使用抽象修饰符修饰</font></p></li></ul><h1 id="三、JSP的注释"><a href="#三、JSP的注释" class="headerlink" title="三、JSP的注释"></a>三、JSP的注释</h1><p><strong>JSP注释用于标注在程序开发过程中给开发人员的提示，它不会输出到客户端</strong></p><ul><li>JSP注释的格式<ul><li><code>&lt;%-- 被注释的内容 --%&gt;</code></li></ul></li><li>对比html的注释<ul><li><code>&lt;!-- 被注释的内容 --&gt;</code></li></ul></li><li>对比xml的注释<ul><li><code>&lt;!-- 被注释的内容 --&gt;</code></li></ul></li></ul><h1 id="四、JSP的输出表达式"><a href="#四、JSP的输出表达式" class="headerlink" title="四、JSP的输出表达式"></a>四、JSP的输出表达式</h1><h2 id="1-JSP的输出表达式"><a href="#1-JSP的输出表达式" class="headerlink" title="1.JSP的输出表达式"></a>1.JSP的输出表达式</h2><ul><li><p>JSP提供了一种输出表达式值的简单方法</p></li><li><p>JSP输出表达式的格式</p><ul><li><font color="red">&lt;%= 表达式 %&gt;</font></li></ul><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; %&gt;&lt;%!   private int age &#x3D; 20;   public int add(int a,int b)&#123;       return a+b;   &#125;%&gt;&lt;html&gt;    &lt;head&gt;    &lt;&#x2F;head&gt;    &lt;body&gt;        &lt;%-- 第三种输出方法(jsp的输出表达式) --%&gt;        age &#x3D; &lt;%&#x3D; age %&gt;        add(1,2) &#x3D; &lt;%&#x3D; add(1,2) %&gt;    &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre></li></ul><h1 id="五、JSP的脚本"><a href="#五、JSP的脚本" class="headerlink" title="五、JSP的脚本"></a>五、JSP的脚本</h1><ul><li><p>JSP脚本的作用，就是将Java代码嵌入到HTML代码中</p><p>脚本格式：&lt;%  Java代码  %&gt;</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>60-Servlet的过滤器与监听器</title>
      <link href="/2022/03/09/60-Servlet%E7%9A%84%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B8%8E%E7%9B%91%E5%90%AC%E5%99%A8/"/>
      <url>/2022/03/09/60-Servlet%E7%9A%84%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B8%8E%E7%9B%91%E5%90%AC%E5%99%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>59-Servlet高级</title>
      <link href="/2022/03/09/59-Servlet%E9%AB%98%E7%BA%A7/"/>
      <url>/2022/03/09/59-Servlet%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>58-Servlet的请求与响应</title>
      <link href="/2022/03/09/58-Servlet%E7%9A%84%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/"/>
      <url>/2022/03/09/58-Servlet%E7%9A%84%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>57-Servlet基础及生命周期</title>
      <link href="/2022/03/09/57-Servlet%E5%9F%BA%E7%A1%80%E5%8F%8A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2022/03/09/57-Servlet%E5%9F%BA%E7%A1%80%E5%8F%8A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>56-Tomcat</title>
      <link href="/2022/03/09/56-Tomcat/"/>
      <url>/2022/03/09/56-Tomcat/</url>
      
        <content type="html"><![CDATA[<h2 id="Eclipse小修改"><a href="#Eclipse小修改" class="headerlink" title="Eclipse小修改"></a>Eclipse小修改</h2><blockquote><p><img src="/2022/03/09/56-Tomcat/image-20211130104237534.png" loading="lazy"></p><ol start="2"><li><img src="/2022/03/09/56-Tomcat/image-20211130104336615.png" style="zoom:50%;" loading="lazy"></li><li><img src="/2022/03/09/56-Tomcat/image-20211130104449997.png" loading="lazy"></li><li>进行编辑版本配置<img src="/2022/03/09/56-Tomcat/image-20211201092559552.png" loading="lazy"></li><li><img src="/2022/03/09/56-Tomcat/image-20211201092612573.png" loading="lazy"></li></ol></blockquote><h2 id="Tomcat配置"><a href="#Tomcat配置" class="headerlink" title="Tomcat配置"></a>Tomcat配置</h2><p><em><strong>下载安装注意事项:</strong></em></p><blockquote><ol><li>tomcat的版本应该和jdk的版本保持一致</li><li><strong>前提是计算机中已经成功安装了jdk</strong></li><li>官方地址 - <a href="https://tomcat.apache.org/download-80.cgi">https://tomcat.apache.org/download-80.cgi</a></li><li>解压缩之后的路径**不要出现中文以及带有特殊符号[program files(x86)]**的路径</li></ol></blockquote><h3 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h3><blockquote><ol><li><p>右击计算机 - 属性 - 高级系统设置 - 高级 - 环境变量(N)</p></li><li><p>定位到下方的系统变量 - 新建</p><p>2-1. 变量名CATALINA_HOME</p><p>2-2. 变量值:解压缩之后的根目录的绝对路径</p><p>2-3.确定</p></li><li><p>定位到变量名是Path - 编辑 - 新建***%CATALINA_HOME%\bin***</p></li><li><p><strong>确定,关闭所有窗口[环境变量配置,黑窗口] - 生效</strong></p></li></ol></blockquote><h3 id="检测一下是否配置成功"><a href="#检测一下是否配置成功" class="headerlink" title="检测一下是否配置成功"></a>检测一下是否配置成功</h3><blockquote><ol><li><p>打开黑窗口,命令控制台 - win+r - cmd</p></li><li><p>启动tomcat服务器</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">C:&#x2F;User&#x2F;admin&gt;startup</code></pre></li></ol></blockquote><p>补充一点:</p><blockquote><ul><li>如果出现不是内部或者外部的命令 - 检测一下刚刚的环境变量的配置</li><li>如果出现什么没有发现JAVA_HOME - 检测一下jdk的环境变量配置是否成功.</li></ul></blockquote><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><blockquote><ol><li><p>bin目录 - 二进制文件[可执行的应用程序]</p><p>1-1. startup.bat[启动服务器],shutdown.bat[关闭服务器]</p><p>1-2. 服务器只能启动一次,原因:每个应用程序在启动的时候都会占用一个端口号.tomcat默认的端口号是 8080</p><p>1-3. startup.sh/shutdown.sh - linux/mac</p></li><li><p>conf - tomcat配置文件</p><p>2-1. server.xml - <strong>修改一下tomcat的默认的端口号 - 8888</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5000<span class="token punctuation">"</span></span> <span class="token attr-name">disableUploadTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8888<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span> <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token attr-name">URIEncoding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>2-2. <em><strong>只要配置文件一旦改动了,如果希望生效的话,那么服务器一定要重启</strong></em></p><p>2-3. tomcat-users.xml</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span> <span class="token attr-name">rolename</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manager-gui<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tomcat<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tomcat<span class="token punctuation">"</span></span> <span class="token attr-name">roles</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manager-gui<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>lib目录 - tomcat服务器执行所需要依赖的jar/运行时环境</p><p>3-1. servlet-api.jar - 存放的就是servlet的源码</p><p>3-2. jsp-api.jar - 存放的就是jsp的源码</p></li><li><p>log目录 - 存放tomcat运行期间的日志文件 - 程序员/<strong>运维</strong></p></li><li><p>temp目录 - 临时目录,定期过来清除的</p></li><li><p><strong>webapps目录 - 存放我们所有的web资源</strong></p><p><strong>6-1. 项目部署 - 就是将项目复制到该目录下</strong></p><p><strong>6-2. web资源 - 静态资源[html,css,js,二进制数据]以及动态资源[servlet程序,jsp程序]</strong></p></li><li><p>work - 工作区</p></li></ol></blockquote><h3 id="访问Tomcat服务器"><a href="#访问Tomcat服务器" class="headerlink" title="访问Tomcat服务器"></a>访问Tomcat服务器</h3><ul><li><a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></li><li><a href="http://localhost:8080/">http://localhost:8080</a></li></ul><h3 id="Hello-tomcat-手动的方式创建JavaWeb应用"><a href="#Hello-tomcat-手动的方式创建JavaWeb应用" class="headerlink" title="Hello-tomcat(手动的方式创建JavaWeb应用)"></a>Hello-tomcat(手动的方式创建JavaWeb应用)</h3><p><img src="/2022/03/09/56-Tomcat/image-20211201163104820.png" alt="基本目录结构" loading="lazy"></p><blockquote><ol><li>webapps目录新建一个静态资源的项目目录 - helloworld - 新建了register.html和WEB-INF文件夹(包含classes和lib文件夹、web.xml)</li><li>打开浏览器[chrome] - 输入url - <a href="http://127.0.0.1:8888/helloworld/register.html">http://127.0.0.1:8888/helloworld/register.html</a></li></ol></blockquote><h3 id="JavaWeb应用目录结构"><a href="#JavaWeb应用目录结构" class="headerlink" title="JavaWeb应用目录结构"></a>JavaWeb应用目录结构</h3><ul><li>helloworld目录<ul><li>应用名称目录</li></ul></li><li>WEB-INF目录<ul><li>JavaWeb应用的描述信息目录</li></ul></li><li>classes目录<ul><li>存放所有Java字节码文件（.class文件）的目录</li></ul></li><li>lib目录<ul><li>存放所有第三方jar包的目录</li></ul></li><li>web.xml文件<ul><li>JavaWeb应用的配置文件<ul><li>每一个web应用的WEB-INF目录下的web.xml文件被称为配置描述符，在Servlet2.5规范之前，该文件是必须的（Servlet3.0规范并不是必须的，但是即使使用Servlet3.0规范，建议保留）</li></ul></li></ul></li></ul><h4 id="配置描述符web-xml文件"><a href="#配置描述符web-xml文件" class="headerlink" title="配置描述符web.xml文件"></a>配置描述符web.xml文件</h4><ul><li>每一个web应用的WEB-INF目录下的web.xml文件被称为配置描述符，在Servlet2.5规范之前，该文件是必须的（Servlet3.0规范并不是必须的，但是即使使用 Servlet3.0规范，建议保留）</li><li>web.xml文件可以配置如下内容<ul><li>配置JSP</li><li>配置、管理Servlet</li><li>配置、管理Listener</li><li>配置、管理Filter</li><li>配置标签库</li><li>配置JSP属性</li><li>配置、管理JASS授权认证</li><li>配置、管理资源引用</li><li>WEB应用首页配置</li></ul></li></ul><h1 id="Eclipse配置Tomcat"><a href="#Eclipse配置Tomcat" class="headerlink" title="Eclipse配置Tomcat"></a>Eclipse配置Tomcat</h1><blockquote><ol><li><img src="/2022/03/09/56-Tomcat/image-20211130110458781.png" loading="lazy"></li><li><img src="/2022/03/09/56-Tomcat/image-20211130110535433.png" alt="image-20211130110535433" style="zoom:50%;" loading="lazy"></li><li><img src="/2022/03/09/56-Tomcat/image-20211130165842365.png" loading="lazy"></li><li><img src="/2022/03/09/56-Tomcat/image-20211130165903973.png" loading="lazy"></li><li><img src="/2022/03/09/56-Tomcat/image-20211130165916165.png" loading="lazy"></li><li>双击Tomcat服务器修改<img src="/2022/03/09/56-Tomcat/image-20211130170227069.png" loading="lazy"></li><li>结束</li></ol></blockquote><h1 id="第一个javaweb项目"><a href="#第一个javaweb项目" class="headerlink" title="第一个javaweb项目"></a>第一个javaweb项目</h1><blockquote><ol><li><img src="/2022/03/09/56-Tomcat/image-20211201082818547.png" loading="lazy"></li><li>打开javaEE视图<img src="/2022/03/09/56-Tomcat/image-20211201083257118.png" loading="lazy"></li><li><img src="/2022/03/09/56-Tomcat/image-20211201083313008.png" loading="lazy"></li></ol></blockquote><h1 id="idea配置Tomcat"><a href="#idea配置Tomcat" class="headerlink" title="idea配置Tomcat"></a>idea配置Tomcat</h1><p><img src="/2022/03/09/56-Tomcat/image-20211214145636556.png" loading="lazy"></p><img src="/2022/03/09/56-Tomcat/image-20211214145711656.png" style="zoom:50%;" loading="lazy"><p><img src="/2022/03/09/56-Tomcat/image-20211214145829994.png" loading="lazy"></p><p><img src="/2022/03/09/56-Tomcat/image-20220310133101351.png" loading="lazy"></p><p><img src="/2022/03/09/56-Tomcat/image-20211214145957293.png" loading="lazy"></p><p><img src="/2022/03/09/56-Tomcat/image-20220323231451810.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>55-Maven的概述</title>
      <link href="/2022/03/09/55-Maven%E7%9A%84%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/03/09/55-Maven%E7%9A%84%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Maven环境搭建"><a href="#Maven环境搭建" class="headerlink" title="Maven环境搭建"></a>Maven环境搭建</h2><h3 id="下载网址"><a href="#下载网址" class="headerlink" title="下载网址"></a>下载网址</h3><pre class="language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//maven.apache.org/download.cgi</code></pre><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>直接解压即可</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><ul><li><p>前提是jdk环境变量配置好.</p><ul><li><p>系统变量 - 新建</p><ul><li>变量名 <em><strong>MAVEN_HOME</strong></em></li><li>变量值 解压之后的maven的根目录</li></ul></li><li><p>定位到Path - 编辑</p><p>新建 - %MAVEN_HOME%\bin</p></li><li><p>确定 - 关闭所有窗口</p></li><li><p>重启终端 - mvn -v</p></li></ul></li></ul><h3 id="好像是一个过时方法"><a href="#好像是一个过时方法" class="headerlink" title="好像是一个过时方法"></a>好像是一个过时方法</h3><blockquote><ol><li><p>在Maven解压后的根目录下的conf/settings.xml文件中修改</p></li><li><p><img src="/2022/03/09/55-Maven%E7%9A%84%E6%A6%82%E8%BF%B0/image-20211130101124593.png" loading="lazy"></p></li><li><p>在255行左右添加下列代码，支持JDK1.8</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span></code></pre></li></ol></blockquote><h3 id="配置镜像地址"><a href="#配置镜像地址" class="headerlink" title="配置镜像地址"></a>配置镜像地址</h3><ul><li><p>D盘根目录下或者在maven解压之后的根目录下新建一个repo目录 - 本地仓库</p></li><li><p>找到磁盘中的用户主目录 - 发现.m2目录,如果没有手动创建</p></li><li><p>到maven的目录中找到conf/settings.xml文件</p></li><li><p>将settings.xml文件拷贝到.m2目录中</p></li><li><p>编辑.m2下的settings.xml</p></li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>D:\DevelopTools\apache-maven-3.8.1\repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><h1 id="Eclipse中配置Maven"><a href="#Eclipse中配置Maven" class="headerlink" title="Eclipse中配置Maven"></a>Eclipse中配置Maven</h1><blockquote><ol><li><img src="/2022/03/09/55-Maven%E7%9A%84%E6%A6%82%E8%BF%B0/image-20211130102048642.png" style="zoom:50%;" loading="lazy"></li><li><img src="/2022/03/09/55-Maven%E7%9A%84%E6%A6%82%E8%BF%B0/image-20211130102237582.png" loading="lazy"></li><li><img src="/2022/03/09/55-Maven%E7%9A%84%E6%A6%82%E8%BF%B0/image-20211130102349063.png" loading="lazy"></li><li><img src="/2022/03/09/55-Maven%E7%9A%84%E6%A6%82%E8%BF%B0/image-20211130102839437.png" loading="lazy"></li></ol></blockquote><h1 id="idea中配置maven"><a href="#idea中配置maven" class="headerlink" title="idea中配置maven"></a>idea中配置maven</h1><p><img src="/2022/03/09/55-Maven%E7%9A%84%E6%A6%82%E8%BF%B0/image-20211214183345981.png" loading="lazy"></p><p><img src="/2022/03/09/55-Maven%E7%9A%84%E6%A6%82%E8%BF%B0/image-20211214183555689.png" loading="lazy"></p><p><img src="/2022/03/09/55-Maven%E7%9A%84%E6%A6%82%E8%BF%B0/image-20211214191614839.png" loading="lazy"></p><h1 id="thymeleaf在idea中报错解决方法"><a href="#thymeleaf在idea中报错解决方法" class="headerlink" title="thymeleaf在idea中报错解决方法"></a>thymeleaf在idea中报错解决方法</h1><p><img src="/2022/03/09/55-Maven%E7%9A%84%E6%A6%82%E8%BF%B0/image-20220328115604628.png" loading="lazy"></p><p>maven用不了Lambda表达式，在pom.xml中配置</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>54-JavaEE的概述</title>
      <link href="/2022/03/09/54-JavaEE%E7%9A%84%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/03/09/54-JavaEE%E7%9A%84%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaEE应用的概念"><a href="#JavaEE应用的概念" class="headerlink" title="JavaEE应用的概念"></a>JavaEE应用的概念</h2><ul><li><p>2006年，SUN公司提出JavaEE的概念，并推出JSF1.2 与EJB3.0规范</p></li><li><p>企业级、<font color="red">重量级</font>规范</p><ul><li>JSF+EJB+JPA</li></ul></li><li><p><font color="red">轻量级</font>JavaEE框架</p><ul><li>Struts2+Spring+Hibernate</li><li>SpringMVC+Spring+MyBatis</li></ul></li><li><p>经典的JavaEE应用往往以EJB（企业级JavaBean）为核心， 以应用服务器为运行环境，导致开发、运营成本较高。</p></li><li><p>轻量级JavaEE应用具备了JavaEE规范的各种特征，如面向对象建模的思维方式、优秀的应用分层及良好的可扩展性、可维护性。轻量级JavaEE应用保留了经典JavaEE应用 的架构，但是开发、运营成本更低。</p></li></ul><h2 id="JavaEE应用的分层"><a href="#JavaEE应用的分层" class="headerlink" title="JavaEE应用的分层"></a>JavaEE应用的分层</h2><p>不管是经典的JavaEE架构，还是轻量级的JavaEE架构， 大致上分为如下几层</p><ul><li><h4 id="Domain-Object（领域对象）层"><a href="#Domain-Object（领域对象）层" class="headerlink" title="Domain Object（领域对象）层"></a><font color="orange">Domain Object（领域对象）层</font></h4><ul><li>有些地方也可以叫成实体层（Entity），此层由一系列的POJO（Plain Old Java Object，普通的、传统的Java对 象）组成，这些对象是该系统的Domain Object，往往包含了各自所需要实现的业务逻辑方法</li></ul></li><li><h4 id="DAO（Data-Access-Object，数据访问对象）层"><a href="#DAO（Data-Access-Object，数据访问对象）层" class="headerlink" title="DAO（Data Access Object，数据访问对象）层"></a><font color="orange">DAO（Data Access Object，数据访问对象）层</font></h4><ul><li>此层由一些列的DAO组件组成，这些DAO实现了对数据库的创建、查询、更新和删除（CRUD增删改查）等原子操作</li></ul></li><li><h4 id="业务逻辑层"><a href="#业务逻辑层" class="headerlink" title="业务逻辑层"></a><font color="orange">业务逻辑层</font></h4><ul><li>此层由一些列的业务逻辑对象组成，这些业务逻辑对象实现了系统所需要的业务逻辑方法。这些业务逻辑方法可以仅仅用于暴露Domain Object对象所实现的业务逻辑方法， 也可能依赖DAO组件实现的业务逻辑方法</li></ul></li><li><h4 id="控制器层"><a href="#控制器层" class="headerlink" title="控制器层"></a><font color="orange">控制器层</font></h4><ul><li>此层由一系列的控制器组成，这些控制器用于拦截用户请求，并调用业务逻辑组件的业务逻辑方法，处理用户请求， 并根据处理结果转发到不同的表现层组件</li></ul></li><li><h4 id="表现层"><a href="#表现层" class="headerlink" title="表现层"></a><font color="orange">表现层</font></h4><ul><li>此层由一系列的HTML页面、JSP页面、Velocity页面，或者是PDF文档视图组件构成，负责收集用户请求，并将显示处理结果</li></ul></li></ul><h2 id="JavaEE应用的组件"><a href="#JavaEE应用的组件" class="headerlink" title="JavaEE应用的组件"></a>JavaEE应用的组件</h2><ul><li>表现层组件<ul><li><font color="red">HTML</font>、CSS、JavaScript、 Ajax 、jQuery、ext、 Bootstrap、easyUI等（静态视图）</li><li><font color="red">JSP、Thymeleaf</font>、VUE、FreeMarker、Velocity、 Tapestry等（动态视图/模板视图）</li></ul></li><li>控制器组件<ul><li>Servlet、MVC框架（Struts、WebWork、 JSF、 Struts2、SpringMVC）</li></ul></li><li>业务逻辑组件<ul><li>系统的核心组件，实现系统的业务逻辑处理。通常，一个 业务逻辑方法对应一次用户操作。一个业务逻辑方法应该 是一个整体的，因此我们要求对业务逻辑方法增加事务性。 业务逻辑方法仅仅负责实现业务逻辑，并不应该进行数据 库访问。因此，业务逻辑组件中不应该出现原始的JDBC、 Hibernate、MyBatis或者是JPA的API调用</li></ul></li></ul><h2 id="JavaEE应用的相关技术"><a href="#JavaEE应用的相关技术" class="headerlink" title="JavaEE应用的相关技术"></a>JavaEE应用的相关技术</h2><p>经典MVC模式中，<font color="blue">M是指业务模型，V是指用户界面，C则是控制器</font>，使用MVC的目的是将<font color="red">M和V的实现代码分离</font>，从而使同一个程序可以使用不同的表现形式。其中，View的定义比较清晰，就是用户界面。</p><ul><li><p><font color="grenn">MVC</font>里面的C在三种情况下不同的写法(命名):</p><ul><li>Servlet -&gt; Controller</li><li>Struts2 -&gt; action</li><li>SpringMVC -&gt; handler</li></ul></li><li><h4 id="Servlet、JSP"><a href="#Servlet、JSP" class="headerlink" title="Servlet、JSP"></a>Servlet、JSP</h4><ul><li>Servlet与JSP其实是一样的，JSP最终会翻译成Servlet， 再通过编译Servlet运行，Servlet可以充当控制器，JSP负责显示。（Servlet从3.0规范开始，新增了异步请求、 Annotation标注、增强的Servlet API）</li></ul></li><li><h4 id="Struts2"><a href="#Struts2" class="headerlink" title="Struts2"></a>Struts2</h4><ul><li>Struts是全世界最早的，也是最有名的MVC框架，其作者是JSP规范的制定者，并参与了Tomcat服务器的开发。但 是从时间上面讲，由于Struts出现时代比较早，一些设计上面的缺陷在后来的项目中慢慢地被暴露出来，难以在适应新的项目的开发，此时的Struts与另外一个优秀的MVC 框架——WebWork一结合，这就是Struts2。Struts2拥有众多的优秀的设计，其底层是WebWork，迅速成为了MVC框架中的王者</li></ul></li><li><h4 id="JSF"><a href="#JSF" class="headerlink" title="JSF"></a>JSF</h4><ul><li>JSF是JavaEE的规范，也是一款设计优秀的MVC框架，甚至比Struts2更优秀，但是由于种种原因，在市场占有率上要逊于Struts很大一筹</li></ul></li><li><h4 id="Tapestry"><a href="#Tapestry" class="headerlink" title="Tapestry"></a>Tapestry</h4><ul><li>Tapestry是Apache组织下的另外一个优秀的MVC框架</li></ul></li><li><h4 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h4><ul><li>ORM（Object Relation Mapping）框架，传统的Java 应用都是采用JDBC来访问数据库，但是其是基于SQL的， 与面向对象的思想特别的不一致，所以Hibernate就是这样的框架，MyBatis、TopLink与SUN公司的JPA规范都是 属于ORM框架</li></ul></li><li><h4 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h4><ul><li>半自动的一个ORM框架</li></ul></li><li><h4 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h4><ul><li>整合框架的容器，与SUN公司的EJB规范相对应</li></ul></li><li><h4 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h4><ul><li>Spring容器后期版本中出现的一个模块，它的出现，使得 Spring容器不再需要整合其他MVC框架，自己本身就有 MVC框架</li></ul></li></ul><blockquote><p>JSF框架，没人用，基于MVC开发</p><p>JPA:基于jdbc持久化操作</p><p>struts2底层是Webwork框架</p><p><font color="red">基于MVC开发</font>：JSF、struts、webwork、struts2……</p><p>以后不用JDBC，使用基于ORM（对象关系映射）框架的技术，</p><ul><li>比如：Hibernate、MyBatis、JPA、</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>53-JS常用表单验证</title>
      <link href="/2022/03/04/53-JS%E5%B8%B8%E7%94%A8%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
      <url>/2022/03/04/53-JS%E5%B8%B8%E7%94%A8%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="1-长度限制"><a href="#1-长度限制" class="headerlink" title="1.长度限制"></a>1.长度限制</h1><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>1. 长度限制<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>a</span> <span class="token special-attr"><span class="token attr-name">onsubmit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token keyword">return</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>不能超过50个字符！<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>check<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"不能超过50个字符！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h1 id="2-只能是汉字"><a href="#2-只能是汉字" class="headerlink" title="2.只能是汉字"></a>2.只能是汉字</h1><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>2. 只能是汉字 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">isChinese</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入中文！<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">isChinese</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\u0391-\uFFE5]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">!=</span><span class="token string">""</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'必须输入中文！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h1 id="3-只能是英文字母"><a href="#3-只能是英文字母" class="headerlink" title="3.只能是英文字母"></a>3.只能是英文字母</h1><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//验证只能是字母</span>    <span class="token keyword">function</span> <span class="token function">checkZm</span><span class="token punctuation">(</span><span class="token parameter">zm</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> zmReg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z]*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>zm<span class="token operator">!=</span><span class="token string">""</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>zmReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>zm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"只能是英文字母！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h1 id="4-只能是数字"><a href="#4-只能是数字" class="headerlink" title="4.只能是数字"></a>4.只能是数字</h1><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>javascript</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//验证只能为数字</span>    <span class="token keyword">function</span> <span class="token function">checkNumber</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">!=</span><span class="token string">""</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'只能输入数字！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h1 id="5-只能是英文字母和数字"><a href="#5-只能是英文字母和数字" class="headerlink" title="5.只能是英文字母和数字"></a>5.只能是英文字母和数字</h1><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//验证只能是字母和数字</span>    <span class="token keyword">function</span> <span class="token function">checkZmOrNum</span><span class="token punctuation">(</span><span class="token parameter">zmnum</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> zmnumReg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9a-zA-Z]*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>zmnum<span class="token operator">!=</span><span class="token string">""</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>zmnumReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>zmnum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"只能输入是字母或者数字,请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h1 id="6-检验时间大小-与当前时间比较"><a href="#6-检验时间大小-与当前时间比较" class="headerlink" title="6.检验时间大小(与当前时间比较)"></a>6.检验时间大小(与当前时间比较)</h1><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//检验时间大小(与当前时间比较)</span>    <span class="token keyword">function</span> <span class="token function">checkDate</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> obj_value<span class="token operator">=</span>obj<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//替换字符，变成标准格式(检验格式为：'2009-12-10')</span>        <span class="token comment">// var obj_value=obj.replace("-","/");//替换字符，变成标准格式(检验格式为：'2010-12-10 11:12')</span>        <span class="token keyword">var</span> date1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>obj_value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> date2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取今天的日期</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>date1<span class="token operator">></span>date2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"不能大于当前时间！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h1 id="7-屏蔽关键字-这里屏蔽-和"><a href="#7-屏蔽关键字-这里屏蔽-和" class="headerlink" title="7.屏蔽关键字(这里屏蔽***和***)"></a>7.屏蔽关键字(这里屏蔽***和***)</h1><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">indexOf</span> <span class="token punctuation">(</span><span class="token string">"***"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">indexOf</span> <span class="token punctuation">(</span><span class="token string">"****"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"屏蔽关键字(这里屏蔽***和****)！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h1 id="8-两次输入密码是否相同"><a href="#8-两次输入密码是否相同" class="headerlink" title="8.两次输入密码是否相同"></a>8.两次输入密码是否相同</h1><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">with</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>all<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>input1<span class="token punctuation">.</span>value<span class="token operator">!=</span>input2<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"密码不一致"</span><span class="token punctuation">)</span>                input1<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                input2<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"密码一致"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h1 id="9-表单项不能为空"><a href="#9-表单项不能为空" class="headerlink" title="9.表单项不能为空"></a>9.表单项不能为空</h1><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">CheckForm</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"姓名不能为空!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"姓名不能为空!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h1 id="10-邮箱验证"><a href="#10-邮箱验证" class="headerlink" title="10.邮箱验证"></a>10.邮箱验证</h1><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//对电子邮件的验证</span>        <span class="token keyword">var</span> myreg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+\.[a-zA-Z]&#123;2,3&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>myreg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请输入有效的邮箱！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h1 id="11-验证手机号"><a href="#11-验证手机号" class="headerlink" title="11.验证手机号"></a>11.验证手机号</h1><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">validatemobile</span><span class="token punctuation">(</span><span class="token parameter">mobile</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mobile<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'手机号码不能为空！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mobile<span class="token punctuation">.</span>length<span class="token operator">!=</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请输入有效的手机号码，需是11位！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> myreg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(((13[0-9]&#123;1&#125;)|(15[0-9]&#123;1&#125;)|(18[0-9]&#123;1&#125;))+\d&#123;8&#125;)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>myreg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>mobile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请输入有效的手机号码！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h1 id="12-验证身份证号码-需是有效身份证"><a href="#12-验证身份证号码-需是有效身份证" class="headerlink" title="12.验证身份证号码(需是有效身份证)"></a>12.验证身份证号码(需是有效身份证)</h1><pre><code class="html">&lt;script type=&quot;text/javascript&quot;&gt;    // 构造函数，变量为15位或者18位的身份证号码    function clsIDCard(CardNo) &#123;        this.Valid=false;        this.ID15=&#39;&#39;;        this.ID18=&#39;&#39;;        this.Local=&#39;&#39;;        if(CardNo!=null)this.SetCardNo(CardNo);    &#125;    // 设置身份证号码，15位或者18位    clsIDCard.prototype.SetCardNo = function(CardNo) &#123;        this.ID15=&#39;&#39;;        this.ID18=&#39;&#39;;        this.Local=&#39;&#39;;        CardNo=CardNo.replace(&quot; &quot;,&quot;&quot;);        var strCardNo;        if(CardNo.length==18) &#123;            pattern= /^\d&#123;17&#125;(\d|x|X)$/;            if (pattern.exec(CardNo)==null)return;            strCardNo=CardNo.toUpperCase();        &#125; else &#123;            pattern= /^\d&#123;15&#125;$/;            if (pattern.exec(CardNo)==null)return;            strCardNo=CardNo.substr(0,6)+&#39;19&#39;+CardNo.substr(6,9)            strCardNo+=this.GetVCode(strCardNo);        &#125;        this.Valid=this.CheckValid(strCardNo);    &#125;    // 校验身份证有效性    clsIDCard.prototype.IsValid = function() &#123;        return this.Valid;    &#125;    // 返回生日字符串，格式如下，1981-10-10    clsIDCard.prototype.GetBirthDate = function() &#123;        var BirthDate=&#39;&#39;;        if(this.Valid)BirthDate=this.GetBirthYear()+&#39;-&#39;+this.GetBirthMonth()+&#39;-&#39;+this.GetBirthDay();        return BirthDate;    &#125;    // 返回生日中的年，格式如下，1981    clsIDCard.prototype.GetBirthYear = function() &#123;        var BirthYear=&#39;&#39;;        if(this.Valid)BirthYear=this.ID18.substr(6,4);        return BirthYear;    &#125;    // 返回生日中的月，格式如下，10    clsIDCard.prototype.GetBirthMonth = function() &#123;        var BirthMonth=&#39;&#39;;        if(this.Valid)BirthMonth=this.ID18.substr(10,2);        if(BirthMonth.charAt(0)==&#39;0&#39;)BirthMonth=BirthMonth.charAt(1);        return BirthMonth;    &#125;    // 返回生日中的日，格式如下，10    clsIDCard.prototype.GetBirthDay = function() &#123;        var BirthDay=&#39;&#39;;        if(this.Valid)BirthDay=this.ID18.substr(12,2);        return BirthDay;    &#125;    // 返回性别，1：男，0：女    clsIDCard.prototype.GetSex = function() &#123;        var Sex=&#39;&#39;;        if(this.Valid)Sex=this.ID18.charAt(16)%2;        return Sex;    &#125;    // 返回15位身份证号码    clsIDCard.prototype.Get15 = function() &#123;        var ID15=&#39;&#39;;        if(this.Valid)ID15=this.ID15;        return ID15;    &#125;    // 返回18位身份证号码    clsIDCard.prototype.Get18 = function() &#123;        var ID18=&#39;&#39;;        if(this.Valid)ID18=this.ID18;        return ID18;    &#125;    // 返回所在省，例如：上海市、浙江省    clsIDCard.prototype.GetLocal = function() &#123;        var Local=&#39;&#39;;        if(this.Valid)Local=this.Local;        return Local;    &#125;    clsIDCard.prototype.GetVCode = function(CardNo17) &#123;        var Wi = new Array(7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2,1);        var Ai = new Array(&#39;1&#39;,&#39;0&#39;,&#39;X&#39;,&#39;9&#39;,&#39;8&#39;,&#39;7&#39;,&#39;6&#39;,&#39;5&#39;,&#39;4&#39;,&#39;3&#39;,&#39;2&#39;);        var cardNoSum = 0;        for (var i=0; i&lt;CardNo17.length; i++)cardNoSum+=CardNo17.charAt(i)*Wi[i];        var seq = cardNoSum%11;        return Ai[seq];    &#125;    clsIDCard.prototype.CheckValid = function(CardNo18) &#123;        if(this.GetVCode(CardNo18.substr(0,17))!=CardNo18.charAt(17))return false;        if(!this.IsDate(CardNo18.substr(6,8)))return false;        var aCity=&#123;11:&quot;北京&quot;,12:&quot;天津&quot;,13:&quot;河北&quot;,14:&quot;山西&quot;,15:&quot;内蒙古&quot;,21:&quot;辽宁&quot;,22:&quot;吉林&quot;,23:&quot;黑龙江 &quot;,31:&quot;上海&quot;,32:&quot;江苏&quot;,33:&quot;浙江&quot;,34:&quot;安徽&quot;,35:&quot;福建&quot;,36:&quot;江西&quot;,37:&quot;山东&quot;,41:&quot;河南&quot;,42:&quot;湖北 &quot;,43:&quot;湖南&quot;,44:&quot;广东&quot;,45:&quot;广西&quot;,46:&quot;海南&quot;,50:&quot;重庆&quot;,51:&quot;四川&quot;,52:&quot;贵州&quot;,53:&quot;云南&quot;,54:&quot;西藏 &quot;,61:&quot;陕西&quot;,62:&quot;甘肃&quot;,63:&quot;青海&quot;,64:&quot;宁夏&quot;,65:&quot;新疆&quot;,71:&quot;台湾&quot;,81:&quot;香港&quot;,82:&quot;澳门&quot;,91:&quot;国外&quot;&#125;;        if(aCity[parseInt(CardNo18.substr(0,2))]==null)return false;        this.ID18=CardNo18;        this.ID15=CardNo18.substr(0,6)+CardNo18.substr(8,9);        this.Local=aCity[parseInt(CardNo18.substr(0,2))];        return true;    &#125;    clsIDCard.prototype.IsDate = function(strDate) &#123;        var r = strDate.match(/^(\d&#123;1,4&#125;)(\d&#123;1,2&#125;)(\d&#123;1,2&#125;)$/);        if(r==null)return false;        var d= new Date(r[1], r[2]-1, r[3]);        return (d.getFullYear()==r[1]&amp;&amp;(d.getMonth()+1)==r[2]&amp;&amp;d.getDate()==r[3]);    &#125;    function valiIdCard(idCard)&#123;        var checkFlag = new clsIDCard(idCard);        if (!checkFlag.IsValid()) &#123;            alert(&quot;输入的身份证号无效,请输入真实的身份证号！&quot;);            document.getElementByIdx(&quot;idCard&quot;).focus();            return false;        &#125;else&#123;            alert(&quot;是有效身份证！&quot;);        &#125;    &#125;&lt;/script&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>52-JS的DOM编程</title>
      <link href="/2022/03/03/52-JS%E7%9A%84DOM%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/03/03/52-JS%E7%9A%84DOM%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一、DHTML"><a href="#一、DHTML" class="headerlink" title="一、DHTML"></a>一、DHTML</h1><h3 id="1-DHTML的概念"><a href="#1-DHTML的概念" class="headerlink" title="1.DHTML的概念"></a>1.DHTML的概念</h3><ul><li><p>JavaScript将浏览器本身、网页文档、以及网页文档中的HTML元素等都用相应的内置对象来表示，这些对象以及对象之间的层次关系成为<font color="red">DOM</font>（Document Object  Model，文档对象模型）</p></li><li><p>用户通过鼠标或按键在浏览器窗口或网页元素上执行的操作，对DOM对象来说，就称之为<font color="red">事件</font>（Event）。如，用户用鼠标单击了网页上面的某一个按钮，在这个按钮上就发生了鼠标单击事件，按钮就是<font color="red">事件源</font>.</p></li><li><p>如果将一段程序代码与某一个事件源上发生的某种事件相关联，当该事件源上发生该事件时，浏览器会自动执行与之关联的程序代码，从而引发的一连串程序动作，这个过程称之为<font color="red">事件驱动</font>（Event Driver）。对事件进行处理的程序或者函数，被称之为<font color="red">事件处理程序</font>（Event  Handler），它完成对事件进行响应的<font color="red">动作</font></p></li><li><p>CSS、脚本编程语言和DOM的结合使用，能够使HTML文档与用户具有交互性和动态变换性，这三种技术的统一称谓叫做<font color="red">DHTML</font>（Dynamic HTML，动态HTML）</p><blockquote><p>观察者模式：</p><ul><li>事件源对象：发出事件的对象</li><li>事件对象：事件</li><li>监听器对象：针对某一个被监听 事件源对象 的具体 事件对象 所做出的处理</li></ul></blockquote></li></ul><h3 id="2-DOM对象的层次关系"><a href="#2-DOM对象的层次关系" class="headerlink" title="2.DOM对象的层次关系"></a>2.DOM对象的层次关系</h3><img src="/2022/03/03/52-JS%E7%9A%84DOM%E7%BC%96%E7%A8%8B/image-20220303170001928.png" style="zoom:50%;" loading="lazy"><h3 id="3-编写事件处理程序"><a href="#3-编写事件处理程序" class="headerlink" title="3.编写事件处理程序"></a>3.编写事件处理程序</h3><ul><li><p>方式一</p><ul><li><p>在事件源对象所对应的html标签上增加一个要处理的事件 属性，让事件属性值等于处理该事件的函数名或者是程序代码</p><ul><li><p>JavaScript代码</p><pre class="language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">function fun()&#123;    alert(&quot;哈哈~~&quot;);&#125;</code></pre></li><li><p>网页代码</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点击我<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/></span></span></code></pre></li></ul></li></ul></li><li><p>方式二</p><ul><li><p>直接在html标签属性值中编辑JavaScript代码（现在不需要写JavaScript）</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点击我<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">javaScript<span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'哈哈~'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/></span></span></code></pre></li></ul></li><li><p>方式三</p><ul><li><p>直接在JavaScript代码中，设置元素对象的事件属性，让事件属性值等于处理该事件的函数名或者程序代码</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">            window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> fun<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"哈哈~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>           </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点击我<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>方式四</p><ul><li><p>在一个专门的<code>&lt;script&gt;</code>标签对中编写某个元素对象的某种事件处理程序代码，并用for属性指定事件源和用event属性指定事件名</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>window<span class="token punctuation">"</span></span> <span class="token attr-name">event</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"网页加载成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        我就是一个普通的网页    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul><h1 id="二、window对象"><a href="#二、window对象" class="headerlink" title="二、window对象"></a>二、window对象</h1><ul><li>window对象代表浏览器的整个窗口，我们可以利用window对象控制浏览器窗口的各个方面，如改变状态栏上的显示文字、弹出对话框、移动窗口的位置等</li><li>对window对象的属性和方法的引用，可以省略”window.”这个前缀，如，window.alert(“你好”)可以直接写成alert(“你好”)</li></ul><h2 id="1-window对象的方法"><a href="#1-window对象的方法" class="headerlink" title="1.window对象的方法"></a>1.window对象的方法</h2><blockquote><ul><li>alert ( )<ul><li>弹出一个有”确定”按钮的对话框</li></ul></li><li>confirm ( )<ul><li>弹出一个有”确定”和”取消”两个按钮的对话框，点击”确定”按钮会返回true，点击”取消”按钮会返回false，编程人员可以根据具体的返回值进行进一步业务逻辑的处理</li></ul></li><li>prompt ( )<ul><li>弹出一个具有一个输入框和一个”确定”按钮的对话框，并返回用户所输入的内容</li></ul></li><li>setInterval ( )<ul><li>设置每隔多少时间（毫秒）调用一次某一个程序代码</li></ul></li><li>setTimeout ( )<ul><li>设置多长时间（毫秒）以后执行某一段程序代码</li></ul></li><li>clearInterval ( )<ul><li>取消setInterval的设置效果，其参数是setInterval方法的 返回值</li></ul></li><li>clearTimeout ( )<ul><li>取消setTimeout的设置效果，其参数是setTimeout方法 的返回值</li></ul></li><li>moveTo ( )<ul><li>将浏览器窗口移动到屏幕上的某一个位置</li></ul></li><li>resizeTo ( )<ul><li>改变浏览器窗口的大小</li></ul></li><li>open ( )<ul><li>打开一个新的窗口</li></ul></li><li>showModalDialog ( )<ul><li>打开一个模态的一个对话框窗口，必须关闭该窗口才能回到原来的浏览器窗口</li></ul></li><li>showModelessDialog ( )<ul><li>打开一个非模态的一个对话框窗口，无需关闭该窗口就能回到原来的浏览器窗口</li></ul></li></ul></blockquote><h3 id="实例举例"><a href="#实例举例" class="headerlink" title="实例举例"></a>实例举例</h3><ul><li><p>打开一个网页的同时再打开一个新的窗口，该窗口是发布一个通知，然后在一定的时间之后，该窗口自动关闭</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"msg.html"</span><span class="token punctuation">,</span><span class="token string">"_blank"</span><span class="token punctuation">,</span><span class="token string">"top=0,left=0,width=200,height=200,toolbar=no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        我就是一个普通的网页    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>打开一个网页的同时再打开一个新的窗口，该窗口是发布一个通知，然后在一定的时间之后，该窗口自动关闭</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"window.close()"</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        这是通知页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        大家好,JavaScript的DOM编程是不是很有意思?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        (5秒后关闭该页面)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="2-window对象的属性"><a href="#2-window对象的属性" class="headerlink" title="2.window对象的属性"></a>2.window对象的属性</h2><blockquote><ul><li>closed<ul><li>窗口是否关闭</li></ul></li><li>opener<ul><li>打开当前窗口的window对象</li></ul></li><li>defaultstatus<ul><li>默认设置的内容</li></ul></li><li>status<ul><li>窗口状态栏中正在显示的内容</li></ul></li><li>screenTop<ul><li>窗口顶点在垂直方向上的位置</li></ul></li><li>screenLeft<ul><li>窗口顶点在水平方向上的位置</li></ul></li><li>location<ul><li>用于窗口或框架的 Location 对象 (url)</li></ul></li><li>history<ul><li>对 History 对象的只读引用<ul><li>back ( ) : 加载history列表中的前一个URL</li><li>forward ( ) : 加载history列表中的下一个URL</li><li>go ( ) : 加载history列表中的某一个具体页面</li></ul></li></ul></li></ul></blockquote><h2 id="3-window对象的事件"><a href="#3-window对象的事件" class="headerlink" title="3.window对象的事件"></a>3.window对象的事件</h2><blockquote><ul><li>onload事件<ul><li>浏览器装载网页文档完毕之后（用户还未看到网页文本之 前）</li></ul></li><li>onunload事件<ul><li>浏览器卸载网页文档之后</li></ul></li><li>onbeforeunload事件<ul><li>浏览器准备卸载网页文档之时</li></ul></li></ul></blockquote><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"网页文档装载完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        我就是一个普通的网页    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="三、document对象"><a href="#三、document对象" class="headerlink" title="三、document对象"></a>三、document对象</h1><h2 id="document对象的方法"><a href="#document对象的方法" class="headerlink" title="document对象的方法"></a>document对象的方法</h2><blockquote><ul><li>wirte ( )<ul><li>向html文档中动态写入内容</li></ul></li><li>writeln ( )<ul><li>向html文档中动态写入内容，末尾多增加一个换行符，然而并不能看到效果</li></ul></li><li>getElementById ( )<ul><li>根据元素的id值返回这个元素对象</li></ul></li><li>getElementsByName ( )<ul><li>根据元素的name值返回这个元素对象，这个返回值是一个数组</li></ul></li><li>getElementsByTagName ( )<ul><li>根据元素的标签名返回这个元素对象，这个返回值是一个数组</li></ul></li><li>createElement ( )<ul><li>创建一个HTML元素对象</li></ul></li><li>createStyleSheet ( )<ul><li>创建一个CSS样式规则</li></ul></li><li>open ( )<ul><li>打开一个新的文档，与window的open类似，建议使用 window的open方法</li></ul></li><li>close ( )<ul><li>关闭一个文档</li></ul></li><li>clear ( )<ul><li>清除文档中的所有内容（不成熟）</li></ul></li></ul></blockquote><h1 id="四、body对象"><a href="#四、body对象" class="headerlink" title="四、body对象"></a>四、body对象</h1><h2 id="1-body对象的方法"><a href="#1-body对象的方法" class="headerlink" title="1.body对象的方法"></a>1.body对象的方法</h2><blockquote><ul><li><p>appendChild ( )</p><ul><li><p>将一个标签对增加到文档末尾处</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">createA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                a<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">;</span>                a<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">"百度"</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">createA</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>        我就是一个普通的网页    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul></blockquote><h2 id="2-body对象的属性"><a href="#2-body对象的属性" class="headerlink" title="2.body对象的属性"></a>2.body对象的属性</h2><blockquote><ul><li>id<ul><li>id值</li></ul></li><li>name<ul><li>name值</li></ul></li><li>className<ul><li>类值</li></ul></li><li>innerText<ul><li>文本值（忽略HTML标签格式）</li></ul></li><li>innerHTML<ul><li>文本值（不忽略HTML标签格式）</li></ul></li></ul></blockquote><h1 id="五、form对象"><a href="#五、form对象" class="headerlink" title="五、form对象"></a>五、form对象</h1><p>form对象最主要的功能就是能够直接访问HTML文档中的form表单。</p><p>一个web页面可以有一个或者多个form表单，使用<font color="red">document.forms数组对象</font>可以访问到各个form表单对象。</p><p><strong>可以将标签中嵌入的<font color="blue">表单字段元素的名称</font>（name属性的值）作为form对象的属性，来引用该表单字段元素所对应的对象</strong></p><h2 id="1-form对象的方法"><a href="#1-form对象的方法" class="headerlink" title="1.form对象的方法"></a>1.form对象的方法</h2><blockquote><ul><li>submit ( )<ul><li>该方法是form对象的专有方法，用于向www服务器递交表单数据，模拟用户点击<code>&lt;input type=&quot;submit&quot;.../&gt;</code>按钮的效果</li><li>该方法不会产生onsubmit事件</li></ul></li><li>item ( ) <font color="red">HTML5已弃用</font><ul><li>返回代表form表单中的某个表单字段元素所对应的对象，接收的参数可以是<font color="blue">表单字段元素的名称</font>，也可以是表单字段元素在form表单中的<font color="orange">索引号</font>.</li><li>item方法不能返回<code>&lt;input type=&quot;image&quot;.../&gt;</code>类型的表单字段元素</li></ul></li></ul></blockquote><h2 id="2-form对象的属性"><a href="#2-form对象的属性" class="headerlink" title="2.form对象的属性"></a>2.form对象的属性</h2><blockquote><ul><li>name</li><li>target</li><li>title</li><li>enctype</li><li>encoding</li><li>method</li><li>action</li></ul></blockquote><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form1<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    姓名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    年龄:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    性别:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    学历:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>degree<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>degree<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:submitForm()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">submitForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        form1<span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token string">"post"</span><span class="token punctuation">;</span>        form1<span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> name <span class="token operator">=</span> document<span class="token punctuation">.</span>form1<span class="token punctuation">.</span>name<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token comment">//可读性太低</span>        <span class="token keyword">var</span> password <span class="token operator">=</span> document<span class="token punctuation">.</span>form1<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">var</span> age <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">var</span> sex <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token comment">//用这个,以上都不行</span>        <span class="token keyword">var</span> degree <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementByName</span><span class="token punctuation">(</span><span class="token string">"degree"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"name="</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"\npassword="</span><span class="token operator">+</span>password<span class="token operator">+</span><span class="token string">"\nage="</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">"\nsex="</span><span class="token operator">+</span>sex<span class="token operator">+</span><span class="token string">"\ndegree="</span><span class="token operator">+</span>degree<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token string">"form1"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="3-form对象的事件"><a href="#3-form对象的事件" class="headerlink" title="3.form对象的事件"></a>3.form对象的事件</h2><ul><li><p>onsubmit</p><ul><li><p>表单验证</p></li><li><p>调用格式</p><p><code>&lt;form ... onsubmit=&quot;return validate(this)&quot;&gt;</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token parameter">form</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> nameTag <span class="token operator">=</span> form<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token keyword">var</span> passwordTag <span class="token operator">=</span> form<span class="token punctuation">.</span>password<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nameTag<span class="token punctuation">.</span>value<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"姓名不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameTag<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>passwordTag<span class="token punctuation">.</span>value<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"姓名不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        passwordTag<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51-JavaScript</title>
      <link href="/2022/03/02/51-JavaScript/"/>
      <url>/2022/03/02/51-JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是脚本程序和JavaScript"><a href="#一、什么是脚本程序和JavaScript" class="headerlink" title="一、什么是脚本程序和JavaScript"></a>一、什么是脚本程序和JavaScript</h1><h5 id="什么是脚本程序"><a href="#什么是脚本程序" class="headerlink" title="什么是脚本程序"></a>什么是脚本程序</h5><ul><li>相对于可编译的程序而言</li><li>解释器</li></ul><h5 id="什么是JavaScript"><a href="#什么是JavaScript" class="headerlink" title="什么是JavaScript"></a>什么是JavaScript</h5><ul><li>前身叫做LiveScript，是一种基于对象和事件驱动、具有安全性能的脚本语言</li><li>JavaScript与Java是两个公司的产品，作用与用途大不一样，仅仅是语法相似</li><li>JavaScript、JScript、ECMAScript</li></ul><h5 id="JavaScript的执行机制"><a href="#JavaScript的执行机制" class="headerlink" title="JavaScript的执行机制"></a>JavaScript的执行机制</h5><p><font color="red"><strong>是逐行执行的!</strong></font></p><h1 id="二、脚本代码的位置"><a href="#二、脚本代码的位置" class="headerlink" title="二、脚本代码的位置"></a>二、脚本代码的位置</h1><ul><li>放置在<code>&lt;script&gt;&lt;/script&gt;</code>标签之间</li><li>script标签对可以出现在html标签的<font color="red">head标签中，执行的时机是显示网页之前</font>.</li><li>script标签可以出现在html标签的<font color="red">body标签中，执行的时机是显示网页之时</font>，如果在body标签中<font color="red">出现多个script标签对，则多个标签对之间可以互相访问定义的变量、函数</font>.</li><li>script标签内部的JavaScript代码可以单独存放在后缀名为js的文件中， 再在html网页中引用该文件，这样会使得网页看起来更加的简洁</li><li>script标签内部的JavaScript代码可以出现标签属性值中</li><li>script标签内部的JavaScript代码，在早期，或者是某些浏览器还不认识，会误以为是html代码的一部分，会直接显示出来，为了避免这一现象的发生，可以使用html的注释（<code>&lt;!-- --&gt;</code>）将JavaScript代码注释起来</li></ul><hr><p><font color="blue">代码详见Web/JavaScript/JS脚本的位置.html</font></p><h1 id="三、JavaScript的基本语法"><a href="#三、JavaScript的基本语法" class="headerlink" title="三、JavaScript的基本语法"></a>三、JavaScript的基本语法</h1><h4 id="1-标识符"><a href="#1-标识符" class="headerlink" title="1.标识符"></a>1.标识符</h4><ul><li>JavaScript中定义的符号，例如：变量名、函数名、数组名等。标识符可以由任意的<font color="red">大小写字母、数字、下划线和$</font>组成，但是<font color="orange">不能以数字开头</font>，不能使用JavaScript中的关键字、保留字等</li><li>合法的标识符<ul><li>indentifer、username、userName、user_name、$username</li></ul></li><li>非法的标识符<ul><li>int、3.14、hello world</li></ul></li><li>JavaScript的标识符大小写敏感<ul><li>Name、name</li></ul></li></ul><h4 id="2-代码格式"><a href="#2-代码格式" class="headerlink" title="2.代码格式"></a>2.代码格式</h4><ul><li>每条功能执行语句的末尾必须加上分号（;）(不一定)</li><li>每个单词之间使用空格、制表符、换行符分隔，一般是使用空格分隔</li></ul><h4 id="3-注释"><a href="#3-注释" class="headerlink" title="3.注释"></a>3.注释</h4><ul><li>单行注释<ul><li>// </li></ul></li><li>多行注释<ul><li>/* … */ </li></ul></li></ul><h4 id="4-基本数据类型与常量"><a href="#4-基本数据类型与常量" class="headerlink" title="4.基本数据类型与常量"></a>4.基本数据类型与常量</h4><ul><li>整型常量<ul><li>十六进制的格式：0x4f</li><li>八进制的格式：0123</li><li>十进制的格式：123</li></ul></li><li>实型常量<ul><li>12.34、3.14、5E7、7e8</li></ul></li><li>布尔值常量<ul><li>true、false</li></ul></li><li>字符串常量<ul><li>“javaScript” 、’hello world’</li><li>“” 、 ‘’</li><li>“\n”换行、 “\r”回车、 “\t”制表、 “\\“ </li><li>“hello”+”world”（处理比较长的字符串）</li></ul></li><li>null常量<ul><li>一个变量所指向的对象为空值</li><li>可以理解为已经为这个变量赋值，只是这个值是一个空值</li></ul></li><li>undefined常量<ul><li>一个变量还没有被赋值的一个状态，或者表示某对象的某一个属性不存在</li></ul></li><li>null常量与undefined常量的区别<ul><li>null确实已经赋值，只是这个值是空的</li><li>undefined确实没有赋值，或者根本就不存在</li></ul></li></ul><h4 id="5-变量"><a href="#5-变量" class="headerlink" title="5.变量"></a>5.变量</h4><ul><li>定义一个变量，系统就会为之分配一块内存，程序可以用变量名来表示这块内存中的数据</li><li><font color="red">声明变量使用关键字var</font><ul><li>var name; <ul><li>此时的name类型就是undefined的</li></ul></li></ul></li><li>声明变量与赋值一起使用<ul><li>var age = 18;</li></ul></li><li>对已经赋过值的变量再赋其他类型的值<font color="red">（弱类型）</font><ul><li>var name = “zhangsan”;</li><li>name = 321;</li></ul></li><li>不事先声明变量，直接使用<ul><li>x = 123;</li><li>name = “zhangsan”;</li></ul></li><li>下面y的值应该是多少？<ul><li>x = 123;</li><li>y = x+1;</li><li>alert(“y=”+y);            124</li></ul></li><li><font color="red">建议不要采取不声明变量就直接使用的方式，降低程序代码的可读性</font>.</li></ul><h1 id="四、运算符"><a href="#四、运算符" class="headerlink" title="四、运算符"></a>四、运算符</h1><h4 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a>1.算术运算符</h4><blockquote><p><strong>+加法运算符(正值运算符)</strong></p><blockquote><p>x+5、+6</p><p>多字符串相拼接</p><blockquote><p>“x”+123 -&gt; “x123” </p><p>“”+123 -&gt; “123”</p></blockquote></blockquote><p><strong>-减法运算符(负值运算符)</strong></p><blockquote><p>x-5、-6</p></blockquote><p><strong>*乘法运算符</strong></p><blockquote><p>4*6 -&gt; 24</p></blockquote><p><strong>/除法运算符</strong></p><blockquote><p>9/4 -&gt; 2.25</p></blockquote><p><strong>%模运算符</strong></p><blockquote><p>9/4 - &gt; 1</p></blockquote><p><strong>++</strong></p><blockquote><p>将变量的值加1后再将结果赋值给这个变量</p><p>有前++与后++之分</p><blockquote><p>a = 2;b = a+++1;c = ++a +1; </p><p>alert(“b=”+b+”,c=”+c);</p></blockquote></blockquote><p><strong>–</strong></p><blockquote><p>将变量的值加减1后再将结果赋值给这个变量</p><p>有前–与后–之分</p><blockquote><p>a = 2;b = a–+1;c = –a +1; </p><p>alert(“b=”+b+”,c=”+c);</p></blockquote></blockquote></blockquote><h4 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2.赋值运算符"></a>2.赋值运算符</h4><blockquote><p>赋值运算符的作用就是将一个值赋给一个变量，最常用的赋值运算符是”=”，还可以由”=”赋值运算符与其他一些运算符组合产生一些新的赋值运算符，如”+=”、 “-=”、 “*=”、 “=“等等</p><blockquote><p>+= </p><p>将变量与所赋的值相加后的结果再赋给该变量 </p><p>x+=3，等价于x=x+3;</p></blockquote></blockquote><h4 id="3-比较运算符"><a href="#3-比较运算符" class="headerlink" title="3.比较运算符"></a>3.比较运算符</h4><blockquote><p>&gt;</p><blockquote><p>当左操作数大于右操作数的时候返回true，否则返回false</p></blockquote><p>&lt;</p><blockquote><p>当左操作数小于右操作数的时候返回true，否则返回false</p></blockquote><p>&gt;=</p><blockquote><p>当左操作数大于或者等于右操作数的时候返回true，否则返回false</p></blockquote><p>&lt;=</p><blockquote><p>当左操作数小于或者等于右操作数的时候返回true，否则返回false</p></blockquote><p>==</p><blockquote><p>当左操作数等于右操作数的时候返回true，否则返回false</p></blockquote><p>!=</p><blockquote><p>当左操作数不等于右操作数的时候返回true，否则返回false</p></blockquote></blockquote><h4 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4.逻辑运算符"></a>4.逻辑运算符</h4><blockquote><p>&amp;&amp;（逻辑与）</p><blockquote><p>当左右两边的操作数都为true时返回true，否则返回false</p></blockquote><p>||（逻辑或）</p><blockquote><p>当左右两边的操作数都为false时返回false，否则返回true</p></blockquote><p>!（逻辑非）</p><blockquote><p>当操作数为true时返回false，否则返回true</p></blockquote><p>()</p><blockquote><p>可以改变运算符的优先级别</p><p>无需去死记运算符的默认优先级别，即使是记不住，也可以使用括号的方式达到想要的级别</p></blockquote></blockquote><h1 id="五、程序的流程控制"><a href="#五、程序的流程控制" class="headerlink" title="五、程序的流程控制"></a>五、程序的流程控制</h1><h4 id="1-顺序结构"><a href="#1-顺序结构" class="headerlink" title="1.顺序结构"></a>1.顺序结构</h4><ul><li>按照代码的编写顺序执行</li><li><font color="red">逐行执行</font></li></ul><h4 id="2-条件选择语句"><a href="#2-条件选择语句" class="headerlink" title="2.条件选择语句"></a>2.条件选择语句</h4><ul><li><p>格式1 </p><ul><li>```javascript<br>if(条件语句){<pre><code>执行语句</code></pre>}<pre class="language-none"><code class="language-none">- 格式2  - &#96;&#96;&#96;javascript    if(条件语句)&#123;     执行语句     &#125;else&#123;         执行语句     &#125; </code></pre></li></ul></li><li><p>或者使用三目运算符格式： 变量=布尔表达式?语句1:语句2;</p></li><li><p>格式3</p><ul><li>```javascript<br>if(条件语句){<pre><code>执行语句</code></pre>}else if{<pre><code>执行语句</code></pre>}else if{<pre><code>执行语句</code></pre>}<br>…<pre class="language-none"><code class="language-none">#### 3.switch选择语句&#96;&#96;&#96;javaswitch(表达式)&#123;case 值1:    语句;    break;case 值2:    语句;    break;...default:    语句;    break;&#125;</code></pre></li></ul></li></ul><h4 id="4-循环语句"><a href="#4-循环语句" class="headerlink" title="4.循环语句"></a>4.循环语句</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>执行语句<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="5-do-while循环语句"><a href="#5-do-while循环语句" class="headerlink" title="5.do while循环语句"></a>5.do while循环语句</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">do</span><span class="token punctuation">&#123;</span>执行语句<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span></code></pre><h4 id="6-for循环语句"><a href="#6-for循环语句" class="headerlink" title="6.for循环语句"></a>6.for循环语句</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化表达式<span class="token punctuation">;</span>循环条件表达式<span class="token punctuation">;</span>循环后的操作表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>执行语句<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="7-break与continue语句"><a href="#7-break与continue语句" class="headerlink" title="7.break与continue语句"></a>7.break与continue语句</h4><ul><li>break<ul><li>终止条件语句</li><li>终止循环语句</li></ul></li><li>continue<ul><li>结束当前循环，继续进行下一次循环</li></ul></li></ul><h1 id="六、函数"><a href="#六、函数" class="headerlink" title="六、函数"></a>六、函数</h1><h4 id="1-函数的定义与作用"><a href="#1-函数的定义与作用" class="headerlink" title="1.函数的定义与作用"></a>1.函数的定义与作用</h4><p>函数的作用</p><ul><li>重复代码的结合体</li><li>功能统一的结合体</li></ul><p>函数的定义</p><ul><li>```javascript<br>function 函数名(参数列表){<pre><code>程序代码;return 表达式(或者是值);</code></pre>}<pre class="language-none"><code class="language-none">函数的调用- 函数名(参数1,参数2…)- 变量 &#x3D; 函数名(参数1,参数2…)- 在程序中直接调用  - alert(&quot;sum&#x3D;&quot;+square(2,3));#### 2.全局变量与局部变量- 全局变量是与函数声明定义平级的- 局部变量是声明定义在某一个函数的内部的- 当全局变量与局部变量同名时，优先使用局部变量#### 3.参数个数可变的函数- 在函数的内部使用arguments（数组）对象来访问调用程序传递过来的所有的参数- 定义该多个参数函数的时候，参数列表是空的- &#96;&#96;&#96;javascript  &lt;script&gt;      function append() &#123;          var result &#x3D; &quot;&quot;;          for (var i&#x3D;0;i&lt;arguments.length;i++)&#123;              result +&#x3D; arguments[i]+&quot; &quot;;          &#125;          return result;  &#125;        alert(append(1,2,3));      alert(append(&quot;how&quot;,&quot;old&quot;,&quot;are&quot;,&quot;you&quot;,&quot;?&quot;));  &lt;&#x2F;script&gt;</code></pre></li></ul><h4 id="4-创建动态函数"><a href="#4-创建动态函数" class="headerlink" title="4.创建动态函数"></a>4.创建动态函数</h4><ul><li><p>var varName = new Function(arg1,arg2…);</p></li><li><p>所有的参数都必须是字符串类型的，最后的参数必须是这 个动态函数的功能程序代码</p></li><li><p>动态函数请慎用，可读性太低，不可取</p></li><li><p>```javascript</p><script>    var result = new Function("arg1","arg2",                             "var result;"+                             "result = arg1+\" \"+arg2;"+                             "return result;"                             );    alert(result("hello","javaScript"));</script><pre class="language-none"><code class="language-none">#### 5.JavaScript中的系统函数&gt; ##### encodeURI&gt;&gt; - 返回一个对URI字符串编码后的结果&gt;   - var uriString &#x3D; encodeURI(&quot;http:&#x2F;&#x2F;www.baidu.com?name&#x3D;张 三&amp;introduct&#x3D;hello world&quot;); &gt;   - alert(uriString);&gt;&gt; ##### decodeURI&gt;&gt; - 将一个已经编码的URI字符串解码成最初的字符串并返回&gt;   - alert(decodeURI(&quot;%E5%BC%A0%E4%B8%89&quot;));&gt; ##### parseInt&gt;&gt; - 将一个字符串按指定的进制转换成一个整数，语法格式为： parseInt(numString,[radix])，如果没有指定第二个参数， 则前缀为&quot;0X&quot;的字符串被视为十六进制，前缀为&quot;0&quot;的字符串被视为八进制，其他的被视为十进制&gt;   - alert(parseInt(&quot;456&quot;,10)); &gt;   - alert(parseInt(&quot;123abc456&quot;,10));       忽略后面的非数字的字符串 &gt;   - alert(&quot;十六进制换成十进制:&quot;+parseInt(&quot;0X123&quot;)); &gt;   - alert(&quot;八进制转换成十进制:&quot;+parseInt(&quot;0123&quot;,8)); &gt;   - alert(&quot;默认的进制:&quot;+parseInt(&quot;456&quot;));&gt;&gt; ##### parseFloat&gt;&gt; - 将一个字符串转换成对应的小数&gt;&gt; ##### isNaN&gt;&gt; - 检测parseInt和parseFloat函数返回的值是否是NaN&lt;font color&#x3D;red&gt;（非数字Not-a-Number）&lt;&#x2F;font&gt;&gt; ##### escape&gt;&gt; - 返回对一个字符串进行编码后的结果字符串。所有的空格、 标点、重音符号以及其他的非ASCII字符都用&lt;font color&#x3D;red&gt;%xx编码&lt;&#x2F;font&gt;替换，其中的xx等于表示该字符串的Unicode编码的十六进制数，字符值大于255的字符以%uxxxx格式存储&gt; - 用此方法可以实现简单的加密&gt;&gt; ##### unescape&gt;&gt; - 将一个用escape方法编码的结果字符串解码成原始的字符串并返回&gt; ##### eval:star::star::star::star::star:&gt;&gt; - 将其中的&lt;font color&#x3D;red&gt;参数字符串&lt;&#x2F;font&gt;作为一个JavaScript表达式执行&gt;&gt;   &#96;&#96;&#96;JavaScript&gt;   var msgFromServer &#x3D; &quot;alert(&#39;JavaScript真不错!&#39;)&quot;;&gt;   eval(msgFromServer);</code></pre></li></ul><h5 id="还有一些其他的JavaScript系统函数，在实际工作中如果需要使用到，到时候可以查询一些资料，在学习阶段没有必要全部学习掌握"><a href="#还有一些其他的JavaScript系统函数，在实际工作中如果需要使用到，到时候可以查询一些资料，在学习阶段没有必要全部学习掌握" class="headerlink" title="还有一些其他的JavaScript系统函数，在实际工作中如果需要使用到，到时候可以查询一些资料，在学习阶段没有必要全部学习掌握"></a>还有一些其他的JavaScript系统函数，在实际工作中如果需要使用到，到时候可以查询一些资料，在学习阶段没有必要全部学习掌握</h5><h1 id="七、对象"><a href="#七、对象" class="headerlink" title="七、对象"></a>七、对象</h1><h4 id="对象与对象实例"><a href="#对象与对象实例" class="headerlink" title="对象与对象实例"></a>对象与对象实例</h4><ul><li><p>对象中所包含的变量就是对象的<font color="red">属性</font>，对象中所包含的函数就是对象的<font color="red">方法</font>，对象的属性和方法都叫对象的<font color="red">成员</font>.</p></li><li><p>对象是对某一类事物的描述，是抽象的概念</p></li><li><p>对象实例是一类事物的具体个例</p></li><li><p>能够<strong>被用来创建对象实例的函数</strong>叫做<em><strong>对象的构造方法</strong></em>，只要定义了一个对象的构造函数，就等于定义了一个对象，使用new关键字和对象的构造函数就可以完成一个对象实例的创建</p><pre class="language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;    function Student()&#123;&#125;    var stu &#x3D; new Student();    stu.name &#x3D; &quot;zhangsan&quot;;    stu.age &#x3D; 23;    function introduct()&#123;        alert(stu.name+&quot;今年&quot;+stu[&quot;age&quot;]+&quot;岁&quot;);    &#125;    stu.introduct &#x3D; introduct;    stu.introduct();&lt;&#x2F;script&gt;</code></pre></li></ul><blockquote><ul><li>function Student(){}<ul><li>定义了一个构造函数，跟普通的函数很类似，为了区别开，我们这里使用了首字母大写的方式</li></ul></li><li>var stu = new Student();<ul><li>调用了Student()这个构造函数创建了一个Student对象的实例，并赋值给了stu变量</li></ul></li><li>stu.name = “zhangsan”;</li><li>stu.age = 25;<ul><li><font color="orange">动态地</font>为该实例添加了name和age两个属性</li><li>这个比Java要更加的随意，居然属性还能动态添加？强大!</li></ul></li><li>function introduct(){ alert(stu.name+”今年”+stu[“age”]+”岁”); }<ul><li>定义了一个普通的函数introduct</li><li>对象实例属性的访问方式有两种<ul><li>对象实例变量.属性名 </li><li>对象实例变量[“属性名”]，这种方式比较灵活，因为”属性名”可以被一个<font color="blue">变量</font>所代替，这样可以以一行代码的方式访问所有的对象实例属性</li></ul></li></ul></li><li>stu.introduct = introduct;<ul><li>这里又为对象实例动态地添加了introduct方法，并将之前的introduct函数直接赋值给它</li></ul></li><li>stu.introduct();<ul><li>访问对象实例的方法</li></ul></li></ul></blockquote><h4 id="构造方法与this关键字"><a href="#构造方法与this关键字" class="headerlink" title="构造方法与this关键字"></a>构造方法与this关键字</h4><ul><li><p>为一个对象实例新增的属性和方法，不会增加到同一个对象所产生的其他对象实例上</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stu1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>    stu1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>所有的实例对象在创建后都会自动调用构造函数，在构造函数中增加的属性和方法会被增加到每个对象实例上</p></li><li><p>对象实例是用new关键字创建的，在构造方法中不要有返回结果的return语句</p></li><li><p>调用对象的成员方法的时候，需要使用“对象实例.成员方法”的形式，用作成员方法的函数被调用时，一定伴随有某一个对象实例。this关键字代表某个成员方法执行时，引用该方法的当前对象实例，所以，this关键字一般只用在对象成员方法中</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>introduct <span class="token operator">=</span> introduct<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">introduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"今年"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token string">"岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu1<span class="token punctuation">.</span><span class="token function">introduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stu2<span class="token punctuation">.</span><span class="token function">introduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><h4 id="在函数中修改参数值"><a href="#在函数中修改参数值" class="headerlink" title="在函数中修改参数值"></a>在函数中修改参数值</h4><ul><li><p>将基本数据类型的变量作为函数参数传递的情况</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">changeValue</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">changeValue</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>将对象数据类型的变量作为函数参数传递的情况</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">changeValue</span><span class="token punctuation">(</span><span class="token parameter">stu</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"lisi"</span><span class="token punctuation">;</span>            stu<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">changeValue</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>stu<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//lisi,26</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>将基本数据类型的变量作为函数参数传递的时候，会将该值拷贝一份传递到函数内部去执行，不管对该拷贝的值做了任何的修改，都不会对原来的值造成任何的修改</p></li><li><p>将对象数据类型的变量作为函数参数传递的时候，会将该值也拷贝一份传递到函数内部去执行，只是这个拷贝与这个原来的值都是指向同一个对象实例，任何一方对其改变， 都会造成改变</p></li></ul><h1 id="八、JavaScript内置对象"><a href="#八、JavaScript内置对象" class="headerlink" title="八、JavaScript内置对象"></a>八、JavaScript内置对象</h1><h4 id="Object对象"><a href="#Object对象" class="headerlink" title="Object对象"></a>Object对象</h4><ul><li><p>Object对象提供了一种创建自定义对象的简单方式，不需要程序员再定义构造函数</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Object对象</span>    student<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class="language-html" data-language="html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      student<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"zhurui"</span><span class="token punctuation">;</span>      student<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">getAttributeValue</span><span class="token punctuation">(</span><span class="token parameter">attr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">alert</span><span class="token punctuation">(</span>student<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">getAttributeValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">getAttributeValue</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>#### String对象字符串对象- 参考文档：http://www.w3school.com.cn/jsref/jsref_obj_string.asp#### Math对象- Math对象是一个静态对象，不可以使用new关键字创建对象实例，应该直接使用“对象名.成员”的格式来访问其属性或者方法  参考文档： http://www.w3school.com.cn/jsref/jsref_obj_math.asp#### Date对象日期对象- 参考文档：http://www.w3school.com.cn/jsref/jsref_obj_date.asp### 数组#### 数组列表- 用于表示一组数据的集合- 由一对方括号（[ ]）包围，列表中的每一个元素用逗号分隔- 数组元素可以是任意类型的数据，甚至是另外一个数组  - var arr = ["zhangsan",25,true,'m'];- 对于每个数组变量，都有一个length属性，表示该数组中元素的个数- 使用“数组变量名[索引号]”的格式来访问每个数组元素- 数组列表中的第一个元素的索引号是0- 数组列表中的最后一个元素的索引号是数组length属性值 -1#### 用对象的方式实现数组```html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">MyArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"javaScript"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        str <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><h4 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h4><ul><li>构造函数<ul><li>Array()</li><li>Array(4)</li><li>Array(1,2,3,3.14)</li></ul></li><li>sort方法<ul><li>以自然顺序进行排序</li></ul></li><li>参考文档<ul><li><a href="http://www.w3school.com.cn/jsref/jsref_obj_array.asp">http://www.w3school.com.cn/jsref/jsref_obj_array.asp</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>50-CSS</title>
      <link href="/2022/02/28/50-CSS/"/>
      <url>/2022/02/28/50-CSS/</url>
      
        <content type="html"><![CDATA[<h1 id="一、CSS的简介"><a href="#一、CSS的简介" class="headerlink" title="一、CSS的简介"></a>一、CSS的简介</h1><ul><li>CSS是Cascading Style Sheets的简写，层叠样式表</li><li>可以轻松地设置网页元素的显示位置和格式外，甚至还可以产生滤镜、图像淡化、网页淡入淡出等渐变的效果</li><li>CSS就是对网页的显示效果的实现</li></ul><h1 id="二、CSS的设置方式"><a href="#二、CSS的设置方式" class="headerlink" title="二、CSS的设置方式"></a>二、CSS的设置方式</h1><h2 id="1-内联（内链）样式表"><a href="#1-内联（内链）样式表" class="headerlink" title="1.内联（内链）样式表"></a>1.内联（内链）样式表</h2><p><strong>HTML标签几乎都有一个style属性，将样式作为style 的值</strong></p><p><strong>样式的格式</strong></p><ul><li><p>样式名称：样式值；</p></li><li><p>样式与样式之间用分号（；）分割</p></li><li><p>样式名称和样式值之间用冒号（：）分割</p></li><li><p>```html</p><body>    <span style="color:red;font-family:宋体">内联样式</span></body><pre class="language-none"><code class="language-none">## 2.内部（嵌入）样式表**使用一个选择器将样式定义在head标签体中，并使用 style包裹**&#96;&#96;&#96;html&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;    &lt;style&gt;        div&#123;            background-color: black;            color:orange;            font-family: 宋体;        &#125;    &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;div&gt;        内部(嵌入)样式!!!    &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre></li></ul><h2 id="3-外部（引入）样式表"><a href="#3-外部（引入）样式表" class="headerlink" title="3.外部（引入）样式表"></a>3.外部（引入）样式表</h2><p><strong>首先编写一个style.css文件</strong></p><pre class="language-html" data-language="html"><code class="language-html">div&#123;background-color: black;color:orange;font-family: 宋体;&#125;</code></pre><p><strong>编写一个使用到这个样式表文件的网页文件，假设该网页文件与style.css在同一个目录下，则内容如下</strong></p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>style.css<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>外部(引入)样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>外部样式表会提高网页的浏览速度</strong></p><ul><li>浏览器会缓存样式文件</li><li>每次加载新的网页时，如果该网页仅仅只有要显示的内容， 而没有显示的样式，这样势必会比内联、嵌套样式表的方式要快</li><li>推荐使用外部（引入）样式表的方式</li></ul><h3 id="三种样式的优先级"><a href="#三种样式的优先级" class="headerlink" title="三种样式的优先级"></a><font color="red">三种样式的优先级</font></h3><blockquote><p>三种方式的设置样式，总样式应该是三种样式之和</p><p>相同样式的优先级：</p><ul><li>内联样式优先级最高</li><li>内部样式和外部样式，谁在文件中定义的位置靠后，就会覆盖前面的定义，从而起作用</li></ul></blockquote><h1 id="三、样式规则的选择器"><a href="#三、样式规则的选择器" class="headerlink" title="三、样式规则的选择器"></a>三、样式规则的选择器</h1><h2 id="1-html选择器"><a href="#1-html选择器" class="headerlink" title="1.html选择器"></a>1.html选择器</h2><ul><li>以html元素本身作为的选择器，如p（对应html的<code>&lt;p&gt;&lt;/p&gt;</code>段落标签），input（对应html的<code>&lt;input&gt;&lt;/input&gt;</code>输入标签）</li><li>当前网页中的所有的该元素标签的显示效果，都按照html 选择器中所定义的方式来显示</li></ul><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">            <span class="token selector">p</span><span class="token punctuation">&#123;</span>                <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>                <span class="token property">font-size</span><span class="token punctuation">:</span>30px<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            这是一个段落!        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="2-class选择器"><a href="#2-class选择器" class="headerlink" title="2.class选择器"></a>2.class选择器</h2><ul><li>在同一个网页中可以有多个元素标签的class属性会取相同的值，如此同名的元素标签将一起受class选择器里面样式的定义影响</li><li>类别选择器的定义需要以点号（.）开头</li></ul><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.cls1</span><span class="token punctuation">&#123;</span>                <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">div</span><span class="token punctuation">&#123;</span>                <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cls1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--这个div显示蓝色--></span>            div1        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cls1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cls1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--这个div显示红色--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>中华人民共和国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="3-id选择器"><a href="#3-id选择器" class="headerlink" title="3.id选择器"></a>3.id选择器</h2><ul><li>id属性用来定义某一个特定的html元素标签</li><li>一个网页中元素标签的id属性是唯一的</li><li>id选择器的定义需要以井号（#）开头</li></ul><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">            <span class="token selector">#green</span><span class="token punctuation">&#123;</span>                <span class="token property">color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中华人民共和国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="4-关联选择器-父子关系"><a href="#4-关联选择器-父子关系" class="headerlink" title="4.关联选择器(父子关系)"></a>4.关联选择器(父子关系)</h2><ul><li><p>用一个<em><strong>空格</strong></em>的两个或者更多的单一选择器组成的字符串</p></li><li><p>例如</p><ul><li>p em{background：yellow}</li><li>其中的”p em”就是关联选择器，它表示段落中的强调文本（<code>&lt;em&gt;&lt;/em&gt;</code>标签对中的内容）的背景为黄色，而其他地方出现的强调文本不受影响</li></ul></li><li><p>关联选择器定义的样式规则的优先级要大于单一选择器定义的样式规则</p><ul><li>p em{background：yellow}</li><li>em{background：blue}</li><li>段落中的强调文本的背景色为黄色</li></ul></li></ul><h2 id="5-组合选择器-平级关系"><a href="#5-组合选择器-平级关系" class="headerlink" title="5.组合选择器(平级关系)"></a>5.组合选择器(平级关系)</h2><ul><li>为了减少样式表的重复声明，可以在一条样式规则定义语句中组合若干个选择器，每个选择器之间用<em><strong>逗号</strong></em>隔开</li><li>例如：h1,h2,h3,h4,h5,hr{color: red}</li></ul><img src="/2022/02/28/50-CSS/image-20220301153317005.png" style="zoom:33%;" loading="lazy"><h2 id="6-伪元素选择器"><a href="#6-伪元素选择器" class="headerlink" title="6.伪元素选择器"></a>6.伪元素选择器</h2><ul><li>对同一个html元素的各种状态和其所包括的部分内容的一 种定义形式</li><li>例如：对于超链接（<code>&lt;a&gt;&lt;/a&gt;</code>）的正常状态（没有任何动作之前）、访问过的状态、选中状态、光标移动到超链接文本上的状态，对于段落的首字母和首行， 都可以使用伪元素选择器来定义</li></ul><p><strong>伪元素作为选择器的样式规则的定义格式</strong></p><ul><li>html元素：伪元素（属性：属性值）</li></ul><p><strong>常用的伪元素</strong></p><ul><li>a:link（超链接的正常状态）</li><li>a:hover（光标移动到超链接上时的状态）</li><li>a:active（选中超链接时的状态）</li><li>a:visited（访问过的超链接的状态）</li><li>p:first-line（段落中的第一行文本）</li><li>p:first-letter（段落中的第一个字母）</li></ul><p><strong>类选择器和伪元素选择器一起使用</strong></p><ul><li>html元素.类名: 伪元素{属性: 属性值}</li></ul><p><strong>伪元素选择器</strong></p><ul><li>a:link,a:visited{text-decoration:none}  超链接无下划线</li><li>a.class1:link,a.class1:visited{text-decoration:underline}</li></ul><h1 id="四、样式的常用属性"><a href="#四、样式的常用属性" class="headerlink" title="四、样式的常用属性"></a>四、样式的常用属性</h1><h2 id="1-颜色"><a href="#1-颜色" class="headerlink" title="1.颜色"></a>1.颜色</h2><h4>color</h4><ul><li>定义文本的颜色</li><li>取值<ul><li>color:green</li><li>color:#ff6600，color:#f60（简写形式）</li><li>color:rgb(0,255,0) </li><li>color:rgba(182,22,206,0.8)</li></ul></li><li>RGB<ul><li>红(R)、绿(G)、蓝(B) 每个的取值范围0~255</li></ul></li><li>RGBA<ul><li>RGBA是代表Red（红色）Green（绿色）Blue（蓝色）和Alpha的（色彩空间）透明度</li></ul></li></ul><h2 id="2-字体"><a href="#2-字体" class="headerlink" title="2.字体"></a>2.字体</h2><h4>font-size</h4><ul><li>字体大小</li><li>取值<ul><li>px：具体的像素值</li><li>%（百分比）：相对于父标签字体的大小，如果父标签的字体大小设置为40px，则 子标签字体大小的值为50%，则实际上是20px；如果子标签字体的大小的值为200%，则实际上是80px，它是一个相对的值</li><li>smaller：子标签字体比父标签字体更小</li><li>larger：子标签字体比父标签字体更大</li><li>inherit：子标签字体继承父标签字体大小，也就是父子标签的字体大小一样</li></ul></li></ul><h4>font-family</h4><ul><li>定义字体</li><li>取值<ul><li>“”微软雅黑”，”宋体””</li><li>可以使用“<code>,</code>”隔开，以确保当字体不存在的时候直接使用下一个</li></ul></li></ul><h4>font-weight</h4><ul><li>字体加粗</li><li>取值<ul><li>normal（默认值）、bold（粗）、bolder（更粗）、lighter（更细）</li><li>100、200、300、400、500、600、700、800、900<ul><li>400 = normal，700 = bold</li><li>只能是上述的9个整数的百值，不能使用其他数字</li></ul></li></ul></li></ul><h4>font-style</h4><ul><li>定义字体的样式</li><li>取值<ul><li>normal（标准）、italic（斜体）、oblique（倾斜）、inherit（继承）</li></ul></li></ul><h4>font-variant</h4><ul><li>定义字母大小写的显示样式</li><li>取值<ul><li>normal：标准</li><li>small-caps：小型大写字母显示格式</li><li>inherit：继承</li></ul></li></ul><h2 id="3-背景"><a href="#3-背景" class="headerlink" title="3.背景"></a>3.背景</h2><h4>background-color</h4><ul><li>定义背景颜色</li><li>取值<ul><li> color:green</li><li>color:#ff6600，color:#f60（简写形式）</li><li>color:rgb(0,255,0) </li><li>color:rgba(182,22,206,0.8)</li></ul></li></ul><h4>background-image</h4><ul><li>定义背景图片</li><li>取值<ul><li>url（图片路径）</li></ul></li></ul><h4>background-repeat</h4><ul><li>定义背景图片的重复方式</li><li>取值<ul><li>repeat：重复平铺满，默认</li><li>repeat-x：向x轴重复</li><li>repeat-y：向y轴重复</li><li>no-repeat：不重复</li></ul></li></ul><h4>background-position</h4><ul><li>定义背景图片的位置</li><li>取值<ul><li>横向：left、center、right</li><li>纵向：top、center、bottom</li><li>也可以使用像素值，表示距离左边、右边有多远</li></ul></li><li>横向和纵向要一起取值，如果只取一个值，则会在该值的后面默认加上一个center</li></ul><h4>background</h4><ul><li>定义背景相关样式</li><li>上面的格式background-xxx只能为某一种样式定义，如果全部都要定义比较繁琐，可以使用background样式一起定义</li><li><strong>以上所有背景的样式可以一起简写</strong></li><li>格式<ul><li>背景颜色 url （图像）重复 位置</li><li>background：#f60 url(images/bg.jpg) no-repeat top center</li></ul></li></ul><h2 id="4-文本"><a href="#4-文本" class="headerlink" title="4.文本"></a>4.文本</h2><h4>text-align</h4><ul><li>定义文本的横向排列方式</li><li>取值<ul><li>left、center、right</li></ul></li></ul><h4>line-height</h4><ul><li>定义文本的高度</li><li>取值<ul><li>%（百分比）：相对于字体大小的百分比行高</li><li>px<ul><li>像素值所定义的行高</li><li>默认值为0</li></ul></li></ul></li></ul><h4>text-indent</h4><ul><li>定义文本首行缩进的方式</li><li>取值<ul><li>%（百分比）：相对于父容器宽度的百分比进行缩进</li><li>px<ul><li>像素值是多少，就缩进多少个像素</li><li>默认值为0</li></ul></li><li>inherit：继承</li></ul></li></ul><h4>letter-spacing</h4><ul><li>定义文字之间的距离</li><li>取值<ul><li>normal：默认</li><li>px：设置具体的像素数值（可以设置负值，会出现重叠的现象）</li><li>inherit：继承</li></ul></li></ul><h4>word-spacing</h4><ul><li>定义单词之间的距离</li><li>取值<ul><li>normal：默认，标准距离</li><li>px：像素值</li><li>inherit：继承</li></ul></li></ul><h4>direction</h4><ul><li>定义文本的方向</li><li>取值<ul><li>ltr<ul><li>left to right 的缩写，从左到右</li><li>默认</li></ul></li><li>rtl<ul><li>right to left 的缩写，从右到左</li></ul></li><li>inherit：继承</li></ul></li></ul><h4>text-transform</h4><ul><li>定义文本的大小写</li><li>取值<ul><li>none：默认</li><li>capitalize：每个单词首字母大写</li><li>uppercase：所有字符全部大写</li><li>lowercase：所有字符全部小写</li><li>inherit：继承，根据父元素的text-transform值来显示</li></ul></li></ul><h2 id="5-边框"><a href="#5-边框" class="headerlink" title="5.边框"></a>5.边框</h2><h4>border-style</h4><ul><li>定义边框四周的风格</li><li>取值<ul><li>none：无边框</li><li>solid：直线边框</li><li>dashed：虚线边框</li><li>dotted：点状边框</li><li>double：双线边框</li><li>groove：groove边框</li><li>ridge：ridge边框</li><li>inset：inset边框</li><li>outset：outset边框</li><li>inherit：继承</li></ul></li><li>如果需要对边框的上、下、左、右分别定义，可以使用如下的样式<ul><li>border-top-style：上边边框样式</li><li>border-bottom-style：下边边框样式</li><li>border-left-style：左边边框样式</li><li>border-right-style：右边边框样式</li></ul></li></ul><h4>border-width</h4><ul><li>定义边框的宽度</li><li>取值<ul><li>thin：细边框</li><li>medium：中等边框</li><li>thick：粗边框</li><li>px：固定像素值的边框</li><li>inherit：继承</li></ul></li><li>如果需要对边框的上、下、左、右分别定义宽度，可以使用如下样式<ul><li>border-top-width：上边边框宽度</li><li>border-bottom-width：下边边框宽度</li><li>border-left-width：左边边框宽度</li><li>border-right-width：右边边框宽度</li></ul></li></ul><h4>border-color</h4><ul><li>定义边框的颜色</li><li>取值<ul><li>color:green </li><li>color:#ff6600，color:#f60（简写形式） </li><li>color:rgb(0,255,0) </li><li>color:rgba(182,22,206,0.8)</li></ul></li><li>如果需要对边框的上、下、左、右分别定义颜色，可以使用如下的样式<ul><li>border-top-color：上边边框颜色</li><li>border-bottom-color：下边边框颜色</li><li>border-left-color：左边边框颜色</li><li>border-right-color：右边边框颜色</li></ul></li><li>属性值的四种情况<ul><li>一个值<ul><li>border-color：（上、下、左、右）</li></ul></li><li>两个值<ul><li>border-color：（上下）（左右）</li></ul></li><li>三个值<ul><li>border-color：（上）（左、右）（下）</li></ul></li><li>四个值<ul><li>border-color：（上）（右）（下）（左）</li></ul></li></ul></li></ul><h4>简写方式</h4><ul><li>border：样式 宽度 颜色</li><li>border：solid 2px blue</li></ul><h2 id="6-列表"><a href="#6-列表" class="headerlink" title="6.列表"></a>6.列表</h2><h4>list-style-type</h4><ul><li>定义列表项标记的样式</li><li>有序列表和无序列表都可以使用的样式</li><li>取值<ul><li>none：没有字符图案，无序列表默认的实心圆点和有序列表默认的数字都没有了</li><li>disc：默认，无序列表默认是实心圆点，有序列表默认是数字</li><li>circle：空心圆</li><li>square：实心方块</li><li>decimal：数字</li><li>decimal-leading-zero：0开头的数字（01、02、03… )</li><li>lower-roman：小写罗马数字（i、ii、iii、iv、v…）</li><li>upper-roman：大写罗马数字（I、II、III、IV、V…)</li><li>lower-alpha：小写英文字母（a、b、c、d、e…）</li><li>upper-alpha：大写英文字母（A、B、C、D、E…）</li><li>lower-greek：小写希腊字母（alpha、beta、gamma…）</li><li>lower-latin：小写拉丁字母（a、b、c、d、e…）</li><li>upper-latin：大写拉丁字母（A、B、C、D、E…）</li><li>hebrew：传统的希伯来编号</li><li>armenian：传统的亚美尼亚编号</li><li>georgian：传统的乔治亚编号（an、ban、gan…）</li><li>cjk-ideographic：简单的表意数字</li><li>hiragana：小写的日本语元音编号（a、i、u、e、o、ka、ki…）</li><li>katakana：大写的日本语元音编号（A、I、U、E、O、KA、KI…）</li><li>hiragana-iroha：小写的日本语元音编号（i、ro、ha、ni、ho、he、to…）</li><li>katakana-iroha：大写的日本语元音编号（I、RO、HA、NI、HO、HE、TO…）</li></ul></li></ul><h4>list-style-position</h4><ul><li>定义列表项标记的位置<ul><li>inside：列表项目标记放置在文本以内，且环绕文本根据标记对齐</li><li>outside：默认值，保持标记位于文本的左侧。列表项目标记放置在文本以外， 且环绕文本不根据标记对齐</li><li>inherit：继承</li></ul></li></ul><h4>list-style-image</h4><ul><li>定义列表项标记的图片<ul><li>URL：图像的路径</li><li>none：默认，无图像被显示</li><li>inherit：继承</li></ul></li></ul><h4>简写方式</h4><ul><li>list-style-：样式 位置 图片</li><li>list-style:square inside url(‘images/bg.jpg’)</li></ul><h1 id="五、DIV-CSS布局"><a href="#五、DIV-CSS布局" class="headerlink" title="五、DIV+CSS布局"></a>五、DIV+CSS布局</h1><h2 id="1-div和span"><a href="#1-div和span" class="headerlink" title="1.div和span"></a>1.div和span</h2><ul><li>div和span在整个html标签中没有任何意义，他们的存在就是为了应用css样式</li><li>div和span的区别在于span是内联元素，div是块级元素</li></ul><h2 id="2-盒子模型"><a href="#2-盒子模型" class="headerlink" title="2.盒子模型"></a>2.盒子模型</h2><ul><li>margin：盒子外边距</li><li>padding：盒子内边距</li><li>border：盒子边框宽度</li><li>width：盒子宽度</li><li>height：盒子高度</li></ul><img src="/2022/02/28/50-CSS/image-20220301175955610.png" alt style="zoom:50%;" loading="lazy"><h2 id="3-布局相关属性"><a href="#3-布局相关属性" class="headerlink" title="3.布局相关属性"></a>3.布局相关属性</h2><h4>z-index</h4><ul><li>定义层的优先级顺序</li><li>默认值为0，数值越大越在上面</li></ul><h4>display</h4><ul><li>定义层的显示方式</li><li>取值<ul><li>none：不显示</li><li>block：<ul><li>块状显示，在元素的后面换行显示下一个元素</li><li>可以实现span到div的显示效果的转换</li><li>此时设置元素的宽与高属性能起效果</li></ul></li><li>inline：<ul><li>内联显示，在元素的后面空格显示下一个元素，多个这种样式的元素可以实现一行显示</li><li>可以实现div到span显示效果的转换</li><li>此时再设置元素的宽与高属性已经无效</li></ul></li></ul></li></ul><h4>float</h4><ul><li>定义层的浮动</li><li>取值<ul><li>left：向左浮动</li><li>right：向右浮动</li></ul></li></ul><h4>clear</h4><ul><li>定义层清除浮动</li><li>取值<ul><li>both：清除全部的浮动</li></ul></li></ul><h4>overflow</h4><ul><li>定义层的溢出，如果层里面的内容超出了层的大小，可以指定层内部内容的显示方式</li><li>取值<ul><li>hidden：隐藏超出层大小的内容 </li><li>scroll：无论层内部的内容有没有超出层的大小，始终会显示一个滚动条</li><li>auto：当层内部的内容超出层的大小才会显示一个滚动条</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>49-HTML框架和表单</title>
      <link href="/2022/02/26/49-HTML%E6%A1%86%E6%9E%B6%E5%92%8C%E8%A1%A8%E5%8D%95/"/>
      <url>/2022/02/26/49-HTML%E6%A1%86%E6%9E%B6%E5%92%8C%E8%A1%A8%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h1 id="一、HTML的框架-已弃用"><a href="#一、HTML的框架-已弃用" class="headerlink" title="一、HTML的框架(已弃用)"></a>一、HTML的框架(已弃用)</h1><h4 id="框架-分帧-的作用"><a href="#框架-分帧-的作用" class="headerlink" title="框架(分帧)的作用"></a>框架(分帧)的作用</h4><ul><li>将一个浏览器文档窗口分隔成多个窗口，每个窗口中都可 以显示一个独立的网页文件</li><li><img src="/2022/02/26/49-HTML%E6%A1%86%E6%9E%B6%E5%92%8C%E8%A1%A8%E5%8D%95/image-20220228191903865.png" loading="lazy"></li></ul><h4 id="框架中的各个页面"><a href="#框架中的各个页面" class="headerlink" title="框架中的各个页面"></a>框架中的各个页面</h4><blockquote><p><strong>index.html</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>frameset rows<span class="token operator">=</span><span class="token string">"20%,*,10%"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>frame src<span class="token operator">=</span><span class="token string">"top.html"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>frameset cols<span class="token operator">=</span><span class="token string">"20%,*"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>frame src<span class="token operator">=</span><span class="token string">"left.html"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>frame name<span class="token operator">=</span><span class="token string">"content"</span> src<span class="token operator">=</span><span class="token string">"main_emp.html"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>frameset<span class="token operator">></span>    <span class="token operator">&lt;</span>frame src<span class="token operator">=</span><span class="token string">"bottom.html"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>frameset<span class="token operator">></span></code></pre><p><strong>left.html</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>head<span class="token punctuation">></span></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>title<span class="token punctuation">></span></span>框架学习<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>h3<span class="token punctuation">></span></span>功能菜单<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"main_dept.html"</span> target<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>部门管理<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"main_position.html"</span> target<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>职位管理<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"main_salary.html"</span> target<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>薪资管理<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"main_emp.html"</span> target<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>员工管理<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"main_checkingIn.html"</span> target<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>考勤管理<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"main_advice.html"</span> target<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>意见管理<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"main_permission.html"</span> target<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>权限管理<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre></blockquote><h3 id="lt-frameset-gt-lt-frameset-gt-标签"><a href="#lt-frameset-gt-lt-frameset-gt-标签" class="headerlink" title="&lt;frameset&gt;&lt;/frameset&gt;标签"></a><code>&lt;frameset&gt;&lt;/frameset&gt;</code>标签</h3><ul><li>框架标签，框架集的根标签，可以指定子页面、框架集的排列方式和分布的比例</li><li><font color="red">可以是html标签的子标签，也可以作为根标签</font></li><li><font color="red">不可以作为body标签的子标签</font></li><li>除了frame标签与frameset标签之外不可以再包含其他的html标签</li></ul><p><strong>属性</strong></p><ul><li>cols<ul><li>垂直方向上分配子窗口，像素或者是父窗口的百分比</li><li>使用“像素数”和%分割左右窗口，“*”表示剩余部分，比如：如果使用”*,*“表示框架平均分成2个部分，如果使用“*,*,*“表示平均分成三个部分</li></ul></li><li>rows<ul><li>水平方向上分配子窗口，…….同上</li></ul></li><li>frameborder<ul><li>指定是否显示边框，默认值为1，0-不显示</li></ul></li><li>border<ul><li>设置边框的大小，默认值5像素</li></ul></li></ul><h3 id="lt-frame-gt-标签"><a href="#lt-frame-gt-标签" class="headerlink" title="&lt;frame/&gt;标签"></a><code>&lt;frame/&gt;</code>标签</h3><ul><li>具体的一个帧，由该标签绑定具体的网页， <code>&lt;frame&gt;</code>标记是一个单标记，该标记必须放在<code>&lt;frameset&gt;&lt;/frameset&gt;</code>中使用， 在<code>&lt;frameset&gt;</code>中设置了几个窗口，就必须对应使用几个<code>&lt;frame&gt;</code>框架，而且还必须使用src属性指定一个网页</li></ul><p><strong>属性</strong></p><ul><li>src<ul><li>网页URL地址</li></ul></li><li>name<ul><li>名称，target指向该名称的网页会替换</li></ul></li><li>scrolling<ul><li>是否显示子窗口的滚动条，默认是自适应，auto-根据需求自动出现，yes-有，no-无</li></ul></li><li>noresize<ul><li>是否允许使用鼠标拖拽子窗口改变其大小，不设置该属性表示可拖拽，设置该属性（值一定是noresize）表示不可拖拽</li></ul></li><li>frameborder<ul><li>指定是否显示边框，1-显示，0-不显示 </li></ul></li></ul><h3 id="lt-noframes-gt-lt-noframes-gt-标签"><a href="#lt-noframes-gt-lt-noframes-gt-标签" class="headerlink" title="&lt;noframes&gt;&lt;/noframes&gt;标签"></a><code>&lt;noframes&gt;&lt;/noframes&gt;</code>标签</h3><ul><li>如果客户端的浏览器不支持框架集，可以使用该标签，在里面注明一些提示性的文字；如果支持，这些文字则不会 显示</li></ul><h3 id="lt-iframe-gt-lt-iframe-gt-标签"><a href="#lt-iframe-gt-lt-iframe-gt-标签" class="headerlink" title="&lt;iframe&gt;&lt;/iframe&gt;标签"></a><code>&lt;iframe&gt;&lt;/iframe&gt;</code>标签</h3><ul><li>不属于frameset标签的子标签</li><li>在一个已经存在的网页中使用<code>&lt;iframe&gt;</code>再嵌套一个页面，实现画中画的感觉</li></ul><p><strong>属性</strong></p><ul><li>类似<code>&lt;frame&gt;</code>标签</li></ul><h1 id="二、HTML的表单"><a href="#二、HTML的表单" class="headerlink" title="二、HTML的表单"></a>二、HTML的表单</h1><h3 id="lt-form-gt-lt-form-gt-标签"><a href="#lt-form-gt-lt-form-gt-标签" class="headerlink" title="&lt;form&gt;&lt;/form&gt;标签"></a><code>&lt;form&gt;&lt;/form&gt;</code>标签</h3><ul><li>被form标签所包裹的表单标签，用户填写好信息之后， 点击链接或者按钮，会将这些信息发送到服务器，服务器端程序根据这些信息处理完业务逻辑之后，再返回客户端一个新的页面</li><li>属性<ul><li><font color="red">action</font>.<ul><li><font color="red">设置接收或者处理浏览器递交的表单内容的服务器程序的URL，如果为空则使用当前文档的URL地址，如果表单中不需要使用action属性 也要指定其属性为”no”</font></li></ul></li><li><font color="red">method</font><ul><li><font color="red">定义浏览器将表单中的信息提交到服务器端的处理程序的方式，一般取值为post或get。</font>.</li><li><font color="red">get方式提交时，会将表单的内容附加在URL地 址的后面，所以限制了提交的内容的长度，不超过8192个字符，在url的后面能看见，所以不具备保密性。</font>.</li><li><font color="red">post方式提交时，将表单中的数据一并包含在表单的头中，一起传送到服务器中处理，没有数据大小限制，因为在html的头中，所以看不见，具有保密性</font>.</li></ul></li><li>target<ul><li>指定服务器返回结果显示的目标窗口或者框架集窗口</li></ul></li><li>title<ul><li>设置当网站访问者的鼠标在表单上的任一位置停留几秒钟时，浏览器用黄色小浮标显示的文本</li></ul></li><li>enctype<ul><li>浏览器使用哪种编码方式将表单数据发送到服务器<ul><li>application/x-www-form-urlencoded（默认值）</li><li>multipart/form-data（上载时需要改成该值）</li></ul></li></ul></li></ul></li></ul><h3 id="lt-input-gt-lt-input-gt-标签"><a href="#lt-input-gt-lt-input-gt-标签" class="headerlink" title="&lt;input&gt;&lt;/input&gt;标签"></a><code>&lt;input&gt;&lt;/input&gt;</code>标签</h3><ul><li>输入表单标签，根据type的取值不同，显示不同的效果</li><li>属性<ul><li>name<ul><li>为该标签取名称，后台程序会根据该名称获取值</li></ul></li><li>value<ul><li>该标签所显示的值</li></ul></li><li>size<ul><li>调整输入框的宽度</li></ul></li><li>maxlength<ul><li>可提供输入文本的最长长度</li></ul></li><li>disabled<ul><li>是否可获取焦点，设置该属性并且值为disabled表示不可获取焦点，不设置则可以获取焦点</li></ul></li><li>readonly<ul><li>是否可编辑，设置该属性并且值为readonly表示只读，不设置则不是 只读</li></ul></li><li>checked<ul><li>单选按钮、复选框是否被选中，设置该属性并且值为checked表示选中，不设置则不选中</li></ul></li><li><font color="red">type</font><ul><li>可以有如下一些取值，不同的取值可以显示不同外观</li><li>text：文本</li><li>password：密码</li><li>radio：单选按钮</li><li>checkbox：复选按钮</li><li>image：显示一个图像，src属性指定图像的具体位置。该标签也有submit提交按钮的功效，会将所有信息已经鼠标点击图片时的x、y轴的坐标发送到服务器端</li><li>file：显示一个不可编辑的文本输入框与一个文件选择器的按钮，选择好的文件的绝对路径的地址会显示在文本框中</li><li>submit：提交按钮</li><li>reset：重置按钮</li><li>button：普通按钮</li><li>hidden：隐藏域</li></ul></li></ul></li></ul><h3 id="lt-select-gt-lt-select-gt-标签"><a href="#lt-select-gt-lt-select-gt-标签" class="headerlink" title="&lt;select&gt;&lt;/select&gt;标签"></a><code>&lt;select&gt;&lt;/select&gt;</code>标签</h3><ul><li>下拉列表，option子标签提供下拉列表项</li><li>属性<ul><li>name：取名称</li><li>multiple：是否提供可以多选，取值为multiple表示可以多选，如果不设置则只能选择一个</li><li>size：设置列表框中可以看见的列项，默认值为1</li></ul></li><li><h4 id="option子标签"><a href="#option子标签" class="headerlink" title="option子标签"></a>option子标签</h4><ul><li>option的value属性<ul><li>选中该选项的值</li></ul></li><li>option的selected属性<ul><li>取值selected为默认选中，如果不设置该属性则不选中</li></ul></li></ul></li></ul><h3 id="lt-textarea-gt-lt-textarea-gt-标签"><a href="#lt-textarea-gt-lt-textarea-gt-标签" class="headerlink" title="&lt;textarea&gt;&lt;/textarea&gt;标签"></a><code>&lt;textarea&gt;&lt;/textarea&gt;</code>标签</h3><ul><li>文本输入域，多行文本域</li><li>该标签无value属性，默认值可以在起始标签与结束标签之间填写</li><li>属性<ul><li>name：取名称</li><li>cols：输入域所占的列数</li><li>rows：输入域所占的行数</li></ul></li><li>禁止拖拽<ul><li>style=”resize:none;”</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>48-HTML</title>
      <link href="/2022/02/24/48-HTML/"/>
      <url>/2022/02/24/48-HTML/</url>
      
        <content type="html"><![CDATA[<h1 id="一、HTML简介"><a href="#一、HTML简介" class="headerlink" title="一、HTML简介"></a>一、HTML简介</h1><p><strong>html</strong></p><ul><li>HTML是英文<strong>Hyper Text Markup Language</strong>（超文本标记语言）的缩写</li></ul><p><strong>网页</strong></p><ul><li>显示使用HTML编写好文件，该文件一般以html、htm、 xhtml为后缀名</li></ul><hr><p><strong>不同的浏览器之间的不兼容问题</strong></p><ul><li>Firefox</li><li>IE</li><li>Chrome</li><li>Opera</li></ul><p>一个同样的标签，可能实现额外的功能或者显示</p><hr><p><strong>由谁来制定规则</strong></p><p>IETF    W3C</p><p><strong>当前版本</strong></p><p>HTML4.01    XHTML    HTML5</p><p><strong>html的保存格式</strong></p><p>.html    .htm    .xhtml</p><h1 id="二、HTML的标签和属性"><a href="#二、HTML的标签和属性" class="headerlink" title="二、HTML的标签和属性"></a>二、HTML的标签和属性</h1><p><strong>标签和标签内部的内容构成html文档</strong></p><ul><li><strong>成对标签</strong><ul><li>以&lt;标签名&gt;开始，以&lt;/标签名&gt;结束</li><li>又称之为容器标签，一对标签的内部还可以嵌套其他的标签，这些所有内部的标签统称为该标签的标签体</li></ul></li><li><strong>单标签</strong><ul><li>无标签体的标签</li></ul></li><li>html元素<ul><li>一个html标签以及该标签的标签体的总称</li></ul></li></ul><hr><p><strong>html的属性</strong></p><ul><li><p>标签的属性，就是用来控制我们的内容（图像、文本等的） 如何的显示</p></li><li><p>格式</p><ul><li>属性名=属性值</li><li><font color="red">属性值可以使用单引号、双引号包裹起来</font></li></ul></li><li><p>例如</p><ul><li><code>&lt;body bgcolor=&quot;red&quot;&gt;内容&lt;/body&gt;</code></li><li>以上的属性是用来控制我们的网页的背景颜色，bgcolor就是body的属性，他的值是red（红色）</li></ul></li></ul><p><strong>标签、属性、属性值建议使用小写</strong></p><p><strong>标签对大小写不敏感（不区分大小写）</strong></p><p><code>&lt;HTML&gt;</code> <code>&lt;Html&gt;</code> <code>&lt;html&gt;</code>都是定义相同的标签</p><h1 id="三、HTML的注释"><a href="#三、HTML的注释" class="headerlink" title="三、HTML的注释"></a>三、HTML的注释</h1><p>注释一段内容时使用    <code>&lt;!--注释内容--&gt;</code></p><p><font color="red">不支持嵌套</font></p><h1 id="四、HTML的代码格式"><a href="#四、HTML的代码格式" class="headerlink" title="四、HTML的代码格式"></a>四、HTML的代码格式</h1><p>空格键和回车键在网页中都不会起到任何作用，我们为了让代码清晰易读，可以使用空格和回车键进行编排</p><p>注意：缩进时保持严格的规则，以”Tab”键进行缩进</p><h1 id="五、HTML的实体"><a href="#五、HTML的实体" class="headerlink" title="五、HTML的实体"></a>五、HTML的实体</h1><p><img src="/2022/02/24/48-HTML/image-20220225163510883.png" loading="lazy"></p><h1 id="六、HTML的基本结构"><a href="#六、HTML的基本结构" class="headerlink" title="六、HTML的基本结构"></a>六、HTML的基本结构</h1><h2 id="1-html标签"><a href="#1-html标签" class="headerlink" title="1.html标签"></a>1.html标签</h2><ul><li>含义<ul><li>html文档的文档标签，也称为html开始标签</li></ul></li><li>功能<ul><li>这对标签分别位于网页的最前端和最后端</li><li><html>在最前端表示网页的开始 </html></li><li>在最后端表示网页的结束</li></ul></li></ul><h2 id="2-head标签"><a href="#2-head标签" class="headerlink" title="2.head标签"></a>2.head标签</h2><ul><li>含义<ul><li>head文件头标签，也称为head头信息开始标签</li></ul></li><li>功能<ul><li>用来包含文件的基本信息，比如网页的标题、关键字，在<code>&lt;head&gt;&lt;/head&gt;</code>内可以放<code>&lt;title&gt;&lt;/title&gt;、&lt;meta&gt;&lt;/meta&gt; 、&lt;style&gt;&lt;/style&gt;</code>等标签</li></ul></li><li>注意<ul><li>在<code>&lt;head&gt;&lt;/head&gt;</code>标签内的内容不会在浏览器中显示</li></ul></li></ul><h2 id="3-title标签"><a href="#3-title标签" class="headerlink" title="3.title标签"></a>3.title标签</h2><ul><li>含义<ul><li>html文件标题标签</li></ul></li><li>功能<ul><li>网页的”主题” ，显示在浏览器的窗口的左上边</li></ul></li><li>注意<ul><li>网页的标题不能太长，要短小精悍，能具体反应页面的内容，<code>&lt;title&gt;&lt;/title&gt;</code>标记中不能包含其他标记</li></ul></li></ul><h2 id="4-meta标签"><a href="#4-meta标签" class="headerlink" title="4.meta标签"></a>4.meta标签</h2><ul><li>含义<ul><li>页面的元信息（meta-information）</li></ul></li><li>功能<ul><li>提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词</li></ul></li><li>必须的属性<ul><li><font color="red">content，值为name属性的相关描述</font></li></ul></li><li>常见的属性<ul><li>author、keyword、description、others</li><li>例如<ul><li>比如描绘出网页的关键词：<code>&lt;meta name=&quot;author&quot; content=&quot;ZR&quot;&gt;</code></li></ul></li></ul></li><li>注意<ul><li>meta标签必须放在head元素里面</li></ul></li></ul><h2 id="5-body标签"><a href="#5-body标签" class="headerlink" title="5.body标签"></a>5.body标签</h2><ul><li>含义<ul><li>html文档的主体标签</li></ul></li><li>功能<ul><li><code>&lt;body&gt;...&lt;/body&gt;</code>是网页的主体部分，在此标签之间可以包含如<code>&lt;p&gt;&lt;/p&gt;、&lt;h1&gt;&lt;/h1&gt;、&lt;br&gt;、&lt;hr&gt;</code>等标签，正式由这些内容组成了我们看见的网页</li></ul></li><li>常见属性<ul><li>bgcolor：设置背景颜色<ul><li><code>&lt;body bgcolor=&quot;red&quot;&gt;&lt;/body&gt;</code></li></ul></li><li>text：设置文本颜色<ul><li><code>&lt;body text=&quot;green&quot;&gt;&lt;/body&gt;</code></li></ul></li><li>link：设置链接的颜色<ul><li><code>&lt;body link=&quot;blue&quot;&gt;&lt;/body&gt;</code></li></ul></li><li>vlink：设置已经访问过了的链接的颜色<ul><li><code>&lt;body vlink=&quot;yellow&quot;&gt;&lt;/body&gt;</code></li></ul></li><li>alink：设置正在被点击的链接的颜色<ul><li><code>&lt;body alink=&quot;red&quot;&gt;&lt;/body&gt;</code></li></ul></li></ul></li></ul><h1 id="七、HTML的文档标签"><a href="#七、HTML的文档标签" class="headerlink" title="七、HTML的文档标签"></a>七、HTML的文档标签</h1><h2 id="1-html的格式标签"><a href="#1-html的格式标签" class="headerlink" title="1.html的格式标签"></a>1.html的格式标签</h2><blockquote><p><strong>br</strong></p><ul><li>强制换行标签</li><li>让后面的文字、图片、表格等等，显示在下一行</li></ul><p><strong>p</strong></p><ul><li>段落标签</li><li>段落，由于多个空格和回车在HTML中会被等效为一个空格，所以HTML中要换段落就要用<code>&lt;p&gt;</code>，<code>&lt;p&gt;</code>段落中也可以包含<code>&lt;p&gt;</code>段落</li><li>align属性<ul><li>left    center    right</li></ul></li></ul><p><strong>center</strong></p><ul><li>居中对齐标签</li><li>让段落或者是文字相对于父标签居中显示</li></ul><p><strong>pre</strong></p><ul><li>预格式化标签</li><li>保留预先编排好的格式</li></ul></blockquote><hr><blockquote><p><strong>li</strong></p><ul><li>列表项目标签</li><li>每一个列表使用一个</li><li>标签</li></ul><p><strong>ul</strong></p><ul><li>无序列表标签</li><li>声明这个列表没有序号</li></ul><p><strong>ol</strong></p><ul><li><p>有序列表标签</p></li><li><p>可以显示特定的一些顺序</p><ul><li><p>格式</p><ul><li><pre><code class="html">&lt;ol type=&quot;符号类型&quot;&gt;    &lt;li type=&quot;符号类型&quot;&gt;&lt;/li&gt;    &lt;li type=&quot;符号类型&quot;&gt;&lt;/li&gt;&lt;/ol&gt;</code></pre></li></ul></li><li><p>有序列表的type属性值</p><ul><li>1：阿拉伯数字1,2,3等，默认的type属性值</li><li>A：大写字母A，B，C等</li><li>a：小写字母a，b，c等</li><li>I：大写罗马数字Ⅰ，Ⅱ，Ⅲ，Ⅳ，Ⅴ等</li><li>i：小写罗马数字i，ii，iii，iv，v等</li></ul></li><li><p>value：指定一个新的序列数字起始值</p></li><li><p>列表可以进行嵌套</p></li></ul></li></ul><img src="/2022/02/24/48-HTML/image-20220225181007451.png" style="zoom: 50%;" loading="lazy"></blockquote><hr><blockquote><p><strong>dl、dt、dd</strong></p><ul><li><code>&lt;dl&gt;&lt;/dl&gt;</code>:创建普通的列表</li><li><code>&lt;dt&gt;&lt;/dt&gt;</code>:创建列表的上层项目</li><li><code>&lt;dd&gt;&lt;/dd&gt;</code>:创建列表的下层项目</li></ul><img src="/2022/02/24/48-HTML/image-20220225181105947.png" style="zoom:50%;" loading="lazy"></blockquote><hr><blockquote><p><strong>hr</strong></p><ul><li>水平分割线标签</li><li>段落之间的分割线</li></ul><p><strong>div</strong></p><ul><li>分区显示标签，也称之为块标签</li><li>常用来编排一大段的HTML段落，也可以用于格式化表， 和<p>很相似</p></li><li>块可以多层嵌套使用</li></ul><p><strong>span</strong></p><ul><li>分区显示标签</li><li>和div相似，<font color="red">但是没有换行作用</font>.</li></ul></blockquote><h2 id="2-html的文本标签"><a href="#2-html的文本标签" class="headerlink" title="2.html的文本标签"></a>2.html的文本标签</h2><blockquote><p>hn</p><ul><li>标题标签</li><li>共有6个级别，n的范围1~6，不同级别对应显示大小不同的标题</li></ul><p>font</p><ul><li>字体设置标签</li><li>设置字体的格式</li><li>常用属性<ul><li>size（字体大小）<font color="red">1~7px</font><ul><li><code>&lt;font size=&quot;7px&quot;&gt;</code></li></ul></li><li>color（颜色）<ul><li><code>&lt;font color=&quot;red&quot;&gt;</code></li></ul></li><li>face（字体）<ul><li><code>&lt;font face=&quot;微软雅黑&quot;&gt;</code></li></ul></li></ul></li></ul></blockquote><blockquote><ul><li><p>b 粗字体标签</p></li><li><p>i 斜字体标签</p></li><li><p>sub 文字下标字体标签</p></li><li><p>sup 文字上标字体标签</p></li><li><p>tt 打印机字体标签</p></li><li><p>cite 引用方式的字体，通常是斜体</p></li><li><p>em 表示强调，通常显示为斜体字</p></li><li><p>strong 表示强调，通常显示为粗体字</p></li><li><p>small 小型字体标签</p></li><li><p>big 大型字体标签</p></li><li><p>u 下划线字体标签</p></li></ul></blockquote><h1 id="八、HTML的图像标签"><a href="#八、HTML的图像标签" class="headerlink" title="八、HTML的图像标签"></a>八、HTML的图像标签</h1><h3 id="img标签"><a href="#img标签" class="headerlink" title="img标签"></a>img标签</h3><ul><li>格式<ul><li><code>&lt;img src=&quot;路径/文件名.图片格式&quot; width=&quot;属性值&quot; height=&quot;属性值&quot; border=&quot;属性值&quot; alt=&quot;属性值&quot;&gt;</code></li></ul></li><li>常用属性<ul><li>src：指定我们要加载的图片的路径和图片的名称以及图片格式</li><li>width：指定图片的宽度，单位px、em、cm、mm</li><li>height：指定图片的高度，单位px、em、cm、mm</li><li>border：指定图标的边框宽度，单位px、em、cm、mm</li><li>alt：<ul><li>当网页上的图片被加载完成后，鼠标移动到上面去，会显示这个图片指定的属性文字</li><li>如果图像没有下载或者加载失败，会用文字来代替图像显示</li><li>搜索引擎可以通过这个属性的文字来抓取图片</li></ul></li></ul></li><li>注意<ul><li><img>为单标签，不需要使用闭合</li loading="lazy"><li>在加载图像文件的时候，文件的路径或者文件名文件格式错误，将无法加载图片</li></ul></li></ul><h1 id="九、HTML的超链接"><a href="#九、HTML的超链接" class="headerlink" title="九、HTML的超链接"></a>九、HTML的超链接</h1><h3 id="href属性"><a href="#href属性" class="headerlink" title="href属性"></a>href属性</h3><ul><li>格式<ul><li><code>&lt;a href=&quot;&quot; target=&quot;打开方式&quot; name=&quot;页面锚点名称&quot;&gt;链接文字或者图片&lt;/a&gt;</code></li></ul></li><li>常用属性<ul><li>href<ul><li>链接的地址，链接的地址可以是一个网页，也可以是一个视频、 图片、音乐等等</li></ul></li><li>target<ul><li>定义超链接的打开方式</li><li>属性值<ul><li>_blank：在一个新的窗口中打开链接</li><li>_self：在当前窗口中打开链接，默认值</li><li>_parent：在父窗口中打开页面（框架中使用较多）</li><li>_top：在顶层窗口中打开文件（框架中使用较多）</li></ul></li><li>注意：如果是在同一个frameset中，<code>_parent</code>与<code>_top</code>的效果是一 样的，只有在多个html文件中包含frameset，<code>_parent</code>与<code>_top</code>才 会有区别</li></ul></li><li>name<ul><li>指定页面的锚点名称</li></ul></li></ul></li><li>超链接的定位<ul><li>多个网页的定位<ul><li><font color="red">取标记</font><ul><li><code>&lt;a name=&quot;mark&quot;&gt;</code></li><li><code>&lt;a href=&quot;6.html#mark&quot;&gt;6.html&lt;/a&gt;</code></li></ul></li></ul></li><li>同一个网页内部的定位<ul><li><code>&lt;a href=&quot;#&quot;&gt;自己&lt;/a&gt;</code>打开网页本身</li><li><code>&lt;a href=&quot;&quot;&gt;空白&lt;/a&gt;</code>打开网页本身</li></ul></li></ul></li></ul><h1 id="十、HTML的表格"><a href="#十、HTML的表格" class="headerlink" title="十、HTML的表格"></a>十、HTML的表格</h1><h3 id="table标签"><a href="#table标签" class="headerlink" title="table标签"></a>table标签</h3><ul><li>格式<ul><li><code>&lt;table 属性1=&quot;属性值1&quot; 属性2=&quot;属性值2&quot;... ...&gt;表格内容&lt;/table&gt;</code></li></ul></li><li>常用属性<ul><li>width<ul><li>表示表格的宽度，它的值可以是像素（px）也可以是父级元素的百分比（%）</li></ul></li><li>height<ul><li>表示表格的高度，它的值可以是像素（px）也可以是父级元素的百分比（%）</li></ul></li><li>border<ul><li>表示表格外边框的宽度</li></ul></li><li>align<ul><li>表格的显示位置</li><li>取值：<ul><li>left：居左显示</li><li>center：居中显示</li><li>right：居右显示</li></ul></li></ul></li><li>cellspacing<ul><li>单元格之间的间距，默认是2px，单位是像素</li></ul></li><li>cellpadding<ul><li>单元格内容与单元格边框的显示距离，单位是像素</li></ul></li><li>frame<ul><li>控制表格外边框最外层的四条线框</li><li>取值：<ul><li>void：无边框，默认值</li><li>above：仅有顶部边框</li><li>below：仅有底部边框</li><li>hsides：仅有顶部边框和底部边框</li><li>lhs：仅有左侧边框</li><li>rhs：仅有右侧边框</li><li>vsides：仅有左右侧边框</li><li>box：包含全部4个边框</li><li>border：包含全部4个边框</li></ul></li></ul></li><li>rules<ul><li>控制是否显示以及如何显示单元格之间的分割线</li><li>取值：<ul><li>none：无分割线，默认值</li><li>all：包括所有分割线</li><li>rows：仅有行分割线</li><li>clos：仅有列分割线</li><li>group：仅在行组和列组之间有分割线</li></ul></li></ul></li></ul></li></ul><h3 id="caption标签"><a href="#caption标签" class="headerlink" title="caption标签"></a>caption标签</h3><ul><li>作用：给表格一个标题</li><li>格式<ul><li><code>&lt;caption&gt;</code>属性的插入位置，直接位于<code>&lt;table&gt;</code>属性之后，<code>&lt;tr&gt;</code>表格行之前</li></ul></li><li>常用属性<ul><li>align<ul><li>取值：<ul><li>top：标题放在表格的上部</li><li>bottom：标题放在表格的下部</li><li>left：标题放在表格的左部</li><li>right：标题放在表格的右部</li></ul></li></ul></li></ul></li></ul><h3 id="tr标签"><a href="#tr标签" class="headerlink" title="tr标签"></a>tr标签</h3><ul><li>作用：定义表格的一行，对于每一个表格行，都是由一对<code>&lt;tr&gt;...&lt;/tr&gt;</code>标签表示，每一行<code>&lt;tr&gt;</code>标签内可以嵌套多个<code>&lt;td&gt;</code>或者<code>&lt;th&gt;</code>标签</li><li>可选属性<ul><li>bgcolor<ul><li>设置背景颜色</li><li>bgcolor=”颜色值”</li></ul></li><li>align<ul><li>设置水平方向对齐方式</li><li>取值<ul><li>bottom：靠底部对齐</li><li>top：靠顶端对齐</li><li>middle：居中对齐</li></ul></li></ul></li><li>valign<ul><li>设置垂直方向对齐方式</li><li>取值<ul><li>left：靠左对齐</li><li>right：靠右对齐</li><li>center：居中对齐</li></ul></li></ul></li></ul></li></ul><h3 id="td和th标签"><a href="#td和th标签" class="headerlink" title="td和th标签"></a>td和th标签</h3><ul><li>作用：<code>&lt;td&gt;</code>和<code>&lt;th&gt;</code>都是单元格的标签，其必须嵌套在<code>&lt;tr&gt;</code>标签内，是成对出现的</li><li>区别<ul><li><code>&lt;th&gt;</code>是表头标签，通常位于首行或者首列，<code>&lt;th&gt;</code>中的文字默认会被加粗，而<code>&lt;td&gt;</code>不会</li><li><code>&lt;td&gt;</code>是数据标签，表示该单元格的具体数据</li><li>两者的标签属性都是一样的</li></ul></li><li>常用属性<ul><li>bgcolor<ul><li>设置单元格背景</li></ul></li><li>align<ul><li>设置单元格水平对齐方式</li></ul></li><li>valign<ul><li>设置单元格垂直对齐方式</li></ul></li><li>width<ul><li>设置单元格宽度</li></ul></li><li>height<ul><li>设置单元格高度</li></ul></li><li>rowspan<ul><li>设置单元格所占行数</li></ul></li><li>colspan<ul><li>设置单元格所占列数</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>47-JDBC连接池</title>
      <link href="/2022/02/23/47-JDBC%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>/2022/02/23/47-JDBC%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC连接池"><a href="#JDBC连接池" class="headerlink" title="JDBC连接池"></a>JDBC连接池</h1><blockquote><ul><li>数据库连接的建立是整个数据库操作中最耗时的操作，我们只做一次数据库操作就开关一次数据库连接，这样是很影响效率的</li><li>我们是不是可以这样，每次从某一个缓存的地方获取一个数据库连接，使用完之后在归还到那个缓存的地方，不真正意义上的关闭连接</li><li>连接池</li></ul></blockquote><h2 id="几大数据库连接池比较"><a href="#几大数据库连接池比较" class="headerlink" title="几大数据库连接池比较"></a>几大数据库连接池比较</h2><blockquote><p><strong>c3p0</strong></p><p> 在小编学习ssm 框架的时候，我们使用的就是c3p0,  优点是功能简单易用，稳定性好。 缺点就是性能差，由于其架构设计过于复杂，重构成了一件很难的事，因此性能上的缺点，让它失去了大多数用户的使用。</p><p><strong>dbcp</strong></p><p>DBCP通过连接池预先同数据库建立一些连接放在内存中(即连接池中)，应用程序需要建立数据库连接时直接到从接池中申请一个连接使用，用完后由连接池回收该连接，从而达到连接复用，减少资源消耗的目的。这个我没怎么用过，不做过多展开，用兴趣的可以去了解一下。</p><p>DBCP 是 Apache 软件基金组织下的开源连接池实现，要使用DBCP数据源，需要应用程序应在系统中增加如下两个 jar 文件：</p><ul><li>Commons-dbcp.jar：连接池的实现</li><li>Commons-pool.jar：连接池实现的依赖库</li></ul><p>Tomcat 的连接池正是采用该连接池来实现的。该数据库连接池既可以与应用服务器整合使用，也可由应用程序独立使用。</p><p><strong>Druid</strong>(德鲁伊)</p><p>中文文档比较齐全，它的优点在于强大的监控功能，可以清楚的知道 连接池和SQL的工作情况，方便扩展。</p><p><strong>HikariCP</strong></p><p> HikariCP号称“性能杀手” </p></blockquote><h3 id="测试总结"><a href="#测试总结" class="headerlink" title="测试总结"></a>测试总结</h3><blockquote><p>性能方面    hikariCP&gt;druid&gt;tomcat-jdbc&gt;dbcp&gt;c3p0 </p><p>druid功能最为全面，sql拦截等功能，统计数据较为全面，具有良好的扩展性</p><p>综合以上我们目前系统用的是阿里巴巴的数据库连接池 druid</p></blockquote><p>c3p0:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ComboPooledDataSource</span> cds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPo</span><span class="token punctuation">;</span>cds<span class="token punctuation">.</span><span class="token function">setDataSourceName</span><span class="token punctuation">(</span><span class="token string">"org.gjt.mm.mysql.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cds<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cds<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cds<span class="token punctuation">.</span><span class="token function">setInitialPoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cds<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cds<span class="token punctuation">.</span><span class="token function">setMinPoolSize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cds<span class="token punctuation">.</span><span class="token function">setMaxStatements</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> con <span class="token operator">=</span> cds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>46-JDBC批量更新</title>
      <link href="/2022/02/22/46-JDBC%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0/"/>
      <url>/2022/02/22/46-JDBC%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC批量更新"><a href="#JDBC批量更新" class="headerlink" title="JDBC批量更新"></a>JDBC批量更新</h1><blockquote><p>批量更新可以支持异构的SQL</p><p><font color="red">批量更新中的SQL中如果有DQL语句，直接报错</font></p><p>批量更新属于同一个事务</p></blockquote><p>TestBatchUpdate.java 详见源码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBatchUpdate</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql1 <span class="token operator">=</span> <span class="token string">" insert into t_student(name,gender,age,teacher_id) values(?,?,?,?) "</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql2 <span class="token operator">=</span> <span class="token string">" delete from t_student where id=? "</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql3 <span class="token operator">=</span> <span class="token string">" update t_student set name=?,gender=?,age=? where id=? "</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            connection <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭自动提交</span>            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//占位符下标从 1 开始</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"zhu"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setBoolean</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"zhou"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setBoolean</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//手动提交</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                connection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//手动回滚</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">releaseResources</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>preparedStatement<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>45-JDBC事务处理</title>
      <link href="/2022/02/22/45-JDBC%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/"/>
      <url>/2022/02/22/45-JDBC%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h1><h3 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h3><blockquote><ul><li>原子性<ul><li>不可分割</li></ul></li><li>一致性<ul><li>原子性的保证，事务中的所有操作，只要有一步操作失败，则整个事务内的所有操作全部失败。</li></ul></li><li>隔离性<ul><li>外界看不到事务内部的处理过程。</li></ul></li><li>持续性<ul><li>事务提交、事务回滚之后，会真正的反映到数据库中。</li></ul></li></ul></blockquote><blockquote><p> JDBC处理事务通过关闭连接的自动提交实现的</p><ul><li>Connection.setAutoCommit(false);</li></ul><p>提交事务</p><ul><li>Connection.commit();</li></ul><p>回滚事务</p><ul><li>回滚部分<ul><li>Connection.rollback(Savepoint);</li></ul></li><li>全部回滚<ul><li>Connection.rollback();</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>43-JDBC级联操作</title>
      <link href="/2022/02/18/44-JDBC%E7%BA%A7%E8%81%94%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/02/18/44-JDBC%E7%BA%A7%E8%81%94%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>详见JDBC代码</p><p>TeacherService.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Teacher</span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">boolean</span> cascadeStudent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Teacher</span> teacher <span class="token operator">=</span> teacherDao<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cascadeStudent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//是否级联查询true or false</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> studentList <span class="token operator">=</span> studentDao<span class="token punctuation">.</span><span class="token function">findByTeacherId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        teacher<span class="token punctuation">.</span><span class="token function">setStudentList</span><span class="token punctuation">(</span>studentList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> teacher<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>TestTeacherService.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Teacher</span> teacher <span class="token operator">=</span> teacherService<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用级联查询</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token operator">:</span>teacher<span class="token punctuation">.</span><span class="token function">getStudentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="级联插入的问题"><a href="#级联插入的问题" class="headerlink" title="级联插入的问题"></a>级联插入的问题</h3><p>JDBC获取被插入数据的主键</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insertForResult</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>param<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            connection <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//预编译SQL</span>            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token class-name">Statement</span><span class="token punctuation">.</span>RETURN_GENERATED_KEYS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重点</span>            <span class="token comment">//设置占位符(?)的值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>param<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>param<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//执行SQL语句</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">getGeneratedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重点</span>            resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            id <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">releaseResources</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">,</span>preparedStatement<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>43-MySQL语法</title>
      <link href="/2021/12/12/43-MySQL%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/12/12/43-MySQL%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL语言的分类"><a href="#SQL语言的分类" class="headerlink" title="SQL语言的分类"></a>SQL语言的分类</h1><blockquote><ol><li><p>数据查询语言<strong>DQL</strong>.(Data Query Language)</p><p>数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE子句组成的查询块：SELECT &lt;字段名表&gt;FROM &lt;表或视图名&gt;WHERE &lt;查询条件&gt;</p></li><li><p>数据操纵语言<strong>DML</strong>.(Data Manipulation Language)</p><p>数据操纵语言DML主要有三种形式：</p><ul><li>插入：INSERT</li><li>更新：UPDATE</li><li>删除：DELETE</li></ul></li><li><p>数据定义语言<strong>DDL</strong>.(Data Definition Language)</p><p>数据定义语言DDL用来创建数据库中的各种对象—–表、视图、索引、同义词、聚簇等如：CREATE TABLE / VIEW / INDEX / SYN / CLUSTER| 表 视图 索引 同义词 簇。DDL操作是<font color="red">隐性提交</font>的！不能rollback</p></li><li><p>数据控制语言<strong>DCL</strong>.(Data Control Language) 了解</p></li></ol></blockquote><ul><li><p>查看数据库编码</p><pre class="language-msyql" data-language="msyql"><code class="language-msyql">mysql&gt; show variables like &#39;character_set%&#39;;</code></pre></li><li><p>查看所有的数据库</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;show databases;</code></pre></li><li><p>删除数据库</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; drop database 数据库名;</code></pre></li><li><p><strong>使用数据库 - 千万不要忘记</strong></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;use 数据名</code></pre></li><li><p>查看某个仓库下的所有的表</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;show tables;</code></pre></li><li><p>查看某张表的表结构</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;desc 表名;</code></pre></li></ul><h1 id="查询命令"><a href="#查询命令" class="headerlink" title="查询命令"></a>查询命令</h1><h2 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h2><p>简介:sql的命令是大小写不敏感的，在公司中推荐使用大写。</p><p>查询的本质:</p><ul><li>到哪里查[确定哪张表]</li><li>查什么[查的列]</li></ul><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select 列名1,列名2[,列N] from 表名;</code></pre><h3 id="简单查询练习"><a href="#简单查询练习" class="headerlink" title="简单查询练习"></a>简单查询练习</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 找出员工的所有的信息;*代替所有的列(企业中不允许)mysql&gt; select * from s_emp;mysql&gt; select * from s_emp \G;-- 从s_emp表中查询出员工的名字,薪水,职位;mysql&gt; select first_name,salary,title from s_emp;-- 从s_emp表中查出员工的姓氏,名字;mysql&gt;select last_name,first_name from s_emp;-- 找出本公司的所有的职称(title);mysql&gt; select title from s_emp;-- 补充 - title发现有大量重复的,排重关键字distinctmysql&gt; select distinct title from s_emp;-- 找出所有员工的姓名、工资、入职日期mysql&gt;select first_name,salary,start_date from s_emp;-- 找出所有的客户名及他的电话号码mysql&gt; select name,phone from s_customer;-- 找出员工姓名及他的职称mysql&gt;-- 找出每个订单的费用、支付方式、出货日期mysql&gt;select total,payment_type,date_ordered from s_ord;</code></pre><p><strong>提示:如果不知道表中的列名,可以再次通过desc 表名来查询表结构进行窥探</strong></p><h2 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h2><ul><li><p>sql语句具有运算的能力 - 列是可以参加计算的</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 查询员工的名字,他的年薪(不包含提成)mysql&gt;select first_name,salary*12 from s_emp;</code></pre></li><li><p>sql语句具有字符串拼接能力.</p><p><strong>mysql - 字符串拼接函数concat(param… p);</strong></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select concat(last_name,&#39; &#39;,first_name) from s_emp;</code></pre></li><li><p>给列取别名</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- select 列名 列别名 from 表;mysql&gt;select concat(last_name,&#39; &#39;,first_name) 姓名 from s_emp;-- select 列名 &quot;列别名&quot; from 表-- mysql - &quot;&quot;包裹格式用的mysql&gt;select concat(last_name,&#39; &#39;,first_name) &quot;姓 名&quot; from s_emp;-- 变态需求  姓 名mysql&gt; select 列名 as 列别名 from 表;mysql&gt; select 列名 as &quot;列别名&quot; from 表mysql&gt;select concat(last_name,&#39; &#39;,first_name) as 姓名 from s_emp;</code></pre></li><li><p>空值置换函数<strong>coalesce(m,n)相当于m==null?n:m</strong></p><p>null值参与计算的结果还是null值</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 查询员工名字以及年薪[包含提成]mysql&gt;select first_name,salary*12*(1+commission_pct&#x2F;100) 年薪 from s_emp;mysql&gt;select first_name,salary*12*(1+coalesce(commission_pct,0)&#x2F;100) 年薪 from s_emp;</code></pre></li></ul><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p>带条件进行筛选查询.</p><p>语法:</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select 列[,N列] from table_namewhere 条件表达式[如果成立,则能够顺利查询数据];表达式 - 由变量或者字面量[直接量]以及运算符组成的合法的语句</code></pre><ul><li><p>比较运算符</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">=</span> <span class="token operator">!=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span> <span class="token operator">></span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token punctuation">></span></span><span class="token operator">=</span> <span class="token operator">&lt;=</span> </code></pre></li><li><p>其他运算符</p><pre class="language-java" data-language="java"><code class="language-java">不建议使用 <span class="token operator">-</span> 在某些情况下容易导致索引失效<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> 在<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>范围之内not in  is <span class="token keyword">null</span> 是否为空is not <span class="token keyword">null</span>   between <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> and <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 在<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>到<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>范围<span class="token punctuation">,</span> 闭区间</code></pre></li><li><p>逻辑运算符</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">作用:是用来连接条件表达式的and 条件表达式1 and 条件表达式2 and ... 当且仅当所有条件表达式都是true,结果才是trueor 只要出现一个true,结果就是true 条件执行的顺序的问题mysql中条件表达式是从左到右的执行顺序oracle中条件表达式从右到左的执行顺序.</code></pre></li></ul><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><p>不推荐使用的 - 容易导致索引失效.</p><p>使用like关键字,占位符</p><ul><li>% - 任意多个任意字符</li><li>_ 任意单个字符</li></ul><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 比如查询first_name中包含c的员工.mysql&gt;select first_name from s_emp where first_name like &#39;%c%&#39;;-- 查询第三个字母是amysql&gt; select first_name from s_emp where first_name like &#39;__a%&#39;;</code></pre><p>mysql中也是支持转义字符 - 默认的转义字符\</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; update s_emp set first_name&#x3D;&#39;Car%men&#39; where id&#x3D;1;mysql&gt;select first_name from s_emp where first_name like &#39;%\%%&#39;;</code></pre><p>通过escape关键字来定义指定的转义字符</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;select first_name from s_emp where first_name like &#39;%?%%&#39; escape &#39;?&#39;;</code></pre><p>条件查询和模糊查询练习</p><ol><li><p>查出在41部门的员工名字,工资</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> first_name<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>dept_id <span class="token keyword">from</span> s_emp <span class="token keyword">where</span> dept_id<span class="token operator">=</span><span class="token number">41</span><span class="token punctuation">;</span></code></pre></li><li><p>查出工资高于1500的员工的信息</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span><span class="token keyword">select</span> first_name<span class="token punctuation">,</span>salary <span class="token keyword">from</span> s_emp <span class="token keyword">where</span> salary<span class="token operator">></span><span class="token number">1500</span><span class="token punctuation">;</span></code></pre></li><li><p>找出工资大于1200元的员工全名、工资、职称</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span><span class="token keyword">select</span> concat<span class="token punctuation">(</span>last_name<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span>first_name<span class="token punctuation">)</span> 姓名<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>title <span class="token keyword">from</span> s_emp <span class="token keyword">where</span> salary<span class="token operator">></span><span class="token number">1200</span><span class="token punctuation">;</span></code></pre></li><li><p>查出在41,42,50部门的员工名,薪水</p></li></ol>  <pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;select first_name,salary,dept_id from s_emp where dept_id in(41,42,50);mysql&gt;select first_name,salary,dept_id from s_emp where dept_id&#x3D;41 or dept_id&#x3D;42 or dept_id&#x3D;50;</code></pre><ol start="5"><li><p>找出工资在1200到1500之间的员工名</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span><span class="token keyword">select</span> first_name<span class="token punctuation">,</span>salary <span class="token keyword">from</span> s_emp <span class="token keyword">where</span> salary<span class="token operator">>=</span><span class="token number">1200</span> <span class="token operator">and</span> salary<span class="token operator">&lt;=</span><span class="token number">1500</span><span class="token punctuation">;</span>mysql<span class="token operator">></span><span class="token keyword">select</span> first_name<span class="token punctuation">,</span>salary <span class="token keyword">from</span> s_emp <span class="token keyword">where</span> salary <span class="token operator">between</span> <span class="token number">1200</span> <span class="token operator">and</span> <span class="token number">1500</span><span class="token punctuation">;</span></code></pre></li><li><p>找出工资大于1500并且没有提成的员工</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span><span class="token keyword">select</span> first_name<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>commission_pct <span class="token keyword">from</span> s_emp <span class="token keyword">where</span> salary<span class="token operator">></span><span class="token number">1500</span><span class="token operator">and</span> commission_pct <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>查出名字是以M打头的员工</strong></p><p>%类似量词*(零次或者多次)</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span><span class="token keyword">select</span> first_name <span class="token keyword">from</span> s_emp <span class="token keyword">where</span> first_name <span class="token operator">like</span> <span class="token string">'M%'</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>查出姓名中第三个字母是e的员工</strong></p><pre class="language-sql" data-language="sql"><code class="language-sql">   </code></pre></li><li><p>找出没有提成率的员工</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span><span class="token keyword">select</span> first_name<span class="token punctuation">,</span>commission_pct <span class="token keyword">from</span> s_emp <span class="token keyword">where</span> salary<span class="token operator">></span><span class="token number">1500</span><span class="token operator">and</span> commission_pct <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre></li><li><p>找出费用超过10000元的订单编号及支付方式</p></li></ol>   <pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>total<span class="token punctuation">,</span>payment_type <span class="token keyword">from</span> s_ord <span class="token keyword">where</span> total<span class="token operator">></span><span class="token number">10000</span><span class="token punctuation">;</span></code></pre><ol start="11"><li><p>找出工资在950(含)至1200(含)元的员工姓名、职称</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span></code></pre></li><li><p><strong>找出名字first_name中含有字母a的员工</strong></p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span></code></pre></li></ol><h2 id="排序语句"><a href="#排序语句" class="headerlink" title="排序语句"></a>排序语句</h2><p>数据量大的时候,order by语句是禁止使用,性能很低很低.</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select 列 from table_name[where 条件查询][order by 排序列] [asc|desc]asc - 升序,可以省略不写的.desc - 降序</code></pre><ol><li><p>查询出职称是Stock Clerk的名字、工资，并按工资降序排序</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- ①order by 直接跟查询出来的列的名称</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> first_name<span class="token punctuation">,</span>salary <span class="token keyword">from</span> s_emp <span class="token keyword">where</span> title <span class="token operator">=</span> <span class="token string">'Stock Clerk'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> salary<span class="token punctuation">;</span></code></pre></li><li><p>查询出年薪低于25000的员工名,职称,并按年薪升序排序,如果年薪一样,继续根据first_name降序排.</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select first_name,title,salary*12 from s_emp where salary*12&lt;25000 order by salary*12;--  ②order by + 列别名mysql&gt; select first_name,title,salary*12 _sal from s_emp where salary*12&lt;25000 order by _sal;-- ③order by + 查询列序号[从1开始] - 性能比上面的要高mysql&gt;select first_name,title,salary*12 _sal from s_emp where salary*12&lt;25000 order by 3;-- 最终的解题 - 多个列参与排序mysql&gt;select first_name,title,salary*12 _sal from s_emp where salary*12&lt;25000 order by 3,1 desc;</code></pre></li></ol><h1 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h1><p>简介:多表查询 - 开发的趋势是单表查询.</p><p>第一步:确定表和表之间是否存在直接或者间接的关系.表之间的关系就是通过<em><strong>外键</strong></em>来确定的.</p><ul><li><p><strong>查询员工的first_name,部门的名字</strong></p><ul><li><p>错误❌的写法 - 笛卡尔积 - 两个表中的行记录”相乘了”.</p><p>数据的冗余,并且错误的数据.</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select first_name,name from s_emp,s_dept;</code></pre></li><li><p>传统的写法</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> first_name<span class="token punctuation">,</span>name <span class="token keyword">from</span> s_emp<span class="token punctuation">,</span>s_dept <span class="token keyword">where</span> dept_id<span class="token operator">=</span>id<span class="token punctuation">;</span>id是未明确的列 <span class="token operator">-</span> 因此需要给列取别名或者给表取别名<span class="token punctuation">.</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> e<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>d<span class="token punctuation">.</span>name <span class="token keyword">from</span> s_emp e<span class="token punctuation">,</span>s_dept d        <span class="token keyword">where</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre></li><li><p>关联查询使用<em><strong>join .. on</strong></em>(一定是一起使用的)</p><p>表 join 表 on的目的不是进行条件筛选,就是用来去除笛卡尔积的-通过外键</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 能够使用 表A join 表B on 多的一方的外键列 = 一的一方的主键列.</span><span class="token comment">-- 注意是表A和表B一定是存在直接的关系的.</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> e<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>d<span class="token punctuation">.</span>name <span class="token keyword">from</span> s_emp e       <span class="token keyword">join</span> s_dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre></li><li><p>对比传统写法和关联写法的区别</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 查询出员工first_name以及这个员工所在的部门的name,以及这个员工所在的区域的名字.-- s_emp s_dept s_region-- 一个部门拥有多个员工-- 一个区域拥有多个部门mysql&gt;select e.first_name,d.name 部门,r.name 区域 from s_emp e      join s_dept d on e.dept_id &#x3D; d.id      join s_region r on d.region_id &#x3D; r.id;</code></pre></li></ul></li></ul><h2 id="关联查询练习-内联查询"><a href="#关联查询练习-内联查询" class="headerlink" title="关联查询练习 - 内联查询"></a>关联查询练习 - 内联查询</h2><p>**on并不是用来替代where,**上面的题中增加一个业务.找出区域’Asia’上的所有的员工的名字,部门名字,区域名字.</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select e.first_name,d.name 部门,r.name 区域 from s_emp e      join s_dept d on e.dept_id &#x3D; d.id      join s_region r on d.region_id &#x3D; r.id where r.name&#x3D;&#39;Asia&#39;;</code></pre><p>找出部门是31的部门的名称,以及该部门的所有的员工的名字和工资</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select e.first_name,e.salary,e.dept_id from s_emp e join s_dept d       on e.dept_id &#x3D; d.id where d.id &#x3D; 31;</code></pre><p>找出欧洲区域上所有的员工的名字,区域名称.</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select e.first_name,r.name 区域 from s_emp e      join s_dept d on e.dept_id &#x3D; d.id      join s_region r on d.region_id &#x3D; r.id where r.name&#x3D;&#39;Europe&#39;;</code></pre><p>查询所有客户的id,名称以及该客户拥有的订单的所有的信息</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select c.id,c.name,o.* from s_customer c join s_ord o       on c.id &#x3D; o.customer_id;       结果:如果这个客户没有订单,将不会被加载出来.</code></pre><h2 id="关联查询-连接的方式"><a href="#关联查询-连接的方式" class="headerlink" title="关联查询-连接的方式"></a>关联查询-连接的方式</h2><ul><li><p><strong>内联方式</strong> - [inner] join</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 如果这个客户没有订单信息,那么这个客户将不会被查询出来.-- 如果一的一方的数据在多的一方中没有体现,那么不会被查询出来.mysql&gt; select c.id,c.name,o.* from s_customer c join s_ord oon c.id &#x3D; o.customer_id;</code></pre></li></ul><p> <img src="/2021/12/12/43-MySQL%E8%AF%AD%E6%B3%95/%E5%86%85%E8%81%94.jpg" loading="lazy"></p><ul><li><p><em><strong>左外联 - 左连接</strong></em> - left join</p><p>以join左边的表为基准.在查询的时候,即使右边的表中没有与之对应的记录的时候.左边的这张表中的记录仍然也会被查询出来.</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select c.id,c.name,o.* from s_customer c left join s_ord oon c.id &#x3D; o.customer_id;</code></pre><p><img src="/2021/12/12/43-MySQL%E8%AF%AD%E6%B3%95/%E5%B7%A6%E5%A4%96%E8%BF%9E%E6%8E%A5.jpg" loading="lazy"></p></li><li><p>右连接 - right join</p><p>以join右边的表为基准,如果左边的表中没有与之对应的记录的时候,也要把右边的表中的记录查询出来.</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span><span class="token keyword">select</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name<span class="token punctuation">,</span>o<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> s_ord o <span class="token keyword">right</span> <span class="token keyword">join</span> s_customer c<span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> o<span class="token punctuation">.</span>customer_id<span class="token punctuation">;</span></code></pre><p><img src="/2021/12/12/43-MySQL%E8%AF%AD%E6%B3%95/%E5%8F%B3%E5%A4%96%E8%BF%9E%E6%8E%A5.jpg" loading="lazy"></p></li></ul><ul><li><p>全连接</p><p>A <em><strong>full outer</strong></em> join B</p><p><strong><a href>mysql中不支持这个语法</a></strong></p><p><img src="/2021/12/12/43-MySQL%E8%AF%AD%E6%B3%95/%E5%85%A8%E5%A4%96%E8%BF%9E%E6%8E%A5.jpg" loading="lazy"></p></li></ul><h1 id="多行函数"><a href="#多行函数" class="headerlink" title="多行函数"></a>多行函数</h1><p>简介:<em><strong>多行函数 - 组函数.</strong></em></p><ul><li><p>count(n)</p><p>n可以为*,可以为具体的某列.统计行数的,重复的数据也算1个.</p><p>注意:如果碰到null值列,那么直接跳过了,不计数.</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 统计员工的个数mysql&gt; select count(*) from s_emp;-- 统计具体的某个非空列mysql&gt; select count(e.id) from s_emp e;-- 注意:如果碰到null值列,那么直接跳过了,不计数.mysql&gt; select count(commission_pct) from s_emp;</code></pre></li><li><p>avg(n);</p><p>求出某列的所有行的平均值.</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 求出所有员工的平均月薪mysql&gt; select avg(salary) from s_emp;</code></pre></li><li><p>max(n),min(n)</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 求出员工表中工资最高的工资和最低的工资mysql&gt; select max(salary),min(salary) from s_emp;</code></pre></li><li><p>sum(n)</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 求出员工表中所有的员工的工资总和mysql&gt; select sum(salary) from s_emp;</code></pre><p>注意:<em><strong>使用sum进行统计的时候,如果遇到null值,忽略null</strong></em></p></li></ul><h1 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h1><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 列<span class="token number">1</span><span class="token punctuation">[</span><span class="token punctuation">,</span>列<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>组函数<span class="token punctuation">(</span>多行函数<span class="token punctuation">)</span><span class="token keyword">where</span> 条件语句<span class="token keyword">group</span> <span class="token keyword">by</span> 列<span class="token number">1</span><span class="token punctuation">[</span><span class="token punctuation">,</span>列<span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">having</span> 组函数的判断<span class="token keyword">order</span> <span class="token keyword">by</span> 排序</code></pre><ul><li><p>统计各个部门的人数(部门的id和该部门的员工的数量)</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> dept_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> s_emp <span class="token keyword">group</span> <span class="token keyword">by</span> dept_id<span class="token punctuation">;</span><span class="token comment">-- 注意点:</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> s_emp <span class="token keyword">group</span> <span class="token keyword">by</span> dept_id<span class="token punctuation">;</span><span class="token comment">//ok</span><span class="token comment">-- error</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> first_name<span class="token punctuation">,</span>dept_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> s_emp <span class="token keyword">group</span> <span class="token keyword">by</span> dept_id<span class="token punctuation">;</span>推荐的写法<span class="token keyword">select</span> 分组列<span class="token number">1</span><span class="token punctuation">,</span>分组列<span class="token number">2</span><span class="token punctuation">,</span>组函数 <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">group</span> <span class="token keyword">by</span> 分组列<span class="token number">1</span><span class="token punctuation">,</span>分组列<span class="token number">2</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> first_name<span class="token punctuation">,</span>dept_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> s_emp <span class="token keyword">group</span> <span class="token keyword">by</span> first_name<span class="token punctuation">,</span>dept_id<span class="token punctuation">;</span></code></pre></li><li><p>统计各个职称的员工的数量</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select title,count(*) from s_emp group by title;</code></pre></li><li><p>统计各个区域的id和区域的部门数量</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> r<span class="token punctuation">.</span>id<span class="token punctuation">,</span>r<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> s_dept d <span class="token keyword">join</span> s_region r       <span class="token keyword">on</span> r<span class="token punctuation">.</span>id <span class="token operator">=</span> d<span class="token punctuation">.</span>region_id <span class="token keyword">group</span> <span class="token keyword">by</span> r<span class="token punctuation">.</span>id<span class="token punctuation">,</span>r<span class="token punctuation">.</span>name<span class="token punctuation">;</span></code></pre></li><li><p>统计各个区域的id,名称以及这个区域的员工的数量</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span><span class="token keyword">select</span> r<span class="token punctuation">.</span>id<span class="token punctuation">,</span>r<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> s_emp e <span class="token keyword">join</span> s_dept d      <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id <span class="token keyword">join</span> s_region r <span class="token keyword">on</span> r<span class="token punctuation">.</span>id <span class="token operator">=</span> d<span class="token punctuation">.</span>region_id      <span class="token keyword">group</span> <span class="token keyword">by</span> r<span class="token punctuation">.</span>id<span class="token punctuation">,</span>r<span class="token punctuation">.</span>name<span class="token punctuation">;</span></code></pre></li><li><p>统计各个客户的订单的数量,没有订单的客户也要统计</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> s_customer c       <span class="token keyword">left</span> <span class="token keyword">join</span> s_ord o <span class="token keyword">on</span> o<span class="token punctuation">.</span>customer_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id <span class="token keyword">group</span> <span class="token keyword">by</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name<span class="token punctuation">;</span></code></pre></li></ul><h2 id="having-组函数判断"><a href="#having-组函数判断" class="headerlink" title="having 组函数判断"></a>having 组函数判断</h2><p>简介:where和having使用时候的区别</p><ol><li>where是条件过滤,是在分组之前的过滤,不能使用组函数.</li><li>having是在分组之后的进一步过滤,允许使用组函数的.</li></ol><ul><li><p>查询出平均工资超过1300的部门的名称和这个部门的平均工资</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select d.id,d.name,avg(e.salary) from s_dept d join s_emp e      on d.id &#x3D; e.dept_id group by d.id,d.name having avg(e.salary)&gt;1300;</code></pre></li><li><p>统计本公司的职称的数量.</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> title<span class="token punctuation">)</span> <span class="token keyword">from</span> s_emp<span class="token punctuation">;</span></code></pre></li><li><p>统计没有订单的客户信息</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> s_customer c       <span class="token keyword">left</span> <span class="token keyword">join</span> s_ord o <span class="token keyword">on</span> o<span class="token punctuation">.</span>customer_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id <span class="token keyword">group</span> <span class="token keyword">by</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name       <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></code></pre></li><li><p>统计人数超过3个员工的部门编号和部门名称</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> d<span class="token punctuation">.</span>id<span class="token punctuation">,</span>d<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> s_dept d <span class="token keyword">join</span> s_emp e       <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id <span class="token keyword">group</span> <span class="token keyword">by</span> d<span class="token punctuation">.</span>id<span class="token punctuation">,</span>d<span class="token punctuation">.</span>name <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">;</span></code></pre></li><li><p>统计除了’Asia’之外的各个区域的id,name以及这个区域的人数(4个),并且根据r.id降序排序</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> r<span class="token punctuation">.</span>id<span class="token punctuation">,</span>r<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> s_emp e <span class="token keyword">join</span> s_dept d       <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id <span class="token keyword">join</span> s_region r <span class="token keyword">on</span> r<span class="token punctuation">.</span>id <span class="token operator">=</span> d<span class="token punctuation">.</span>region_id      <span class="token keyword">where</span> r<span class="token punctuation">.</span>name<span class="token operator">&lt;></span><span class="token string">'Asia'</span>       <span class="token keyword">group</span> <span class="token keyword">by</span> r<span class="token punctuation">.</span>id<span class="token punctuation">,</span>r<span class="token punctuation">.</span>name      <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">4</span>      <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">1</span> <span class="token keyword">desc</span><span class="token punctuation">;</span></code></pre></li><li><p>查询出各年份入职的员工情况（年份，员工人数）</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;select year(start_date),count(*) from s_emp group by year(start_date);</code></pre></li><li><p>查询出每年每月入职的员工情况（年份月份，员工人数)</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select year(start_date),month(start_date),count(*) from s_emp group by year(start_date),month(start_date);mysql&gt; select date_format(start_date,&#39;%Y%m&#39;),count(*) from s_emp group by    date_format(start_date,&#39;%Y%m&#39;);-- 子查询</code></pre></li></ul><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>定义:查询中嵌套查询.注意点:<em><strong>子查询一定要使用()括起来.</strong></em></p><p>子查询可以出现的位置:</p><ul><li><p>作为外部查询的条件</p></li><li><p><em><strong>作为外部查询的列</strong></em></p></li><li><p>把子查询的结果作为”虚表”,一定要给”虚表”取别名</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select d.id,d.name,avg(e.salary) _avg from s_dept d join s_emp eon d.id &#x3D; e.dept_id group by d.id,d.nameselect * from (select d.id,d.name,avg(e.salary) _avg from s_dept d join s_emp eon d.id &#x3D; e.dept_id group by d.id,d.name) core_ where core_._avg&gt;1300;</code></pre></li></ul><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ul><li><p><em><strong>子查询作为外部查询的条件.</strong></em></p><p>查询出比Mark员工工资高的员工的名字和工资信息</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select salary from s_emp where first_name&#x3D;&#39;Mark&#39;;&#x2F;&#x2F;1450</code></pre></li><li><p><strong>子查询出现在外部查询的select列中</strong></p><p>查询出比Mark员工工资高的员工的名字和工资信息</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span><span class="token keyword">select</span> first_name<span class="token punctuation">,</span>salary <span class="token keyword">from</span> s_emp <span class="token keyword">where</span> salary<span class="token operator">></span><span class="token number">1450</span><span class="token punctuation">;</span></code></pre></li><li><p>合并</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 无关子查询mysql&gt;select first_name,salary from s_emp where salary&gt;(select salary from s_emp where first_name&#x3D;&#39;Mark&#39;);</code></pre></li></ul><h2 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h2><ul><li><p>找出各个部门的id,name以及这个部门的员工的数量</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 1. 外层查询走一次,内层查询走全部</span><span class="token comment">-- 相关子查询</span>mysql<span class="token operator">></span><span class="token keyword">select</span> d<span class="token punctuation">.</span>id<span class="token punctuation">,</span>d<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> s_emp e <span class="token keyword">where</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">from</span> s_dept d<span class="token punctuation">;</span><span class="token number">50</span><span class="token punctuation">,</span> Administration  <span class="token number">2</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> s_emp e <span class="token keyword">where</span> <span class="token number">50</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>dept_id<span class="token operator">+</span><span class="token comment">----+----------------+-----------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name           <span class="token operator">|</span> region_id <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+----------------+-----------+</span><span class="token operator">|</span> <span class="token number">50</span> <span class="token operator">|</span> Administration <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10</span> <span class="token operator">|</span> Finance        <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+---------+</span><span class="token operator">|</span> id <span class="token operator">|</span> dept_id <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+---------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span>      <span class="token number">50</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span>      <span class="token number">41</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span>      <span class="token number">31</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span>      <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span>      <span class="token number">50</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">6</span> <span class="token operator">|</span>      <span class="token number">41</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7</span> <span class="token operator">|</span>      <span class="token number">42</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">8</span> <span class="token operator">|</span>      <span class="token number">43</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">9</span> <span class="token operator">|</span>      <span class="token number">44</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">10</span> <span class="token operator">|</span>      <span class="token number">45</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">11</span> <span class="token operator">|</span>      <span class="token number">31</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">12</span> <span class="token operator">|</span>      <span class="token number">32</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">13</span> <span class="token operator">|</span>      <span class="token number">33</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">14</span> <span class="token operator">|</span>      <span class="token number">34</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">15</span> <span class="token operator">|</span>      <span class="token number">35</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">16</span> <span class="token operator">|</span>      <span class="token number">41</span> <span class="token operator">|</span></code></pre></li><li><p>找出平均工资大于公司平均工资的部门编号和平均工资</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;select dept_id,avg(salary) from s_emp group by dept_id      having avg(salary)&gt;(select avg(salary) from s_emp);</code></pre></li><li><p>找出与’Ben’同部门的员工和部门编号</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select first_name,dept_id from s_emp where dept_id&#x3D;(select dept_id from s_emp                                                          where first_name&#x3D;&#39;Ben&#39;) and first_name&lt;&gt;&#39;Ben&#39;;                                                                                                            </code></pre></li><li><p>查询出客户名,电话号码以及订单数量</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;select c.id,c.name,c.phone,(select count(o.id) from s_ord o where o.customer_id&#x3D;c.id) from s_customer c;</code></pre></li></ul><h2 id="子查询的分类"><a href="#子查询的分类" class="headerlink" title="子查询的分类"></a>子查询的分类</h2><ul><li><p>相关子查询 - 子查询中使用到了外部查询的列.子查询是不能够独立运行的.</p><pre class="language-sql" data-language="sql"><code class="language-sql">s</code></pre></li><li><p>无关子查询 - 子查询中没有使用到外部查询的列,子查询是允许单独执行的.</p><pre class="language-sql" data-language="sql"><code class="language-sql">        </code></pre></li><li><p>关联查询</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 写过了- 查询出客户名,电话号码以及订单数量</span></code></pre></li></ul><p>只用原则:<em><strong>关联查询&gt;无关子查询&gt;相关子查询.</strong></em></p><h1 id="exists和not-exists用法"><a href="#exists和not-exists用法" class="headerlink" title="exists和not exists用法"></a>exists和not exists用法</h1><ul><li>exists 关心条件为true - 是否存在</li><li>not exits 关心条件为false - 不存在</li></ul><p>不关心查询出来的是什么,只关心能不能查询出来</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- exists - 不关心你查询的是什么,只需要能够查询出行记录,代表where true - 顺利查询出数据出来</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> s_emp <span class="token keyword">where</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> s_emp <span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>找出与’Ben’同部门的员工</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> e<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>e<span class="token punctuation">.</span>dept_id <span class="token keyword">from</span> s_emp e <span class="token keyword">where</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> s_emp e1 <span class="token keyword">where</span> e1<span class="token punctuation">.</span>first_name<span class="token operator">=</span><span class="token string">'Ben'</span> <span class="token operator">and</span> e1<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> e<span class="token punctuation">.</span>dept_id <span class="token punctuation">)</span> <span class="token operator">and</span> e<span class="token punctuation">.</span>first_name<span class="token operator">&lt;></span><span class="token string">'Ben'</span><span class="token punctuation">;</span></code></pre></li><li><p>找出各个部门工资排名前二的员工</p><p>前提是 - 相同工资不超过2个.</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 在"我e"这个部门中,如果有人的工资比"我e"还要高,那么这个人的数量不能超过1个.</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> e<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>e<span class="token punctuation">.</span>salary<span class="token punctuation">,</span>e<span class="token punctuation">.</span>dept_id <span class="token keyword">from</span> s_emp e <span class="token keyword">where</span> <span class="token keyword">exists</span><span class="token punctuation">(</span>          <span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> s_emp e1 <span class="token keyword">where</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> e1<span class="token punctuation">.</span>dept_id <span class="token operator">and</span> e1<span class="token punctuation">.</span>salary<span class="token operator">></span>e<span class="token punctuation">.</span>salary           <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">1</span>       <span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 不存在,在"我e"这个部门中,有人的工资比我高,并且这个数量超过1.</span>mysql<span class="token operator">></span><span class="token keyword">select</span> e<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>e<span class="token punctuation">.</span>salary<span class="token punctuation">,</span>e<span class="token punctuation">.</span>dept_id <span class="token keyword">from</span> s_emp e <span class="token keyword">where</span> <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">(</span>          <span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> s_emp e1 <span class="token keyword">where</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> e1<span class="token punctuation">.</span>dept_id <span class="token operator">and</span> e1<span class="token punctuation">.</span>salary<span class="token operator">></span>e<span class="token punctuation">.</span>salary           <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span>       <span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre></li><li><p>找出各个部门中工资最高的员工.</p><p>思路:本部门中比’我’工资高的员工不超过1个.</p><p> 本部门中不存在比’我’工资还要高的员工(数量&gt;0)</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> e<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>e<span class="token punctuation">.</span>salary<span class="token punctuation">,</span>e<span class="token punctuation">.</span>dept_id <span class="token keyword">from</span> s_emp e <span class="token keyword">where</span> <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">(</span>          <span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> s_emp e1 <span class="token keyword">where</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> e1<span class="token punctuation">.</span>dept_id <span class="token operator">and</span> e1<span class="token punctuation">.</span>salary<span class="token operator">></span>e<span class="token punctuation">.</span>salary          <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h1 id="求出查询结果的并集-差集-交集"><a href="#求出查询结果的并集-差集-交集" class="headerlink" title="求出查询结果的并集,差集,交集."></a>求出查询结果的并集,差集,交集.</h1><ul><li><p>并集 - union     union all</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create table tnum( id int(7) primary key);insert into tnum values(1),(2),(3),(4),(5);select id from tnum where id in(1,2)unionselect id from tnum where id in(2,3);+----+| id |+----+|  1 ||  2 ||  3 |select id from tnum where id in(1,2)union allselect id from tnum where id in(2,3);+----+| id |+----+|  1 ||  2 ||  2 ||  3 |+----+</code></pre></li><li><p><strong>差集</strong></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- oracle数据库 - 直接支持minus关键字-- markdown语法   md文件 - typoraselect id from tnum where id in(1,2)minusselect id from tnum where id in(2,3);差集 - 1-- mysql-- 虚拟表core_aselect t1.id aid from tnum t1 where t1.id in(1,2);-- 虚拟表core_bselect t2.id bid from tnum t2 where t2.id in(2,3);-- 推荐-- 思路 - 俩张表进行left join 找出null的行数据mysql&gt;select core_a.aid from (select t1.id aid from tnum t1 where t1.id in(1,2)) core_a left join (select t2.id bid from tnum t2 where t2.id in(2,3)) core_b on core_a.aid &#x3D; core_b.bid where core_b.bid is null;思考一个问题差集应用在哪里? - 写sql -&gt; 1 - 学生表,教师表,课程表,选课表</code></pre></li></ul><h1 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h1><p>DDL - Data  Definition Language - 数据定义语言.</p><ul><li><p><strong>create - 创建表(创建db,创建user,创建table,创建view,创建<em>index</em>,创建function,创建存储过程 - 创建db的基本对象)</strong></p></li><li><p><strong>drop - 删除db,删除db的基本对象.</strong></p></li><li><p>truncate - 清空表</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">drop , truncate, delete三个命令的区别!</code></pre></li><li><p><em><strong>alter命令 - 了解即可</strong></em>(修改列名,修改表名,修改列的属性,修改约束).</p></li><li><p>rename to - 重新命名[表,列]</p></li><li><p>comment - 创建表时给列加的注释.</p></li></ul><h1 id="数据库的设计"><a href="#数据库的设计" class="headerlink" title="数据库的设计"></a>数据库的设计</h1><h2 id="表之间的关系"><a href="#表之间的关系" class="headerlink" title="表之间的关系"></a>表之间的关系</h2><ul><li><p>1:1 - 外键列双方都是允许维护的.</p><p>t_husband</p><table><thead><tr><th>id</th><th>name</th><th></th></tr></thead><tbody><tr><td>1</td><td>小明</td><td></td></tr><tr><td>2</td><td>黄小明</td><td></td></tr><tr><td>3</td><td>黄大明</td><td></td></tr></tbody></table><p>t_wife</p><table><thead><tr><th>id</th><th>name</th><th>husband_id</th></tr></thead><tbody><tr><td>1</td><td>baby</td><td>1</td></tr><tr><td>2</td><td>小baby</td><td>3</td></tr><tr><td>3</td><td>老baby</td><td>2</td></tr></tbody></table></li><li><p><strong><a href>1:N - 外键列必然出现在多的一方的</a></strong></p><p>t_customer</p><table><thead><tr><th>id</th><th>customer</th><th></th></tr></thead><tbody><tr><td>1</td><td>james</td><td></td></tr><tr><td>2</td><td>jack</td><td></td></tr><tr><td>3</td><td>gosling</td><td></td></tr></tbody></table><p>t_ord</p><table><thead><tr><th>id</th><th>ordno</th><th>customer_id</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>1</td></tr><tr><td>2</td><td>1002</td><td>1</td></tr><tr><td>3</td><td>1003</td><td>1</td></tr><tr><td>4</td><td>1004</td><td>2</td></tr></tbody></table></li><li><p>N:N</p><p>一个用户拥有多个角色</p><p>一个角色可以被多个用户占用</p><p>user 用户表</p><table><thead><tr><th>id</th><th>username</th><th></th></tr></thead><tbody><tr><td>1</td><td>王总</td><td></td></tr><tr><td>2</td><td>李总</td><td></td></tr><tr><td>3</td><td>孙总</td><td></td></tr></tbody></table><p>role 角色表</p><table><thead><tr><th>id</th><th>rolename</th><th></th></tr></thead><tbody><tr><td>1</td><td>总经理</td><td></td></tr><tr><td>2</td><td>销售经理</td><td></td></tr><tr><td>3</td><td>客户经理</td><td></td></tr><tr><td>4</td><td>渠道经理</td><td></td></tr></tbody></table><p>所以即使遇到N:N - &gt; <strong>拆分成俩个1:N</strong></p></li></ul><p>​       user_role用户角色表</p><p>​      </p><table><thead><tr><th>user_id</th><th>role_id</th><th></th></tr></thead><tbody><tr><td>1</td><td>1</td><td></td></tr><tr><td>1</td><td>2</td><td></td></tr><tr><td>2</td><td>1</td><td></td></tr><tr><td>2</td><td>2</td><td></td></tr></tbody></table><h2 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h2><p>数据库设计原则也就是指<code>数据库的三大范式</code>.</p><p>作用:是用来指导数据库设计人员的一种设计思想,保证数据库的设计是具备可拓展性,无数据的冗余,结构清晰简单明了.</p><ul><li><p><em><strong>1NF:原子性,也就是说表中任何一个列都是唯一的,不可再拆分.</strong></em></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">s_emp(id,name);&#x2F;&#x2F;不合理的,不满足原子性.name继续分割first_name,last_namestudent(id,sname,address);id sname address1   tom   江苏省苏州市高新区2   jack  安徽省芜湖市xx区-- 如果项目的业务中需要频繁的对address列进行查询,为了提高查询效率-- mysql中为给address这个列添加一个索引-- 但是如果索引列使用到了下面的这个模糊查询的话,那么这个索引列将会失效.select * from student where address like &#39;%苏州市%&#39;;student(id,sname,province,city,area);id sname province city area1    tom  江苏省    苏州市  高新区-- 精确查找 - 只要city列如果添加了索引,那么这个索引是生效的,提高查询效率的.select * from student where city&#x3D;&#39;苏州市&#39;;</code></pre></li><li><p><strong>2NF:在1NF的基础上,不存在非关键列部分依赖于关键列,也就是说所有的非关键列都必须完全依赖于关键列.</strong></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">关系型数据库 - 关系 - &gt; 表格关键列 - 主键列,一张表中只能存在一个主键.通常选择使用id列作为主键列.         主键列特点 - 唯一的,非空的.作用 - 就是用来唯一确定元组[行]        student(sid,sname,cid,cname,score)sidsnamecidcnamescore1  凤姐   1   作妖   1002   芙蓉   2   java   903   凤姐   1   python 80-- 表不是说设计得越少越牛逼.-- 比如凤姐干掉 - 删除凤姐的记录.删除凤姐的同时,也把课程信息也删除了.-- 比如学校申请了新的专业sidsnamecidcnamescore1  凤姐   1   作妖   1002   芙蓉   2   python  901   凤姐   2   python 80          3   html为什么说不满足2NF?确定关键列是哪个?   组合关键列 - 联合主键 - (sid,cid)(sid,cid) -&gt; sname(非关键列)因为sname这个非关键列只需要由关键列(sid,cid)中的sid就可以确定了只需要依赖于关键列中的其中的一部分而已.-- 解耦合 - 软件开发的原则 - 高内聚,低耦合.student(sid,sname);1   tom2   jackcourse(cid,cname);1  java2  pythonscore(sid,cid,score);1 1 1001 2 902 1 80(sid,cid) -&gt; score</code></pre></li><li><p>3NF:在2NF的基础上,<strong>不存在非关键列传递依赖于关键列</strong>,也就是说,<strong>所有的非关键列都必须直接依赖于关键列</strong></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">student(sid,sname,uno,uname,adress,phone);1 tom  1001 江科大 张家港  110092 jack 1002 苏科大 苏州    12009sid -&gt; uno -&gt; phone-- uno 外键列-- sid- &gt; unostudent(sid,sname,uno)1  tom 1-- uno -&gt; phoneuniversity(uno,address,phone);1 xx 11110</code></pre></li></ul><h1 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h1><p>语法</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 不含有约束的</span><span class="token comment">-- [if not exists] 同一个数据库中不能创建同名的表,如果不加上这个,那么会报错.</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">[</span><span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">]</span> table_name<span class="token punctuation">(</span>  列名<span class="token number">1</span> 列的数据类型<span class="token punctuation">(</span>范围<span class="token punctuation">)</span><span class="token punctuation">,</span>  列名<span class="token number">2</span> 列的数据类型<span class="token punctuation">(</span>范围<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">,</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  列名n 列的数据类型<span class="token punctuation">(</span>范围<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">]</span><span class="token punctuation">;</span>mysql5<span class="token punctuation">.</span><span class="token number">7</span>默认的存储引擎就是<span class="token keyword">InnoDB</span><span class="token punctuation">,</span>编码my<span class="token punctuation">.</span>ini文件中已经设置过了<span class="token punctuation">.</span>通过<span class="token keyword">show</span>命令来查看已存在表的建表语句<span class="token punctuation">.</span>mysql<span class="token operator">></span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">;</span>数据类型整数 <span class="token operator">-</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">9999999</span>小数 <span class="token operator">-</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">99999.99</span>字符串 <span class="token operator">-</span> <span class="token keyword">varchar</span> <span class="token operator">-</span> 不定长字符串name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">-</span> 比如这列存储了<span class="token string">"abc"</span>字符 <span class="token operator">-</span> <span class="token keyword">char</span> <span class="token operator">-</span> 定长字符串name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">"a"</span> <span class="token operator">-</span><span class="token operator">></span> 实际仍然占<span class="token number">20</span>个空间换时间日期<span class="token keyword">date</span>    年月日<span class="token keyword">datetime</span> 年月日时分秒</code></pre><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- drop table 表名;drop table t_student;create table t_student(id int(7),  name varchar(10),  height double(5,2),  birthday date,  sex char(1));数据类型的作用是什么? - 为了规范插入的数据的合法性!mysql&gt; insert into t_student values(1,&#39;tom&#39;,132.67,&#39;2020-09-08&#39;,&#39;F&#39;);mysql&gt; insert into t_student values(5,&#39;jack&#39;,132.6,&#39;2020-09-08&#39;,&#39;F&#39;);&#x2F;&#x2F;errormysql&gt; insert into t_student values(5,&#39;jack&#39;,132.6,&#39;2020-09-08&#39;,&#39;FA&#39;);ERROR 1406 (22001): Data too long for column &#39;sex&#39; at row 1</code></pre><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><p>简介:constraint的作用 - 为了添加数据的时候,数据的更加合法性.一旦违反了某个约束,sql语句都会执行错误.</p><p>mysql中有一套异常机制.</p><p><em><strong>a. primary key 主键约束 - 非空且唯一的.每张表都应该给定一个主键,通常选取id.当然也是支持组合主键.</strong></em></p><p><em><strong>b. not null - 非空约束,插入数据的时候,该列的数据不允许为null.</strong></em></p><p><em><strong>c. unique - 唯一性约束.插入的数据必须要保证唯一性.不能出现重复的.</strong></em></p><p><em><strong>d. foreign key - 外键约束.表和表之间的关系的.</strong></em></p><p><em><strong>e. default 默认值,如果插入数据的时候,没有给定列的值,则使用默认值.</strong></em></p><p>主键和唯一</p><ol><li>区别：</li></ol><p>①. 一个表至多有一个主键，但可以有多个唯一</p><p>②. 主键不允许为空，唯一可以为空</p><ol start="2"><li>相同点</li></ol><p>①. 都具有唯一性</p><p>②.  都支持组合键，但不推荐</p><h2 id="创建表时添加约束"><a href="#创建表时添加约束" class="headerlink" title="创建表时添加约束"></a>创建表时添加约束</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>  字段名 字段类型 <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>  字段名 字段类型 <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>  字段名 字段类型 <span class="token keyword">unique</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>  字段名 字段类型 <span class="token keyword">default</span> 值<span class="token punctuation">,</span>  <span class="token keyword">constraint</span> 约束名 <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>字段名<span class="token punctuation">)</span> <span class="token keyword">references</span> 主表（被引用列）<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>注意：</strong></p><ol><li><p>列级约束： 除了外键其他类型都支持，<em><strong>不可以起约束名；</strong></em></p></li><li><p>表级约束： 除了非空和默认其他类型都支持，可以起约束名，但对主键无效。</p></li><li><p>列级约束可以在一个字段上追加多个，中间用空格隔开，没有顺序要求</p></li></ol><h3 id="列级语法添加"><a href="#列级语法添加" class="headerlink" title="列级语法添加"></a>列级语法添加</h3><p> 边定义列,边添加约束 - 不能对约束进行命名.</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">drop table t_student;create table t_student(id int(3) primary key,  name varchar(10),  height double(5,2),  birthday date,  sex char(1));mysql&gt; insert into t_student values(12345,&#39;tom&#39;,132.67,&#39;2020-09-08&#39;,&#39;F&#39;);mysql&gt; insert into t_student values(1,&#39;tom&#39;,132.67,&#39;2020-09-08&#39;,&#39;F&#39;);ERROR 1062 (23000): Duplicate entry &#39;1&#39; for key &#39;PRIMARY&#39;说明primary key - 唯一性mysql&gt; insert into t_student values(null,&#39;tom&#39;,132.67,&#39;2020-09-08&#39;,&#39;F&#39;);ERROR 1048 (23000): Column &#39;id&#39; cannot be null说明primary key - 非空性unique - 唯一性,可以为空drop table t_student;create table t_student(id int(7) primary key,  name varchar(10) unique,  height double(5,2),  birthday date,  sex char(1));insert into t_student values(1,&#39;tom&#39;,132.67,&#39;2020-09-08&#39;,&#39;F&#39;);insert into t_student values(2,&#39;tom&#39;,132.67,&#39;2020-09-08&#39;,&#39;F&#39;);ERROR 1062 (23000): Duplicate entry &#39;tom&#39; for key &#39;name&#39;insert into t_student values(2,&#39;t&#39;,132.67,&#39;2020-09-08&#39;,&#39;F&#39;);insert into t_student values(3,null,132.67,&#39;2020-09-08&#39;,&#39;F&#39;);insert into t_student values(4,null,132.67,&#39;2020-09-08&#39;,&#39;F&#39;);not null - 非空drop table t_student;create table t_student(id int(7) primary key,  name varchar(10) unique,  height double(5,2) not null,  birthday date,  sex char(1));insert into t_student(id,name,birthday,sex) values(5,&#39;ss&#39;,&#39;2020-09-08&#39;,&#39;F&#39;);ERROR 1364 (HY000): Field &#39;height&#39; doesn&#39;t have a default value-- 某个列同时添加非空和唯一俩个约束呢????drop table t_student;create table t_student(id int(7) primary key,  name varchar(10) unique not null,  height double(5,2) not null,  birthday date,  sex char(1));</code></pre><h3 id="表级语法添加"><a href="#表级语法添加" class="headerlink" title="表级语法添加"></a>表级语法添加</h3><p>先定义列,然后再添加约束</p><p><em><strong>[constraint 约束名称] 约束类型(列名)</strong></em></p><p>约束命名规范 - 表名_列名_约束缩写</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 不支持not null和default.可以对约束进行命名,提高错误的可读性.-- pk列不需要另取约束的名称,始终使用默认的约束名称 - PRIMARY -- 列级添加约束的时候,不允许自定义约束的名称-- 表级添加约束的时候,是允许自定义约束的名称-- 约束的名称推荐 - 表名_列名_约束类型的缩写drop table t_student;create table t_student(id int(7),  name varchar(10),  height double(5,2) not null,  birthday date,  sex char(1),  primary key(id),  constraint t_student_name_uq unique(name));insert into t_student values(1,&#39;tom&#39;,132.67,&#39;2020-09-08&#39;,&#39;F&#39;);insert into t_student values(2,&#39;tom&#39;,132.67,&#39;2020-09-08&#39;,&#39;F&#39;);ERROR 1062 (23000): Duplicate entry &#39;tom&#39; for key &#39;t_student_name_uq&#39;</code></pre><h3 id="数据字典-系统表"><a href="#数据字典-系统表" class="headerlink" title="数据字典 - 系统表"></a>数据字典 - 系统表</h3><p>我们用户所有的操作都会被保存在数据字典中.<em><strong>数据字典</strong></em>就是系统表来保存用户表的信息的.</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 查询出t_student表中的约束类型和约束名称以及约束的列-- 到哪里查 - 系统表-- 查什么use information_schema desc table_constraintsselect constraint_name,constraint_type,table_name from table_constraints where table_name&#x3D;&#39;t_student&#39;;</code></pre><h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">primary key - 可以支持表级添加,不允许重新定义约束名not null - 仅仅添加列级添加unique - 可以支持表级添加,支持重新定义约束名foreign key - 仅仅支持表级添加,重新定义约束名default - 仅仅支持列级添加,给定一个默认值drop table t_student;create table t_student(id int(7) primary key,  name varchar(10) unique,  height double(5,2) default 3.14,  birthday datetime default now(),  sex char(1));insert into t_student(id,name,sex) values(1,&#39;xx&#39;,&#39;f&#39;);</code></pre><h3 id="外键约束-细节"><a href="#外键约束-细节" class="headerlink" title="外键约束 - 细节"></a>外键约束 - 细节</h3><p>外键约束不支持列级添加,仅仅支持表级添加.</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create table cus(id int(7) primary key,  cname varchar(20));create table ords(id int(7) primary key,  ordno varchar(20),  cus_id int(7),  constraint ords_cus_id_fk foreign key(cus_id) references cus(id));insert into cus values(1,&#39;tom&#39;),(2,&#39;jack&#39;);insert into ords values(1,&#39;1001&#39;,1);insert into ords values(2,&#39;1002&#39;,1);-- 外键列在引用的那个表中一定要存在记录的.否则插入失败.insert into ords values(3,&#39;1003&#39;,3);-- 外键列允许为空...insert into ords(id,ordno) values(4,&#39;1004&#39;);-- 执行DML操作delete from cus where id&#x3D;1;删除失败,由于外键约束的作用 - 由于id&#x3D;1的客户存在订单子记录正确的删除 - 先删除这个客户的所有的订单信息,然后才能够删除客户信息注意删除的顺序 - 先删除多的一方,然后删除一定方法.为了数据的安全....但是在实际开发中创建表的时候,绝对不要创建外键约束 - 增加表之间的耦合性.驰星emp表1   success 02   tao     1驰星studentid name  teacherid1  tom     12  jack    1success被开除了...① - 必须要创建约束 - 并不会真的进行删除操作  -  1-&gt;0② - 不许不要创建外键约束          表与表之间的关系是在程序员的心里中.....</code></pre><h3 id="联合主键"><a href="#联合主键" class="headerlink" title="联合主键"></a>联合主键</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">drop table user_role;drop table user;drop table role;create table user(id int(7) primary key,  username varchar(20));create table role(id int(7) primary key,  rolename varchar(20));create table user_role( user_id int(7),   role_id int(7),   primary key(user_id,role_id),   constraint user_role_user_id foreign key(user_id) references user(id),   constraint user_role_role_id foreign key(role_id) references role(id));</code></pre><h1 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h1><p><em><strong>DROP TABLE 表名</strong></em></p><p><strong>注意:删除时候注意外键约束的影响，需要先删除多的一方,才能够去删除一的一方</strong></p><h1 id="DML语句"><a href="#DML语句" class="headerlink" title="DML语句"></a>DML语句</h1><p>DML - Data Manipulation Language - 数据操纵语言.</p><p>都是对表中的记录进行操作</p><p><em><strong>(insert,update,delete)</strong></em></p><h2 id="insert语句"><a href="#insert语句" class="headerlink" title="insert语句"></a>insert语句</h2><blockquote><ol><li>插入数据</li></ol></blockquote><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 给表中的所有的列全部插入指定的顺序-- 插入数据的时候一定要注意数据类型,约束条件以及和表中的列的顺序要一一对应insert into table_name values(value1,value2,value3,valueN);-- 插入指定列,不是所有的列都插入了数据insert into table_name(列1,列3,列5) values(value1,value2,value3);-- 批量插入insert into table_name values(value1,value2),(value1,value2),(value1,value2);</code></pre><h3 id="利用一张表来构建另外一张表"><a href="#利用一张表来构建另外一张表" class="headerlink" title="利用一张表来构建另外一张表"></a>利用一张表来构建另外一张表</h3><ul><li><p>创建一张表,不仅仅是保留表的结构,还保留表的数据</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;create table dept_copy as select * from s_dept;mysql&gt;create table emp_copy as select id,first_name,salary from s_emp;</code></pre></li><li><p>创建一张表,但是仅仅是保留表的结构,不需要保留表的数据</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;create table emp_copy as select id,first_name,salary from s_emp where 1&#x3D;2;补充: select语句 where 1&#x3D;1 恒成立...口睡觉    口玩游戏   口做梦select * from hobbbies where xx&#x3D;&#39;sleeping&#39; and yy &#x3D; &#39;games&#39; and dd &#x3D; &#39;zuomeng&#39;;多重组合条件查询的时候?String str &#x3D; &quot;select * from hobbies where 1&#x3D;1&quot;;if(&quot;睡觉&quot;不为空)&#123;str+&#x3D;&quot; and xx&#x3D;&#39;sleeping&#39;&quot;;&#125;else if(玩游戏不为空)&#123;  str+&#x3D;&quot; and xx&#x3D;&#39;games&#39;&quot;;&#125;</code></pre></li></ul><h3 id="创建自增字段auto-increment"><a href="#创建自增字段auto-increment" class="headerlink" title="创建自增字段auto_increment"></a>创建自增字段auto_increment</h3><p>mysql中主键列id列自增的策略(主键生长策略) - 默认是从1开始,步长是1.</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- alter table emp auto_increment&#x3D;5;mysql - auto_incrementoralce - sequence主键的生成策略 - 插入数据的时候,主键列[id列]的数据是自动生成的.打开网页 - 出现一个注册的表单页面user(id,username,password);用户名:   tom密码:     123  提交按钮前台的数据tom,123就会发送到java的后台,java的后台接受到tom,123的后台经过代码处理 - 最终调用到insert into user(?,&#39;tom&#39;,&#39;123&#39;);drop table t3;create table t3(id int(7) primary key auto_increment,  name varchar(20),  pwd varchar(20));mysql&gt; insert into t3 values(1,&#39;tom&#39;,&#39;123&#39;);mysql&gt; insert into t3 values(2,&#39;tom&#39;,&#39;123&#39;);mysql&gt; insert into t3 values(3,&#39;tom&#39;,&#39;123&#39;);默认是从1开始,并且步长是1mysql&gt; insert into t3(name,pwd) values(&#39;jack&#39;,&#39;123&#39;);-- 查询最后一个插入的主键值mysql&gt; select last_insert_id();</code></pre><h3 id="获取auto-increment值"><a href="#获取auto-increment值" class="headerlink" title="获取auto_increment值"></a>获取auto_increment值</h3><p>可以通过mysql中的last_insert_id()函数来实现</p><h2 id="update语句"><a href="#update语句" class="headerlink" title="update语句"></a>update语句</h2><p>update 表名 set 列名=新列值[,列名2 = 新列值2] [where条件语句]</p><ul><li><p>更新所有行</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; update table_name set 列名&#x3D;新的列值[,列名2&#x3D;新的列N];mysql&gt; update t3 set name&#x3D;&#39;james&#39;,pwd&#x3D;&#39;000&#39;;</code></pre></li><li><p>更新指定行 - 带where条件</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; update语句 where 条件mysql&gt; update t3 set name&#x3D;&#39;jack&#39; where id&#x3D;5;</code></pre></li></ul><h2 id="delete语句"><a href="#delete语句" class="headerlink" title="delete语句"></a>delete语句</h2><p>delete考虑外键约束.先delete多的,再delete一的.</p><ul><li><p>删除所有行</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">delete</span> <span class="token keyword">from</span> table_name<span class="token punctuation">;</span></code></pre></li><li><p>删除指定行 - where条件</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">delete</span> <span class="token keyword">from</span> table_name <span class="token keyword">where</span>语句<span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">delete</span> <span class="token keyword">from</span> t3 <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span></code></pre></li><li><p>truncate 表名;//清空表</p></li></ul><h3 id="级联删除"><a href="#级联删除" class="headerlink" title="级联删除"></a>级联删除</h3><p>使用的比较少,不安全.也可以用<em><strong>触发器</strong></em>来代替.</p><p>constraint t_ord_cid_fk foreign key(cid) references t_customer(id) <strong>ON DELETE CASCADE;</strong></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">drop table ords;drop table cus;create table cus(id int(7) primary key,  cname varchar(20));create table ords(id int(7) primary key,  ordno varchar(20),  cus_id int(7),  constraint ords_cus_id_fk foreign key(cus_id) references cus(id) on delete cascade);insert into cus values(1,&#39;tom&#39;),(2,&#39;jack&#39;);insert into ords values(1,&#39;1001&#39;,1);insert into ords values(2,&#39;1002&#39;,1);mysql&gt; delete from cus where id&#x3D;1;Query OK, 1 row affected (0.00 sec)进行级联删除的操作,本质上还是先删除id&#x3D;1这个客户的所有的订单信息之后,再去自己.</code></pre><h1 id="事务-DTL"><a href="#事务-DTL" class="headerlink" title="事务(DTL)"></a>事务(DTL)</h1><p>在MYSQL中,<em><strong>所有的DML(insert,update,delete)操作</strong></em>在执行之后都会有一个<strong>commit操作</strong>[隐式的]</p><p>commit的意思就是用来<strong>提交事务[结束当前事务].</strong></p><p>oracle数据库中执行所有的DML操作之后,是需要手动执行<em><strong>commit</strong></em><em><strong>提交事务</strong></em>的操作的.</p><p>补充:如何区分DDL(create,alter,drop,<em><strong>truncate</strong></em>)和DML(insert,update,delete),看执行完毕之后</p><p>是否可以进行回滚操作(撤销操作),如果可以进行事务的回滚,属于DML操作.</p><p><strong>DTL,数据事务语言</strong></p><p><strong>事务的定义:</strong></p><p>就是指一组<strong>相关的SQL操作</strong>,我们所有的操作都是处在事务中的.</p><p>控制事务 - 就是控制事务的边界(事务的开始(begin) - 事务的结束(commit,rollback))</p><p><em><strong>一个事务的结束,代表着下一个事务的开始.</strong></em></p><p><strong>注意:</strong></p><ol><li><p>在数据库中**,执行业务的基本单位是事务,不是以某一条SQL**</p></li><li><p>数据库在默认情况下,事务都是打开的,也就是说它是一直</p></li><li><p>处在事务中的,一个事务的结束,代表着下一个事务的开启</p></li><li><p>执行commit或者rollback指令时,<strong>会结束当前事务</strong></p><p><strong>[已经提交的事务将不能够被回滚 - 已经不处于同一个事务中了,而事务与事务之间是隔离的]</strong></p></li></ol><p><strong>作用:用来保证数据的平稳性和可预测性.</strong></p><p><strong>事务的四大特性(ACID):</strong></p><ol><li><p><strong>Atomicity,原子性</strong>,事务是不可再分割的,要么同时成功,要么同时失败.</p><p>转账业务(账户+money,账户-money - 一组sql - 至于一个事务当中,并且要保证原子性.)</p></li><li><p><strong>Consistency,一致性</strong>,事务一旦结束,内存中的数据和数据库中的数据是保持一致的</p><p>example：A用户和B用户进行转账1000元，A账户减少1000和B账户增加1000的sql语句必须全部执行成功，不存在一半成功，一半失败。<br>但是无论如何执行，两个账户金额的改变加起来一定1000元，<strong>这就是一致性(完整性)。</strong></p></li><li><p><strong>Isolation,隔离性</strong>,事务之间互不干扰,一多个用户并发访问数据库，比如同时操作一张表。数据库为每一个用户开启事务。<strong>每个事务相互独立，互不干扰。</strong></p></li><li><p><strong>Durability,持久性</strong>,事务一旦提交,则数据持久化到数据库中,<strong>永久保存</strong></p><p>[涉及到数据库的备份和恢复的一些技术,冷备份,热备份…]</p></li></ol><h2 id="事务控制语句"><a href="#事务控制语句" class="headerlink" title="事务控制语句"></a>事务控制语句</h2><p>DTL - 事务控制语言.</p><ol><li><p><strong>BEGIN或START TRANSACTION</strong>；显式地开启一个事务；</p></li><li><p><strong>COMMIT；</strong>也可以使用COMMIT WORK，不过二者是等价的。COMMIT会提交事务，并使已对数据库进行的所有修改成为永久性的；</p></li><li><p><strong>ROLLBACK；</strong>有可以使用ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</p></li><li><p>SAVEPOINT identifier；SAVEPOINT允许在事务中创建一个保存点，一个事务中可以有多个SAVEPOINT；</p></li><li><p>RELEASE SAVEPOINT identifier；删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</p></li><li><p>ROLLBACK TO identifier；把事务回滚到标记点；</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 测试mysql&gt; begin;Query OK, 0 rows affected (0.00 sec)mysql&gt; update account set balance&#x3D;balance+1000 where id&#x3D;1;Query OK, 1 row affected (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 0mysql&gt; update account set balance&#x3D;balance+1000 where id&#x3D;1;Query OK, 1 row affected (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 0mysql&gt; savepoint ss1;Query OK, 0 rows affected (0.00 sec)mysql&gt; update account set balance&#x3D;balance+1000 where id&#x3D;1;Query OK, 1 row affected (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 0mysql&gt; update account set balance&#x3D;balance+1000 where id&#x3D;1;Query OK, 1 row affected (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 0mysql&gt; rollback to ss1;Query OK, 0 rows affected (0.00 sec)mysql&gt; select * from account;+----+---------+| id | balance |+----+---------+|  1 | 8000.00 ||  2 | 5000.00 |+----+---------+2 rows in set (0.00 sec)</code></pre></li><li><p>SET TRANSACTION；用来设置事务的隔离级别。InnoDB存储引擎提供事务的隔离级别有<em><strong>READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ和SERIALIZABLE。</strong></em></p></li></ol><h2 id="MYSQL-事务处理主要有两种方法"><a href="#MYSQL-事务处理主要有两种方法" class="headerlink" title="MYSQL 事务处理主要有两种方法"></a>MYSQL 事务处理主要有两种方法</h2><ol><li><p>用 BEGIN, ROLLBACK, COMMIT来实现</p><p>1-1. <strong>BEGIN 开始一个事务</strong></p><p>1-2. <strong>start transaction - 手动开始一个事务</strong></p></li></ol><p>1-2. ROLLBACK 事务回滚<br>    1-3. COMMIT 事务确认</p><ol start="2"><li><p>直接用 SET 来改变 MySQL 的自动提交模式: </p><p>2-1. <strong>SET AUTOCOMMIT=0 禁止自动提交</strong></p><p>2-2. SET AUTOCOMMIT=1 开启自动提交</p><p>注意:设置成禁止自动提交的操作的话,这个操作仅仅是针对当前的会话窗口有效.</p></li></ol><h2 id="事务的命令的演示DTL"><a href="#事务的命令的演示DTL" class="headerlink" title="事务的命令的演示DTL"></a>事务的命令的演示DTL</h2><p>DTL - Data Transaction Language - 数据事务语言 - commit,begin,rollback</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- mysql中事务是默认自动提交的.create table account( id int(7) primary key,   balance double(7,2));insert into account values(1,5000.0);insert into account values(2,5000.0);</code></pre><h3 id="为什么需要使用事务"><a href="#为什么需要使用事务" class="headerlink" title="为什么需要使用事务"></a>为什么需要使用事务</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">--</span> 级联删除<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>java代码中<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//俩个操作是需要保证事务的原子性 - 事务要么同时成功,要么同时失败.</span>     <span class="token keyword">try</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"delete from ords where cus_id=1"</span><span class="token punctuation">;</span>      <span class="token comment">// mysql事务默认是自动</span>    <span class="token comment">// 执行str2的sql语句 - 如果事务是自动提交的 - 数据已经发生改变了.</span>    <span class="token comment">//其他代码.. -> 发生了意外 - 发生了异常</span>    <span class="token comment">//一旦此行发生了异常,下面的代码将不会执行了...</span>  <span class="token class-name">String</span> str<span class="token operator">=</span><span class="token string">"delete from cus where id=1"</span><span class="token punctuation">;</span>   <span class="token comment">// 执行str的sql语句</span>   <span class="token comment">// 更新db</span>   <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token comment">//一旦try括号中出现了异常,那么就会自动进入到catch块中去执行</span>     <span class="token comment">//事务的回滚,事务的撤销 - 前提一定是手动提交的</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">--</span> rollback是不能够撤销已经提交的事务<span class="token punctuation">,</span>但是可以撤销尚未提交的事务<span class="token punctuation">.</span>           也是用来结束当前事务的<span class="token punctuation">.</span></code></pre><h2 id="多事务的并发处理机制"><a href="#多事务的并发处理机制" class="headerlink" title="多事务的并发处理机制"></a>多事务的并发处理机制</h2><p>原因:多个事务同时操作一个表中的<strong>同一行数据(争抢临界资源)</strong>,如果这些操作是.修改操作的话,就会产生并发问题,如果不处理,则会造成数据不一致的情况.</p><p>数据库可能产生的并发问题包括:</p><blockquote><ol><li><code>脏读</code></li></ol><p> 简介:一个事务读取到了另外一个事务中尚未提交的数据.</p><blockquote><p>是指一个事务正在访问数据,并且对这个数据进行修改,而这种修改<br>还没有提交到数据库中,而另一个事务也访问了这个数据,并且使用了这个数据<br>解决方法:一个事务在修改数据时,该数据不能被其他事务访问</p></blockquote></blockquote><blockquote><ol start="2"><li><code>不可重复读</code></li></ol><blockquote><p>是指一个事务多次读取同一条记录,如果此时另一个事务也访问并且<br>修改了该数据,则就会出现多次读取出现数据不一致的情况,原来的<br>数据变成了不可重复读取的数据<br>解决方法:只有在修改事务完全提交过后才可以读取到数据</p></blockquote></blockquote><blockquote><ol start="3"><li><code>幻读</code></li></ol><blockquote><p>是指一个事务修改表中的多行记录,但是此时另一个事务对该表格进行<br>了插入数据的操作,则第一个事务会发现表格中会出现没有被修改的行<br>就像发生了幻觉一样<br>解决方法:在一个事务提交数据之前,其他事务不能添加数据</p></blockquote></blockquote><p><strong>不可重复读的重点是修改，同样的条件，你读取过的数据，再次读取出来发现值不一样了幻读的重点在于新增或者删除</strong></p><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><blockquote><ol><li>READ UNCOMMITTED - 读未提交</li></ol><blockquote><p>这是事务最低的隔离级别，它充许另外一个事务可以看到这个事务未提交的数据。<br>解决第一类丢失更新的问题，但是会出现脏读、不可重复读.</p></blockquote></blockquote><blockquote><ol start="2"><li>READ COMMITTED</li></ol><blockquote><p>保证一个事务修改的数据提交后才能被另外一个事务读取，即另外一个事务不能读取该事务未提交的数据。<br>解决第一类丢失更新和脏读的问题，但会出现不可重复读.</p></blockquote></blockquote><blockquote><ol start="3"><li>REPEATABLE READ</li></ol><p> 简介:mysql默认的事务的隔离级别.</p><blockquote><p>保证一个事务相同条件下前后两次获取的数据是一致的<br>解决第一类丢失更新，脏读、不可重复读.</p></blockquote></blockquote><blockquote><ol start="4"><li>SERIALIZABLE</li></ol><blockquote><p>事务被处理为顺序执行。解决所有问题 - 有点类似于<strong>锁表.</strong></p></blockquote><blockquote><p>性能及其低下.</p></blockquote></blockquote><p><strong>提醒：</strong><br><strong>Mysql默认的事务隔离级别为repeatable_read</strong></p><h2 id="隔离级别的演示"><a href="#隔离级别的演示" class="headerlink" title="隔离级别的演示"></a>隔离级别的演示</h2><h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h2><ul><li><p>读未提交 - 产生脏读</p><p>一个事务能够读取到另外一个事务尚未提交的数据.</p><p><img src="/2021/12/12/43-MySQL%E8%AF%AD%E6%B3%95/zang.png" loading="lazy"></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 设置当前的会话窗口的mysql的事务的隔离级别设置读未提交.</span><span class="token comment">-- read uncommitted 一个事务可以读取到另外一个事务尚未提交的数据 - "脏读"</span><span class="token comment">-- db中session代表的是一次会话,mysql-client和mysql-server进行一次连接</span>mysql<span class="token operator">></span><span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">uncommitted</span><span class="token punctuation">;</span>mysql<span class="token operator">></span><span class="token keyword">select</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span>再打开一个窗口mysql<span class="token operator">></span><span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">uncommitted</span><span class="token punctuation">;</span></code></pre></li><li><p>读已提交 - 不可重复读(同一个事务中多次读取到的数据不一样)</p><ul><li><p>不可重复读 - 侧重于一个事务在多次读同一个数据,另外一个事务在进行<strong>修改并且提交了</strong></p><p><em><strong>不可重复读</strong></em> - 一个事务在<em><strong>读</strong></em>,另外一个事务在<em><strong>修改.</strong></em></p><p><img src="/2021/12/12/43-MySQL%E8%AF%AD%E6%B3%95/bu.png" loading="lazy"></p></li><li><p>幻读 - 一个事务在进行<strong>更新操作</strong>,另外一个事务在进行<strong>新增或者删除</strong>并且提交了.</p><p>对于更新的事务而言,就像发生了幻觉一样. 侧<strong>重新增或者删除.</strong></p><p><img src="/2021/12/12/43-MySQL%E8%AF%AD%E6%B3%95/huan.png" loading="lazy"></p></li></ul></li><li><p>可重复读</p><p><em><strong>同一个事务中多</strong></em>次读取到的数据是一样的.</p><p><img src="/2021/12/12/43-MySQL%E8%AF%AD%E6%B3%95/rep.png" loading="lazy"></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 这也是mysql默认的事务的隔离级别</span>mysql<span class="token operator">></span><span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">repeatable</span> <span class="token keyword">read</span><span class="token punctuation">;</span></code></pre></li><li><p>串行化</p><p>属于隔离级别是最高的,效率是最低的 - <em><strong>“锁表”</strong></em> - 保证数据的完整性(多并发)</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;set session transaction isolation level serializable;一个事务在查询,另外一个事务在执行dml操作(阻塞状态),因为第一个事务相当于&quot;锁表&quot;</code></pre></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>事务隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交(read uncommitted)</td><td>√</td><td>√</td><td>√</td></tr><tr><td>读已提交-(read committed)  - 不可重复读</td><td>×</td><td>√</td><td>√</td></tr><tr><td>可重复读(repeatable read)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>串行化(serializable)</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>框架 - mybatis[持久层框架],hibernate</p><p>Spring全家桶 - Spring,SpringMVC,SpringBoot,Alibaba Spring Cloud,SpringDataJPA,Spring Security…</p><p>使用,框架的底层代码以及设计思想 - corejava核心</p><h1 id="视图View"><a href="#视图View" class="headerlink" title="视图View"></a>视图View</h1><p>数据的基本对象:table,index,view,<em><strong>函数,存储过程</strong></em></p><p>视图的本质是一张**”虚拟表”** , 实际上就是一条简单的或者复杂的sql.视图就是对查询语句的封装.</p><p>视图的分类:</p><ul><li>简单视图 - 视图来自于单张表的查询 - 支持DML操作</li><li>复杂视图 - 视图来自于多张表的关联查询 - 不支持DML操作</li></ul><p>视图的好处:</p><ul><li>保证一些数据的安全性.</li><li>保证数据的清晰的结构,去除一些冗余的不需要的一些数据.</li><li>封装一些复杂的关联查询 - 多次进行调用.</li></ul><h2 id="创建视图的语法"><a href="#创建视图的语法" class="headerlink" title="创建视图的语法"></a>创建视图的语法</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create view 视图名称as select语句;删除视图drop view 视图的名称查询视图select * from 视图名称;</code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create view emp_viewas select id,name,start_date from emp;select * from emp_view;-- 更新原表emp,看是否对视图emp_view产生影响update emp set name &#x3D; &#39;aaa&#39; where id&#x3D;1;-- 查询视图(&quot;镜像&quot;)select * from emp_view;-- 结论1 - 修改原表,对视图造成影响-- 更新视图 - 简单视图支持DML操作update emp_view set name &#x3D; &#39;小小&#39; where id &#x3D; 1;-- 查看原来的表select * from emp;-- 结论2: 更新视图,也会对原表产生影响.-- 关于视图的查询,DML操作和对table的操作一模一样.</code></pre><h2 id="with-check-option"><a href="#with-check-option" class="headerlink" title="with check option"></a>with check option</h2><p>禁止更新视图的时候,去update它的来源的原表的条件列.</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 删除视图drop view emp_view;-- 创建视图create view emp_viewas select id,name,start_date from emp where id&#x3D;1;-- 查询视图mysql&gt; select * from emp_view;+----+--------+------------+| id | name   | start_date |+----+--------+------------+|  1 | 小小   | 2020-08-24 |+----+--------+------------+1 row in set (0.00 sec)-- 更新视图update emp_view set id &#x3D; 10 where id&#x3D;1;mysql&gt; select * from emp_view;Empty set (0.00 sec)</code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">with check option一定是配合where语句使用.如果创建视图的时候没有出现where语句,就没有必要出现它.-- 删除视图drop view emp_view;-- 创建视图create view emp_viewas select id,name,start_date from emp where id&#x3D;1 with check option;-- 更新视图 - 禁止更新视图中的视图来源的select语句的条件列update emp_view set id &#x3D; 10 where id&#x3D;1;ERROR 1369 (HY000): CHECK OPTION failed &#39;j08.emp_view&#39;</code></pre><h2 id="复杂视图"><a href="#复杂视图" class="headerlink" title="复杂视图"></a>复杂视图</h2><p>复杂视图:视图来源于多表查询,<em><strong>不支持DML操作的</strong></em></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create view emp_dept_regionas select d.id,d.name,r.name 区域名 from s_dept d join s_region r on d.region_id &#x3D; r.id where r.name&#x3D;&#39;Asia&#39;;mysql&gt; select * from emp_dept_region;+----+------------+-----------+| id | name       | 区域名    |+----+------------+-----------+| 44 | Operations | Asia      || 34 | Sales      | Asia      |+----+------------+-----------+2 rows in set (0.00 sec)</code></pre><h1 id="limit语句"><a href="#limit语句" class="headerlink" title="limit语句"></a>limit语句</h1><p>项目中只要涉及到查询的业务 - 涉及到分页的业务.</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from s_emp limit 5;&#x2F;&#x2F;前5行的数据limit m,n  m从0开始,第一行,n取多少条出来.select * from s_emp limit 0,2;&#x2F;&#x2F;第一行和第二行</code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> pageNow<span class="token punctuation">,</span><span class="token class-name">Integer</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//伪代码</span>    <span class="token comment">//1,3</span>    <span class="token comment">//第一行~第三行数据, limit 0,3</span>    <span class="token comment">//pageNow = 2, pageSize=3</span>  <span class="token comment">//第一页 limit 0,3</span>  <span class="token comment">//第二页 limit 3,3</span>    <span class="token comment">//limit (pageNow-1)*pageSize,pageSize;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="limit语句的性能问题"><a href="#limit语句的性能问题" class="headerlink" title="limit语句的性能问题."></a>limit语句的性能问题.</h2><p>sql优化操作.</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from xx where name &#x3D; &#39;xxx&#39;;&#x2F;&#x2F;全表扫描.如果name是一个唯一性的值.select * from xx where name &#x3D; &#39;xxx&#39; limit 1;&#x2F;&#x2F;避免全表扫描了.</code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">偏移量如果过大,会导致limit语句性能极其低下select * from xxx limit 100000,5;select * from xxx where id&gt;100000 limit 5;</code></pre><h1 id="经典题"><a href="#经典题" class="headerlink" title="经典题"></a>经典题</h1><pre class="language-mysql" data-language="mysql"><code class="language-mysql">drop table purcase;drop table customer;drop table product;create table product(  productid int(12) primary key,  productname varchar(20) not null,  unitprice double(11,2),  category varchar(28),  provider varchar(48));create table customer(customerid int(12) primary key,name varchar(48),location varchar(128));create table purcase(customerid int(12),productid int(12),quantity int(7));insert into product values(1,&#39;佳洁士&#39;,8.00,&#39;牙膏&#39;,&#39;宝洁&#39;);insert into product values(2,&#39;高露洁&#39;,6.50,&#39;牙膏&#39;,&#39;高露洁&#39;);insert into product values(3,&#39;洁诺&#39;,5.00,&#39;牙膏&#39;,&#39;联合利华&#39;);insert into product values(4,&#39;舒肤佳&#39;,3.00,&#39;香皂&#39;,&#39;宝洁&#39;);insert into product values(5,&#39;夏士莲&#39;,5.00,&#39;香皂&#39;,&#39;联合利华&#39;);insert into product values(6,&#39;雕牌&#39;,2.50,&#39;洗衣粉&#39;,&#39;纳爱斯&#39;);insert into product values(7,&#39;中华&#39;,3.50,&#39;牙膏&#39;,&#39;联合利华&#39;);insert into product values(8,&#39;汰渍&#39;,3.00,&#39;洗衣粉&#39;,&#39;宝洁&#39;);insert into product values(9,&#39;碧浪&#39;,4.00,&#39;洗衣粉&#39;,&#39;宝洁&#39;);insert into customer values(1,&#39;Dennis&#39;,&#39;黄浦区&#39;);insert into customer values(2,&#39;John&#39;,&#39;徐家汇&#39;);insert into customer values(3,&#39;Tom&#39;,&#39;闸北&#39;);insert into customer values(4,&#39;Jenny&#39;,&#39;静安&#39;);insert into customer values(5,&#39;Rick&#39;,&#39;浦东&#39;);insert into purcase values(1,1,3);insert into purcase values(1,5,2);insert into purcase values(1,8,2);insert into purcase values(2,1,5);insert into purcase values(2,5,4);insert into purcase values(2,8,3);insert into purcase values(3,1,1);insert into purcase values(3,5,1);insert into purcase values(3,6,3);insert into purcase values(3,8,1);insert into purcase values(4,1,7);insert into purcase values(4,5,3);insert into purcase values(4,8,3);insert into purcase values(5,6,2);insert into purcase values(5,7,8);commit;求购买的商品包含了顾客&quot;Dennis&quot;所购买的所有商品的顾客（姓名）-- 求选的课程包含了学生&quot;Dennis&quot;所选的所有课程的学生-- 找出Dennis购买的商品的idmysql&gt; select pur.productid aid from purcase pur join customer c on c.customerid &#x3D; pur.customerid where c.name&#x3D;&#39;Dennis&#39;;-- 模拟任意一个顾客购买的商品的id-- 5顾客不是目标客户mysql&gt; select p1.productid bid from purcase p1 where p1.customerid&#x3D;5;-- 3 目标客户mysql&gt; select p1.productid bid from purcase p1 where p1.customerid&#x3D;3;-- 确定的就是(1,5,8)每个商品id是否存在另外一个客户的(n1,n2,n3....)mysql&gt; select 1 from(select pur.productid aid from purcase pur join customer c on c.customerid &#x3D; pur.customerid where c.name&#x3D;&#39;Dennis&#39;) core_ where core_.aid not in(select p1.productid bid from purcase p1 where p1.customerid&#x3D;3)-- 进一步的整合mysql&gt; select c1.name from customer c1 where not exists(select 1 from(select pur.productid aid from purcase pur join customer c on   c.customerid &#x3D; pur.customerid where c.name&#x3D;&#39;Dennis&#39;) core_ where core_.aid not in(select p1.productid bid from purcase p1 where p1.customerid&#x3D;c1.customerid)) and c1.name&lt;&gt;&#39;Dennis&#39;;-- 思路: Dennis购买的商品的id全部找出来(1,5,8)当中.-- 如何确定另外一个顾客是目标客户   ① 商品id(1,3,5);   ② 商品id(1,5,7,8);      如果记录为空 - 是目标的.   -- 求购买的商品和顾客&quot;Dennis&quot;所购买的所有商品一模一样[个数也一样]-- 分解01 select c1.customerid,c1.name from customer c1 where not exists(select 1 from(select pur.productid aid from purcase pur join customer c on   c.customerid &#x3D; pur.customerid where c.name&#x3D;&#39;Dennis&#39;) core_ where core_.aid not in(select p1.productid bid from purcase p1 where p1.customerid&#x3D;c1.customerid)) and c1.name&lt;&gt;&#39;Dennis&#39;;-- 查询出Dennis购买的商品的个数mysql&gt; select count(*) from purcase pur where pur.customerid &#x3D; (select c2.customerid from customer c2 where c2.name&#x3D;&#39;Dennis&#39;);-- 继续找出购买的商品的个数也是3的所有的客户...mysql&gt; select p3.customerid,count(*) from purcase p3 group by p3.customerid having count(*)&#x3D;(select count(*) from purcase pur where pur.customerid &#x3D; (select c2.customerid from customer c2 where c2.name&#x3D;&#39;Dennis&#39;));-- 找出俩张虚拟表中的交集数据select * from( select c1.customerid xxid,c1.name from customer c1 where not exists(select 1 from(select pur.productid aid from purcase pur join customer c on   c.customerid &#x3D; pur.customerid where c.name&#x3D;&#39;Dennis&#39;) core_ where core_.aid not in(select p1.productid bid from purcase p1 where p1.customerid&#x3D;c1.customerid)) and c1.name&lt;&gt;&#39;Dennis&#39;) xx where xx.xxid in(select p3.customerid from purcase p3 group by p3.customerid having count(*)&#x3D;(select count(*) from purcase pur where pur.customerid &#x3D; (select c2.customerid from customer c2 where c2.name&#x3D;&#39;Dennis&#39;)));</code></pre><h1 id="mysql单行函数"><a href="#mysql单行函数" class="headerlink" title="mysql单行函数"></a>mysql单行函数</h1><p>简介:<font color="red">100%不会用.了解</font>.</p><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><ol><li><p>instr(str,substr) - 返回字符串substr在字符串str第一次出现的位置(str不包含substr时返回0)</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;select instr(&#39;ppopo&#39;,&#39;o&#39;);&#x2F;&#x2F;3,找不到则返回0</code></pre></li><li><p>lpad(str,len,padstr) - 用字符串padstr填补str左端直到字串长度为len并返回 </p></li><li><p>rpad(str,len,padstr) - 用字符串padstr填补str右端直到字串长度为len并返回</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;select rpad(&#39;abc&#39;,6,&#39;do&#39;);&#x2F;&#x2F;abcdod</code></pre></li><li><p>left(str,len) - 返回字符串str的左端len个字符 </p></li><li><p>right(str,len) - 返回字符串str的右端len个字符 </p></li><li><p>substring(str,pos,len) - 返回字符串str的位置pos起len个字符</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;select substring(&#39;hello&#39;,1,1);</code></pre></li><li><p>substring(str,pos) - 返回字符串str的位置pos起后面的子串 </p></li><li><p>ltrim(str) - 返回删除了左空格的字符串str  </p></li><li><p>rtrim(str)  - 返回删除了右空格的字符串str  </p></li><li><p>space(n) - 返回由n个空格字符组成的一个字符串  </p></li><li><p><em><strong>replace(str,from_str,to_str)  - 用字符串to_str替换字符串str中的子串from_str并返回</strong></em> </p></li><li><p>reverse(str) - 颠倒字符串str的字符顺序并返回</p></li><li><p>insert(str,pos,len,newstr) - 把字符串str由位置pos起len个字符长的子串替换为字符串</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;select insert(&#39;Carmen&#39;,2,5,&#39;*****&#39;);</code></pre></li><li><p>lower(str) - 返回小写的字符串str  </p></li><li><p>upper(str) - 返回大写的字符串str</p></li><li><p>char_length(str) -  不管汉字还是数字或者是字母都算是一个字符。</p></li><li><p>length(str);//汉字占3个,其他占1个.</p></li></ol><p>结合实际的表来进行操作.</p><p>把所有的first_name全部转换成大写</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;select upper(first_name) from s_emp;</code></pre><p>函数是可以嵌套函数使用的.</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;select upper(substring(first_name,1,1)) from s_emp;</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li><p>单独测试</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- utf8下一个汉字占3个字节,字母数字符号占1个字节-- gbk下一个汉字占2个字节,字母数字符号占1个字节mysql&gt; select length(&#39;abc&#39;);</code></pre></li><li><p>函数和表结合如何使用</p><p>函数(列)</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;select first_name,length(first_name) from s_emp;</code></pre></li><li><p><em><strong>函数是可以嵌套使用的</strong></em></p></li></ul><h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h3><ul><li><p>模拟银行的first_name模糊显示</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">Carmen C*****张三    张*李四儿  李**-- 思路 - 先截取first_name的第一个字符 - substring(str,pos,len)       -- 第一个字符后面继续拼接 (原字符长度-1)个* - rpad       -- concatmysql&gt; select first_name,concat(substring(first_name,1,1),rpad(&#39;*&#39;,char_length(first_name)-1,&#39;*&#39;)) from s_emp;-- 直接使用rpad函数 rpad(str,总长度,拼接的str);mysql&gt; select first_name,rpad(substring(first_name,1,1),char_length(first_name),&#39;*&#39;) from s_emp;-- 使用replace替换 replace(原字符串,原字符串即将被替代的字符串,新的字符串);mysql&gt; select first_name,replace(first_name,substring(first_name,2),rpad(&#39;*&#39;,char_length(first_name)-1,&#39;*&#39;)) from s_emp;-- insert(str,pos,len,newstr)mysql&gt; select first_name,insert(first_name,2,char_length(first_name)-1,rpad(&#39;*&#39;,char_length(first_name)-1,&#39;*&#39;)) from s_emp;</code></pre></li></ul><h1 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h1><ol><li><p>abs(n) - 求绝对值</p></li><li><p>mod(n,m) - 取模运算,返回n被m除的余数(同%操作符)</p><pre class="language-java" data-language="java"><code class="language-java">应用<span class="token operator">:</span> 利用取整和取余来获取某个数字的任意位上的某个数字<span class="token number">2018</span> <span class="token operator">-</span> <span class="token number">8</span>技巧 <span class="token operator">-</span> 只要获取某个数字的最末尾的单个数字 <span class="token operator">-</span> <span class="token operator">%</span><span class="token number">10</span>  获取<span class="token number">2018</span>中的<span class="token number">1</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span> <span class="token operator">=</span> <span class="token number">201</span>  select <span class="token function">mod</span><span class="token punctuation">(</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">2018</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>floor(n) - 返回不大于n的最大整数值</strong> - 向下取整  </p></li><li><p><strong>ceiling(n) - 返回不小于n的最小整数值</strong>  - 向上取整 </p></li><li><p>round(n[,d]) - 返回n的四舍五入值,保留d位小数(d的默认值为0)</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;select round(3.5);mysql&gt;select round(3.456,2);&#x2F;&#x2F;3.46</code></pre></li><li><p>pow(x,y) - 返回值x的y次幂  </p></li><li><p>sqrt(n) - 返回非负数n的平方根</p></li><li><p>pi() - 返回圆周率  </p></li><li><p>rand() - 返回在范围[0到1.0)内的随机浮点值</p></li><li><p>truncate(n,d) - 保留数字n的d位小数并返回  - 直接截取</p></li></ol>   <pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;select truncate(3.56,0);&#x2F;&#x2F;3</code></pre><h3 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 求1-3之间的随机整数</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token keyword">truncate</span><span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h1><p>查询当前系统的日期 - select now();</p><ol><li><p>dayofweek(date) - 返回日期date是星期几(1=星期天,2=星期一,……7=星期六,odbc标准)  </p></li><li><p>weekday(date) - 返回日期date是星期几(0=星期一,1=星期二,……6= 星期天)</p></li><li><p>year(date) - 返回date的年份(范围在1000到9999)    </p></li><li><p>month(date)  - 返回date中的月份数值   </p></li><li><p>dayofmonth(date) - 返回date是一月中的第几日(在1到31范围内)   </p></li><li><p>hour(time) - 返回time的小时数(范围是0到23)  </p></li><li><p>minute(time) - 返回time的分钟数(范围是0到59) </p></li><li><p>second(time) - 返回time的秒数(范围是0到59) </p></li><li><p>period_add(p,n) - 增加n个月到时期p并返回(p的格式yymm或yyyymm) </p><p>mysql&gt;select period_add(‘202008’,3) ;</p><p>注意:p可以是字符串,一定要满足一定的格式,或者可以直接使用date类型.</p></li><li><p>period_diff(p1,p2) - 返回在时期p1和p2之间月数(p1和p2的格式yymm或yyyymm)  p1-p2</p></li><li><p>curdate() - 以’yyyy-mm-dd’或yyyymmdd格式返回当前日期值(根据返回值所处上下文是字符串或数字) </p></li><li><p>curtime() - 以’hh:mm:ss’或hhmmss格式返回当前时间值(根据返回值所处上下文是字符串或数字)</p></li><li><p>now() - 以’yyyy-mm-dd hh:mm:ss’或yyyymmddhhmmss格式返回当前日期时间(根据返回值所处上下文是字符串或数字)     </p></li><li><p>last_day(date) - date日期所在月的最后一天是什么时候</p></li><li><p>datediff(d1,d2) - 两个日期d1,d2之间相差的天数</p></li><li><p>timestampdiff(type,d1,d2) - type是YEAR,d1和d2相差的年份,MONTH,月份</p><p>d1,d2 - yyyymmdd</p></li></ol><p>mysql中,虽然日期date_format函数来转成字符串类型的,mysql内部为了简化我们的写法,有的时候有的函数.</p><p>只要你传入的字符串满足一定的格式,那么它就会自动被转成日期函数.</p><h2 id="日期函数补充"><a href="#日期函数补充" class="headerlink" title="日期函数补充"></a>日期函数补充</h2><ul><li>date_add(date,interval 数字 type)</li><li>date_sub(date,interval 数字 type)</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">type</span>:<span class="token keyword">year</span><span class="token keyword">month</span><span class="token keyword">day</span><span class="token keyword">hour</span><span class="token keyword">minute</span><span class="token keyword">second</span></code></pre><h3 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h3><p>date_format(date,format)    </p><pre class="language-java" data-language="java"><code class="language-java">根据format字符串格式化date值  　<span class="token punctuation">(</span>在format字符串中可用标志符<span class="token operator">:</span>  　<span class="token operator">%</span>m 月名字<span class="token punctuation">(</span>january……december<span class="token punctuation">)</span>    　<span class="token operator">%</span>w 星期名字<span class="token punctuation">(</span>sunday……saturday<span class="token punctuation">)</span>    　<span class="token operator">%</span>d 有英语前缀的月份的日期<span class="token punctuation">(</span><span class="token number">1</span>st<span class="token punctuation">,</span> <span class="token number">2</span>nd<span class="token punctuation">,</span> <span class="token number">3</span>rd<span class="token punctuation">,</span> 等等。）    　<span class="token operator">%</span><span class="token class-name">Y</span> 年<span class="token punctuation">,</span> 数字<span class="token punctuation">,</span> <span class="token number">4</span> 位    　<span class="token operator">%</span>y 年<span class="token punctuation">,</span> 数字<span class="token punctuation">,</span> <span class="token number">2</span> 位    　<span class="token operator">%</span>a 缩写的星期名字<span class="token punctuation">(</span>sun……sat<span class="token punctuation">)</span>    　<span class="token operator">%</span>d 月份中的天数<span class="token punctuation">,</span> 数字<span class="token punctuation">(</span><span class="token number">00</span>……<span class="token number">31</span><span class="token punctuation">)</span>    　<span class="token operator">%</span>e 月份中的天数<span class="token punctuation">,</span> 数字<span class="token punctuation">(</span><span class="token number">0</span>……<span class="token number">31</span><span class="token punctuation">)</span>    　<span class="token operator">%</span>m 月<span class="token punctuation">,</span> 数字<span class="token punctuation">(</span><span class="token number">01</span>……<span class="token number">12</span><span class="token punctuation">)</span>    　<span class="token operator">%</span>c 月<span class="token punctuation">,</span> 数字<span class="token punctuation">(</span><span class="token number">1</span>……<span class="token number">12</span><span class="token punctuation">)</span>    　<span class="token operator">%</span>b 缩写的月份名字<span class="token punctuation">(</span>jan……dec<span class="token punctuation">)</span>    　<span class="token operator">%</span>j 一年中的天数<span class="token punctuation">(</span><span class="token number">001</span>……<span class="token number">366</span><span class="token punctuation">)</span>    　<span class="token operator">%</span><span class="token class-name">H</span> <span class="token number">24</span>时制小时<span class="token punctuation">(</span><span class="token number">00</span>……<span class="token number">23</span><span class="token punctuation">)</span>    　<span class="token operator">%</span>k 小时<span class="token punctuation">(</span><span class="token number">0</span>……<span class="token number">23</span><span class="token punctuation">)</span>    　<span class="token operator">%</span>h <span class="token number">12</span>时小时<span class="token punctuation">(</span><span class="token number">01</span>……<span class="token number">12</span><span class="token punctuation">)</span>    　<span class="token operator">%</span>i 小时<span class="token punctuation">(</span><span class="token number">01</span>……<span class="token number">12</span><span class="token punctuation">)</span>    　<span class="token operator">%</span>l 小时<span class="token punctuation">(</span><span class="token number">1</span>……<span class="token number">12</span><span class="token punctuation">)</span>    　<span class="token operator">%</span>i 分钟<span class="token punctuation">,</span> 数字<span class="token punctuation">(</span><span class="token number">00</span>……<span class="token number">59</span><span class="token punctuation">)</span>    　<span class="token operator">%</span>r 时间<span class="token punctuation">,</span><span class="token number">12</span> 小时<span class="token punctuation">(</span>hh<span class="token operator">:</span>mm<span class="token operator">:</span>ss <span class="token punctuation">[</span>ap<span class="token punctuation">]</span>m<span class="token punctuation">)</span>    　<span class="token operator">%</span>t 时间<span class="token punctuation">,</span><span class="token number">24</span> 小时<span class="token punctuation">(</span>hh<span class="token operator">:</span>mm<span class="token operator">:</span>ss<span class="token punctuation">)</span>    　<span class="token operator">%</span>s 秒<span class="token punctuation">(</span><span class="token number">00</span>……<span class="token number">59</span><span class="token punctuation">)</span>       　<span class="token operator">%</span>p am或pm    　<span class="token operator">%</span>w 一个星期中的天数<span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">=</span>sunday ……<span class="token number">6</span><span class="token operator">=</span>saturday ）                </code></pre><h1 id="转换函数"><a href="#转换函数" class="headerlink" title="转换函数"></a>转换函数</h1><p>字符串,数字|日期之间的相互转换问题 - 必须掌握.</p><ul><li><p>字符串和数字之间转换</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 字符串转换成数字</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token string">'10'</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- 数字->字符串</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>字符串与日期之间转换</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create table tt(id int(7) primary key,  birthday date);-- DML操作 - insert,update,delete  -- 支持自动转换-- mysql中insert语句中,只要的字符串满足&#39;yyyy-mm-dd&#39;  ,&#39;yyyy&#x2F;mm&#x2F;dd&#39;,&#39;yyyymmdd&#39;-- mysql底层会自动将这个字符串转换成日期类型insert into tt values(1,&#39;2020-09-08&#39;);insert into tt values(2,&#39;2020&#x2F;09&#x2F;08&#39;);insert into tt values(3,&#39;20200908&#39;);mysql&gt; insert into tt values(3,&#39;08&#x2F;09&#x2F;2013&#39;);&#x2F;&#x2F;error需要将字符串&#39;08&#x2F;09&#x2F;2013&#39; - date类型[年月日]  日期转换成字符串使用date_format函数mysql&gt; select date_format(now(),&#39;%y&#x2F;%m&#x2F;%d&#39;);mysql&gt; select first_name,date_format(start_date,&#39;%Y&#39;) from s_emp; 字符串转换成日期str_to_date(str,format)；注:format格式必须和str的格式相同，否则返回空%Y  %m  %d  %H   %i  %sselect str_to_date(&#39;08&#x2F;09&#x2F;2013&#39;,&#39;%d&#x2F;%m&#x2F;%Y&#39;);为了证明是对的mysql&gt; insert into tt values(4,str_to_date(&#39;08&#x2F;09&#x2F;2013&#39;,&#39;%d&#x2F;%m&#x2F;%Y&#39;));</code></pre><h1 id="函数练习"><a href="#函数练习" class="headerlink" title="函数练习"></a>函数练习</h1></li></ul><ol><li><p>找出名字长度超过5的员工</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> char_length<span class="token punctuation">(</span>first_name<span class="token punctuation">)</span> <span class="token keyword">from</span> s_emp <span class="token keyword">where</span> char_length<span class="token punctuation">(</span>first_name<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">;</span></code></pre></li><li><p>找出员工的工作月数</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token keyword">month</span><span class="token punctuation">(</span>start_date<span class="token punctuation">)</span> <span class="token keyword">from</span> s_emp<span class="token punctuation">;</span></code></pre></li><li><p>查询员工的工作天数</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> timestampdiff<span class="token punctuation">(</span><span class="token keyword">DAY</span><span class="token punctuation">,</span>start_date<span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> s_emp<span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> datediff<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>start_date<span class="token punctuation">)</span> <span class="token keyword">from</span> s_emp<span class="token punctuation">;</span></code></pre></li><li><p>计算一年前,当前,一年后的时间:</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> date_sub<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">interval</span> <span class="token number">1</span> <span class="token keyword">year</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>date_add<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">interval</span> <span class="token number">1</span> <span class="token keyword">year</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>当前日期前六个月的最后一天;</p><p>```sql<br>mysql&gt; select last_day(date_sub(now(),interval 6 month));</p></li><li><p>把员工的入职日期格式化为年/月/日</p><p>```sql<br>mysql&gt; select date_format(start_date,’%Y年%m月%d日’) from s_emp;</p></li><li><p>找出5月份入职的员工</p><p>```sql<br>mysql&gt; select first_name,start_date from s_emp where month(start_date)=5;</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>42-MySQL</title>
      <link href="/2021/12/12/42-MySQL/"/>
      <url>/2021/12/12/42-MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库的安装"><a href="#数据库的安装" class="headerlink" title="数据库的安装"></a>数据库的安装</h1><blockquote><p>换了mysql文件夹路径，首先要把之前的服务删除掉。<br>1.启动mysql服务<br>2.使用管理员权限启动cmd<br>3.输入命令：sc delete mysql<br>4.重启电脑</p></blockquote><ul><li><p>任何路径不要出现中文以及带有特殊符号的目录</p></li><li><p>解压 - D:\mysql- 5.7.28</p></li><li><p>在mysql解压的根目录下(D:\mysql- 5.7.28)创建一个<strong>my.ini</strong>文件</p></li><li><p>my.ini文件</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">client</span><span class="token punctuation">]</span></span><span class="token comment"># 设置mysql客户端默认字符集</span><span class="token key attr-name">default-character-set</span><span class="token punctuation">=</span><span class="token value attr-value">utf8</span> <span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span><span class="token comment"># 设置3306端口</span><span class="token key attr-name">port</span> <span class="token punctuation">=</span> <span class="token value attr-value">3306</span><span class="token comment"># 设置mysql的安装目录</span><span class="token key attr-name">basedir</span><span class="token punctuation">=</span><span class="token value attr-value">D:/DevelopTools/mysql-5.7.28</span><span class="token comment"># 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错</span><span class="token key attr-name">datadir</span><span class="token punctuation">=</span><span class="token value attr-value">D:/DevelopTools/mysql-5.7.28/data</span><span class="token comment"># 允许最大连接数</span><span class="token key attr-name">max_connections</span><span class="token punctuation">=</span><span class="token value attr-value">20</span><span class="token comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><span class="token key attr-name">character-set-server</span><span class="token punctuation">=</span><span class="token value attr-value">utf8</span><span class="token comment"># 创建新表时将使用的默认存储引擎</span><span class="token key attr-name">default-storage-engine</span><span class="token punctuation">=</span><span class="token value attr-value">INNODB</span><span class="token key attr-name">explicit_defaults_for_timestamp</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token comment"># 免密登录</span><span class="token comment"># skip-grant-tables</span><span class="token comment"># 设置默认时区</span><span class="token key attr-name">default-time_zone</span><span class="token punctuation">=</span><span class="token value attr-value">'<span class="token inner-value">+8:00</span>'</span></code></pre></li><li><p>以<font color="red">管理员的身份</font>打开命令行[黑窗口,终端]</p><p>进入到mysql安装目录的bin目录[binary二进制文件]</p><p>普及:操作系统允许用户执行应用程序的时候 - 有2种方式;第一种是GUI[图形化用户界面方式]方式</p><p>另外一种方式就CLI(Command Line Interface) - 命令行方式 - 掌握DOS命令基础</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">C:&gt;User&gt;admin&gt;D:D:&gt;cd mysql-5.7.28D:\mysql-5.7.28\&gt;cd bin</code></pre><pre class="language-cmd" data-language="cmd"><code class="language-cmd">D:\mysql-5.7.28\bin&gt;mysqld install</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">D:\mysql<span class="token operator">-</span><span class="token number">5.7</span><span class="token number">.28</span>\bin<span class="token operator">></span>mysqld <span class="token comment">--initialize --user=root --console</span></code></pre><p>初始化了以后，可以看到MySQL目录下，多了data目录，<font color="red">最后root@localhost后的文字为初始化后的root 密码</font></p><p><img src="/2021/12/12/42-MySQL/image-20211214164112354.png" loading="lazy"></p><blockquote><p>意外情况:</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">[Warning] TIMESTAMP with implicit DEFAULT value is deprecated.Please use --explicit_defaults_for_timestamp server option (seedocumentation for more details).</code></pre><p>在my.ini文件的末尾添加</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">explicit_defaults_for_timestamp&#x3D;true </code></pre><p>继续</p><p>mysql5.7需要手动初始化sqldata目录</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">D:\mysql-5.7.28\bin&gt;mysqld --initialize --insecure </code></pre><p>此处如果失败,将之前手动创建的D:/web/sqldata目录删除,再次重新执行该命令</p><p>[web目录保留]</p></blockquote><p>启动mysql服务器端</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">D:\mysql-5.7.28\bin&gt;net start mysql</code></pre><p>如果net命令不能够支持.右击计算机 - 管理 - 服务和应用程序 - 服务</p><p>到右边的窗口找到MYSQL - 右击 - 启动[建议开机自动启动]</p><p><em><strong>以后如果只要mysql的配置文件有任何改动,都是需要重启mysql服务的</strong></em></p><p>连接数据库</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">D:\mysql-5.7.28\bin&gt;mysql -uroot -pEnter Password: 使用之前生成的密码</code></pre></li><li><p>接着修改密码</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">set</span> password <span class="token operator">=</span> password<span class="token punctuation">(</span>‘新密码'<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre></li></ul><h2 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h2><ul><li><p>在my.ini文件的末尾添加一行</p><pre class="language-ini" data-language="ini"><code class="language-ini">skip-grant-tables</code></pre></li><li><p>重启mysql</p><ul><li><p>第一种方式</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">D:\mysql-5.7.28\bin&gt;net stop mysqlD:\mysql-5.7.28\bin&gt;net start mysql</code></pre></li><li><p>傻瓜式操作</p><p>如果net命令不能够支持.右击计算机 - 管理 - 服务和应用程序 - 服务</p><p>到右边的窗口找到MYSQL - 右击 - 重新启动[建议开机自动启动]</p></li></ul></li><li><p>登录</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">D:\mysql-5.7.28\bin&gt;mysql</code></pre></li></ul><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 第一种方式-- 使用数据库mysql&gt; use mysql-- 更新密码 - 密码不允许出现中文mysql&gt; update user set authentication_string&#x3D;password(&#39;新密码&#39;) where user&#x3D;&#39;root&#39;;-- 第二种方式mysql&gt; ALTER USER USER() IDENTIFIED BY &#39;root&#39;;-- 刷新权限mysql&gt; flush privileges;-- 断开mysql连接mysql&gt; exit-- 重新连接mysql&gt; mysql -uroot -p密码</code></pre><h1 id="预备工作"><a href="#预备工作" class="headerlink" title="预备工作"></a>预备工作</h1><ul><li><p>登录</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; mysql -uroot -p123456</code></pre></li><li><p>创建数据库</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; create database test;-- 查看所有的仓库的名称.mysql&gt; show databases;</code></pre></li><li><p>使用数据库</p><p>use 仓库名称;</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; use test;</code></pre></li><li><p>查看某个仓库下的表名称</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show tables;</code></pre></li></ul><h2 id="连接JDBC"><a href="#连接JDBC" class="headerlink" title="连接JDBC"></a>连接JDBC</h2><p>MySQL_JDBC_jar包的下载与使用（Windows）  </p><ul><li><p>下载</p><ol><li><p>打开MySQL_JDBC的下载网站<a href="https://dev.mysql.com/downloads/connector/j/">https://dev.mysql.com/downloads/connector/j/</a></p></li><li><p>选择操作系统：Platform Independent</p><p><img src="/2021/12/12/42-MySQL/image-20211212203957016.png" loading="lazy"></p></li><li><p>文件后缀名为 .tar.gz 的是Linux/IOS的压缩包；</p><p>后缀为 .zip 的是Windows下的压缩包，根据系统选择下载。</p></li><li><p>Oracle提供了两个版本的jdbc驱动包，一个是5.x.xx，另一个是8.x.xx，这两个版本的区别是：</p><ul><li>5.x.xx是给MySQL 5及以前版本提供的驱动包；而8.x.xx是给MySQL 6及以后版本提供的驱动包，但是也兼容MySQL 5。</li><li> 5.x.xx的注册驱动语句是： <code>com.mysql.jdbc.Driver</code> ；8.x.xx的是： <code>com.mysql.cj.jdbc.Driver</code> 。</li><li>8.x.xx在数据库连接语句后要添加SSL安全套接层字符串，否则编译失败；而5.x.xx只是会警告，不会编译失败。</li></ul></li><li><p>解压取出jar包</p></li></ol></li></ul><h1 id="导入sql脚本"><a href="#导入sql脚本" class="headerlink" title="导入sql脚本"></a>导入sql脚本</h1><p>目的就是用来初始化一些表以及表中的数据.</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; source &#x2F;...&#x2F;xxx.sql;</code></pre><h1 id="MySQL注释"><a href="#MySQL注释" class="headerlink" title="MySQL注释"></a>MySQL注释</h1><h2 id="MySQL-单行注释"><a href="#MySQL-单行注释" class="headerlink" title="MySQL 单行注释"></a>MySQL 单行注释</h2><ol><li><p>单行注释可以使用<code>#</code>注释符，<code>#</code>注释符后直接加注释内容。格式如下：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">#注释内容</code></pre><p>单行注释使用注释符<code>#</code>的示例如下：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#从结果中删除重复行</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> product_id<span class="token punctuation">,</span> purchase_price <span class="token keyword">FROM</span> Product<span class="token punctuation">;</span></code></pre></li><li><p>单行注释可以使用<code>--</code>注释符，<code>--</code>注释符后需要加一个空格，注释才能生效。格式如下：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 注释内容</span></code></pre><p>单行注释使用注释符<code>--</code>的示例如下：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 从结果中删除重复行</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> product_id<span class="token punctuation">,</span> purchase_price <span class="token keyword">FROM</span> Product<span class="token punctuation">;</span></code></pre><p><code>#</code>和<code>--</code>的区别就是：<code>#</code>后面直接加注释内容，而<code>--</code>的第 2 个破折号后需要跟一个空格符在加注释内容。</p></li></ol><h2 id="MySQL-多行注释"><a href="#MySQL-多行注释" class="headerlink" title="MySQL 多行注释"></a>MySQL 多行注释</h2><ul><li><p>多行注释使用<code>/* */</code>注释符。<code>/*</code>用于注释内容的开头，<code>*/</code>用于注释内容的结尾。多行注释格式如下：</p><p>注释内容写在<code>/*</code>和<code>*/</code>之间，可以跨多行。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*这条SELECT语句， 会从结果中删除重复行*/</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> product_id<span class="token punctuation">,</span> purchase_price <span class="token keyword">FROM</span> Product<span class="token punctuation">;</span></code></pre></li><li><p>任何注释（单行注释和多行注释）都可以插在 SQL 语句中，且注释可以放在 SQL 语句中的任意位置。且 SQL 语句中对注释的数量没有限制</p><ul><li><p>在 SQL 语句中插入单行注释，如下所示：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> product_id<span class="token punctuation">,</span> purchase_price<span class="token comment">-- 从结果中删除重复行。 </span><span class="token keyword">FROM</span> Product<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> product_id<span class="token punctuation">,</span> purchase_price<span class="token comment">#从结果中删除重复行。 </span><span class="token keyword">FROM</span> Product<span class="token punctuation">;</span></code></pre></li><li><p>在 SQL 语句中插入多行注释，如下所示：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> product_id<span class="token punctuation">,</span> purchase_price<span class="token comment">/* 这条SELECT语句，      会从结果中删除重复行。*/</span>     <span class="token keyword">FROM</span> Product<span class="token punctuation">;</span></code></pre></li></ul></li></ul><h1 id="idea配置Mysql"><a href="#idea配置Mysql" class="headerlink" title="idea配置Mysql"></a>idea配置Mysql</h1><ol><li>点击idea界面右侧Database按钮</li><li>在弹出的对话框点击**+**按钮，Data Source选择MySQL</li><li><img src="/2021/12/12/42-MySQL/image-20211214154142749.png" loading="lazy"></li></ol>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>41-JDBC常用数据库连接信息</title>
      <link href="/2021/12/12/41-JDBC%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E4%BF%A1%E6%81%AF/"/>
      <url>/2021/12/12/41-JDBC%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="Microsoft-SQL-Server"><a href="#Microsoft-SQL-Server" class="headerlink" title="Microsoft SQL Server"></a>Microsoft SQL Server</h1><p>Microsoft SQL Server JDBC Driver （一般用来连接 SQLServer 2000）<br>驱动程序包名：msbase.jar mssqlserver.jar msutil.jar<br>驱动程序类名：com.microsoft.jdbc.sqlserver.SQLServerDriver<br>JDBCURL: jdbc:microsoft:sqlserver://<server_name>:<port>默认端口1433，如果服务器使用默认端口则port可以省略</port></server_name></p><p>Microsoft SQL Server 2005 JDBC Driver<br>驱动程序包名：sqljdbc.jar<br>驱动程序类名：com.microsoft.sqlserver.jdbc.SQLServerDriver<br>JDBCURL: jdbc:sqlserver://<server_name>:<port>默认端口1433，如果服务器使用默认端口则port可以省略</port></server_name></p><p>==============================================================</p><h1 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h1><p>Oracle Thin JDBC Driver<br>驱动程序包名：ojdbc14.jar<br>驱动程序类名：<code>oracle.jdbc.driver.OracleDriver</code><br>JDBCURL：<code>jdbc:oracle:thin:@//&lt;host&gt;:&lt;port&gt;/ServiceName</code><br>  或<code>jdbc:oracle:thin:@&lt;host&gt;:&lt;port&gt;:&lt;SID&gt;</code></p><p>==============================================================</p><h1 id="IBM-DB2"><a href="#IBM-DB2" class="headerlink" title="IBM DB2"></a>IBM DB2</h1><p>IBM DB2 Universal Driver Type 4<br>驱动程序包名：db2jcc.jar db2jcc_license_cu.jar<br>驱动程序类名：<code>com.ibm.db2.jcc.DB2Driver</code><br>JDBCURL: <code>jdbc:db2://&lt;host&gt;[:&lt;port&gt;]/&lt;database_name&gt;</code></p><p>==============================================================</p><p>IBM DB2 Universal Driver Type 2<br>驱动程序包名：db2jcc.jar db2jcc_license_cu.jar<br>驱动程序类名：<code>com.ibm.db2.jcc.DB2Driver</code><br>JDBCURL: <code>jdbc:db2:&lt;database_name&gt;</code></p><p>==============================================================</p><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>MySQL Connector/J Driver<br>驱动程序包名：mysql-connector-java-x.x.xx-bin.jar<br>驱动程序类名：<code>com.mysql.jdbc.Driver </code><br>JDBCURL: <code>jdbc:mysql://&lt;host&gt;:&lt;port&gt;/&lt;database_name&gt;</code>默认端口3306，如果服务器使用默认端口则port可以省略</p><p>MySQL Connector/J Driver 允许在URL中添加额外的连接属性<code>jdbc:mysql://&lt;host&gt;:&lt;port&gt;/&lt;database_name&gt;?property1=value1&amp;property2=value2</code></p><p>==============================================================</p><h1 id="Informix"><a href="#Informix" class="headerlink" title="Informix"></a>Informix</h1><p>Informix JDBC Driver<br>驱动程序包名：ifxjdbc.jar<br>驱动程序类名：<code>com.informix.jdbc.IfxDriver</code><br>JDBCURL: <code>jdbc:informix-sqli://&#123;&lt;ip-address&gt;|&lt;host-name&gt;&#125;:&lt;port-number&gt;[/&lt;dbname&gt;]: INFORMIXSERVER=&lt;server-name&gt;</code></p><p>==============================================================</p><h1 id="Sybase"><a href="#Sybase" class="headerlink" title="Sybase"></a>Sybase</h1><p>Sybase Adaptive Server Enterprise JDBC Driver<br>驱动程序包名：jconn2.jar 或jconn3.jar<br>驱动程序类名：<code>com.sybase.jdbc2.jdbc.SybDriver (com.sybase.jdbc3.jdbc.SybDriver)</code><br>JDBCURL: <code>jdbc:sybase:Tds:&lt;host&gt;:&lt;port&gt;</code>默认端口5000</p><p>Sybase Adaptive Server Anywhere or Sybase IQ JDBC Driver<br>驱动程序包名：jconn2.jar 或jconn3.jar<br>驱动程序类名：<code>com.sybase.jdbc2.jdbc.SybDriver (com.sybase.jdbc3.jdbc.SybDriver)</code><br>JDBCURL: <code>jdbc:sybase:Tds:&lt;host&gt;:&lt;port&gt;?ServiceName=&lt;database_name&gt;</code>默认端口2638</p>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用端口</title>
      <link href="/2021/12/12/%E5%B8%B8%E7%94%A8%E7%AB%AF%E5%8F%A3/"/>
      <url>/2021/12/12/%E5%B8%B8%E7%94%A8%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>端口</th><th>服务</th><th>描述</th></tr></thead><tbody><tr><td>20/TCP,UDP</td><td>FTP [Default Data]</td><td>文件传输协议 - 默认数据端口</td></tr><tr><td>21/TCP,UDP</td><td>FTP [Control]</td><td>文件传输协议 - 控制端口</td></tr><tr><td>22/TCP,UDP</td><td>SSH</td><td>SSH（Secure Shell） - 远程登录协议，用于安全登录文件传输（SCP，SFTP）及端口重新定向</td></tr><tr><td>23/TCP,UDP</td><td>Telnet</td><td>Telnet终端仿真协议 - 未加密文本通信</td></tr><tr><td>25/TCP,UDP</td><td>SMTP</td><td>SMTP（简单邮件传输协议） - 用于邮件服务器间的电子邮件传递</td></tr><tr><td>43/TCP</td><td>WHOIS</td><td>WHOIS协议</td></tr><tr><td>53/TCP,UDP</td><td>DNS</td><td>DNS（域名服务系统）</td></tr><tr><td>67/UDP</td><td>BOOTPs</td><td>BOOTP（BootStrap协议）服务；同时用于动态主机设置协议</td></tr><tr><td>68/UDP</td><td>BOOTPc</td><td>BOOTP客户端；同时用于动态主机设定协议</td></tr><tr><td>69/UDP</td><td>TFTP</td><td>小型文件传输协议（小型文件传输协议）</td></tr><tr><td>80/TCP</td><td>Http</td><td>超文本传输协议（超文本传输协议）- 用于传输网页</td></tr><tr><td>110/TCP</td><td>POP3</td><td>邮局协议，“邮局协议”，第3版 - 用于接收电子邮件</td></tr><tr><td>113/TCP</td><td>Windows验证服务</td><td>Ident - 旧的服务器身份识别系统，仍然被IRC服务器用来认证它的用户</td></tr><tr><td>123/UDP</td><td>NTP</td><td>NTP（Network Time Protocol） - 用于时间同步</td></tr><tr><td>137/TCP,UDP</td><td>NetBIOS Name Service</td><td>NetBIOS NetBIOS 名称服务</td></tr><tr><td>138/TCP,UDP</td><td>NetBIOS Datagram Service</td><td>NetBIOS NetBIOS 数据报文服务</td></tr><tr><td>139/TCP,UDP</td><td>NetBIOS Session Service</td><td>NetBIOS NetBIOS 会话服务</td></tr><tr><td>143/TCP,UDP</td><td>IMAP</td><td>因特网信息访问协议（Internet信息访问协议 4） - 用于检索 电子邮件s</td></tr><tr><td>161/TCP,UDP</td><td>SNMP</td><td>简单网络管理协议 (简单网络管理协议)</td></tr><tr><td>179/TCP</td><td>Bgp</td><td>边界网关协议 (边界网关协议)</td></tr><tr><td>194/TCP</td><td></td><td>IRC（互联网中继聊天）</td></tr><tr><td>220/TCP,UDP</td><td>IMAP3</td><td>因特网信息访问协议，交互邮件访问协议第3版</td></tr><tr><td>389/TCP,UDP</td><td>LDAP</td><td>轻型目录访问协议 LDAP</td></tr><tr><td>443/TCP</td><td>Https</td><td>超文本传输安全协议 - 超文本传输协议 over TLS/SSL（加密传输）</td></tr><tr><td>546/TCP,UDP</td><td></td><td>DHCPv6客户端</td></tr><tr><td>547/TCP,UDP</td><td></td><td>DHCPv6服务器</td></tr><tr><td>631/TCP,UDP</td><td>CUPS</td><td>互联网打印协议</td></tr><tr><td>636/TCP,UDP</td><td>LDAPS</td><td>LDAP over SSL（加密传输，也被称为LDAPS）</td></tr><tr><td>991/TCP,UDP</td><td></td><td>NAS (Netnews Admin System)</td></tr><tr><td>1080/tcp</td><td>SOCKS</td><td>SOCKS代理</td></tr><tr><td>1194/udp</td><td></td><td>OpenVPN</td></tr><tr><td>1433/tcp,udp</td><td>SQL Server</td><td>Microsoft SQL 数据库系统</td></tr><tr><td>1434/tcp,udp</td><td>SQL Server monitor</td><td>Microsoft SQL 活动监视器</td></tr><tr><td>1521/tcp</td><td>Oracle</td><td>Oracle数据库 default listener, in future releases official port 2483</td></tr><tr><td>3306/tcp,udp</td><td>MySQL</td><td>MySQL数据库系统</td></tr><tr><td>3389/tcp</td><td>RDP</td><td>远程桌面协议（RDP）</td></tr><tr><td>5432/tcp</td><td>PostgreSQL</td><td>PostgreSQL database system</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>40-JDBC</title>
      <link href="/2021/12/12/40-JDBC/"/>
      <url>/2021/12/12/40-JDBC/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="1-了解JDBC的概念、作用"><a href="#1-了解JDBC的概念、作用" class="headerlink" title="1.了解JDBC的概念、作用"></a>1.了解JDBC的概念、作用</h2><blockquote><p>1995年,Java开始被开发者所接受，作为一个要进入高速发展的编程语言，对数据库操作的支持是必须的</p><p>妄想实现所有的数据库系统的操作</p><p>提供了JDBC API 和 JDBC驱动 API 两套接口</p></blockquote><p><strong>JDBC：</strong></p><ul><li>Java DataBase Connectivity</li><li>并不是英文单词的缩写,而是被注册了的名词</li></ul><p><strong>JDBC的作用：</strong></p><ul><li>让Java语言能够处理数据库的相关数据检索的操作</li></ul><p><strong>CRUD：</strong></p><ul><li>crud是指在做计算处理时的增加(Create)、检索(Retrieve)、更新(Update)和删除(Delete)几个单词的首字母简写。</li></ul><h2 id="2-了解JDBC的驱动类型（不关我事）"><a href="#2-了解JDBC的驱动类型（不关我事）" class="headerlink" title="2.了解JDBC的驱动类型（不关我事）"></a>2.了解JDBC的驱动类型（不关我事）</h2><p><strong>驱动</strong></p><ul><li>这里的驱动跟传统意义上的PC机上面的磁盘驱动器是不一样的概念,这里的驱动简洁地讲就是一段程序，该程序能够使硬件做一些事情。</li></ul><p><strong>JDBC驱动</strong></p><ul><li>JDBC驱动，就是一段程序，可以连接到数据库，并执行一些SQL操作，还能处理SQL返回的值。</li></ul><h2 id="3-掌握JDBC的编程步骤"><a href="#3-掌握JDBC的编程步骤" class="headerlink" title="3.掌握JDBC的编程步骤"></a>3.掌握JDBC的编程步骤</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Statement</span> statement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.注册驱动</span>    <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.获取数据库连接对象</span>    connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.创建Statement(执行sql语句的对象)</span>    statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.定义sql语句</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">" insert into t_student(name,gender,age) values ('lisi',false,18) "</span><span class="token punctuation">;</span>    <span class="token comment">//5.执行sql语句</span>    statement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//6.处理结果集,查询语句使用,增删改都用这一套</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//7.释放资源</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>statement<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="执行SQL有三种方式"><a href="#执行SQL有三种方式" class="headerlink" title="执行SQL有三种方式"></a>执行SQL有三种方式</h3><ul><li>不清楚是DDL、DML、DQL语句使用execute方法</li><li>确定是DDL、DML语句使用executeUpdate方法</li><li>确定是DQL语句使用executeQuery方法</li></ul><h2 id="4-掌握JDBC的结果集"><a href="#4-掌握JDBC的结果集" class="headerlink" title="4.掌握JDBC的结果集"></a>4.掌握JDBC的结果集</h2><ol><li><p>execute执行SQL语句</p><blockquote><ul><li>boolean <strong>execute(String sql)</strong>:可以执行<font color="red">更新和查询</font>的SQL语句，返回值是boolean类型的值，表示该SQL语句是否执行成功</li><li>int <strong>executeUpdate(String sql)</strong>:可以执行<font color="red">更新</font>的SQL语句，返回值是int类型的值，表示该SQL语句影响的记录的行数</li><li><font color="blue">ResultSet</font> <strong>executeQuery(String sql)</strong>:可以执行<font color="red">查询</font>的SQL语句，返回值是ResultSet类型的值，表示该SQL语句所查询的结果被封装在ResultSet中</li></ul></blockquote></li><li><p><font color="blue">ResultSet</font>的相关方法</p><blockquote><ul><li><p>boolean **next():**如果有下一行数据，返回true，游标往下挪动一行，并将这一行的数据全部返回</p></li><li><p>xxx <strong>getXxx(int columnIndex)</strong></p></li><li><p>xxx <strong>getXxx(String columnLabel)</strong></p><p>​    getXxx:其中的Xxx是数据类型，</p><p>​    columnIndex，根据列的位置获得数据（从1开始）</p><p>​    columnLabel，根据查询的列名获得数据</p></li></ul></blockquote></li></ol><p>掌握JDBC的事务处理</p><p>了解JDBC的批量更新</p><p>了解数据库的连接池</p><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题:"></a>面试题:</h1><p>请描述Statement、PreparedStatement、CallableStatement之间区别?</p><blockquote><p>Statement|PreparedStatement：</p><ul><li>PreparedStatement：预编译，效率高</li><li>PreparedStatement：防止SQL注入的安全风险</li></ul><p>CallableStatement：可以调用数据库的存储过程</p></blockquote><h4 id="DAO开发模式"><a href="#DAO开发模式" class="headerlink" title="DAO开发模式"></a>DAO开发模式</h4><p>  DAO:Data Access Object,数据访问对象<br>      专指该对象将和数据库相关的操作全部封装在该对象的DAO对象中</p><h5 id="ORM框架-对象-关系-映射-的底层就是JDBC"><a href="#ORM框架-对象-关系-映射-的底层就是JDBC" class="headerlink" title="ORM框架(对象,关系,映射)的底层就是JDBC"></a>ORM框架(对象,关系,映射)的底层就是JDBC</h5>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>39-JDK8.0新特性</title>
      <link href="/2021/12/10/39-JDK8.0%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2021/12/10/39-JDK8.0%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="JDk1-8新特性"><a href="#JDk1-8新特性" class="headerlink" title="JDk1.8新特性"></a>JDk1.8新特性</h1><h2 id="1-接口的改造"><a href="#1-接口的改造" class="headerlink" title="1-接口的改造"></a>1-接口的改造</h2><ul><li>JDK8.0之前的版本中，接口中的属性都是公开的静态常量，方法是公开的抽象方法</li><li>JDK8.0之后，接口中允许出现默认方法和静态方法</li></ul><pre class="language-java" data-language="java"><code class="language-java">静态方法：<span class="token keyword">public</span> <span class="token keyword">static</span> 返回类型 方法名（参数列表）<span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>默认方法：<span class="token keyword">public</span> <span class="token keyword">default</span> 返回类型 方法名（参数列表）<span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span></code></pre><h4 id="使用的注意点"><a href="#使用的注意点" class="headerlink" title="使用的注意点"></a>使用的注意点</h4><ul><li>默认方法具备继承性，可以被实现类或子接口继承过去</li><li>静态方法不能被实现类或子接口继承，只能通过所在的接口名调用</li></ul><h4 id="解决同名冲突的问题"><a href="#解决同名冲突的问题" class="headerlink" title="解决同名冲突的问题"></a>解决同名冲突的问题</h4><ul><li>类优先原则<ul><li>当父类或实现的接口中出现了同名并且已经实现好的方法时，如果子类中没有重写，则默认使用的是父类的方法</li><li>当实现的多个接口中出现了同名并且已经实现好的方法时，子类 必须重写该方法，否则报错，因为程序不清楚到底使用哪个接口默认实现方法</li></ul></li></ul><h2 id="2-函数式接口"><a href="#2-函数式接口" class="headerlink" title="2-函数式接口"></a>2-函数式接口</h2><ul><li>只包含一个抽象方法的接口，称为函数式接口</li><li>可以在一个接口上使用@FunctionalInterface注解，这样做可以检查它是否是一个函数式接口，同时javadoc也会包含一条声明，说明这个接口是一个函数式接口</li></ul><h3 id="内置四大核心函数式接口"><a href="#内置四大核心函数式接口" class="headerlink" title="内置四大核心函数式接口"></a>内置四大核心函数式接口</h3><p><img src="/2021/12/10/39-JDK8.0%E6%96%B0%E7%89%B9%E6%80%A7/image-20211210160527604.png" loading="lazy"></p><h4 id="内置其他函数式接口"><a href="#内置其他函数式接口" class="headerlink" title="内置其他函数式接口"></a>内置其他函数式接口</h4><p><img src="/2021/12/10/39-JDK8.0%E6%96%B0%E7%89%B9%E6%80%A7/image-20211210160600859.png" loading="lazy"></p><h2 id="3-Lambda表达式的概述"><a href="#3-Lambda表达式的概述" class="headerlink" title="3-Lambda表达式的概述"></a>3-Lambda表达式的概述</h2><ul><li><p>Lambda是一个匿名函数，我们可以把Lambda表达式理 解为是一段可以传递的代码（将代码像数据一样进行传递）</p></li><li><p>使用Lambda表达式可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升</p></li></ul><p><strong>应用场景</strong></p><ul><li><p>接口 a = Lambda表达式;（用得不多）</p></li><li><p>method(Lambda表达式); </p><p>public void method(接口 a){</p><p>};</p></li></ul><p><strong>使用Lambda表达式的好处</strong></p><ul><li>语句更加简洁</li><li>更加紧凑，使Java语言的表达能力得到了提升</li></ul><p><strong>对比使用匿名内部类和Lambda表达式的区别</strong></p><p><strong>应用举例1</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//使用匿名内部类的方式</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Runnable</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Runnable的run()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用Lambda表达式</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Runnable</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Runnable的run()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>应用举例2</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//使用匿名内部类的方式</span>    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> comparator1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用Lambda表达式</span>    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> comparator2 <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator2<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="4-Lambda表达式的语法"><a href="#4-Lambda表达式的语法" class="headerlink" title="4-Lambda表达式的语法"></a>4-Lambda表达式的语法</h2><p><strong>JDK8.0版本从语言级别中引入的一种新的语法元素或者操作符，这个操作符为 “-&gt;” ， 该操作符被称为 Lambda操作符或箭头操作符，它将Lambda分为两个部分</strong></p><ul><li>左侧<ul><li>指定了Lambda表达式需要的参数列表</li></ul></li><li>右侧<ul><li>指定了Lambda体，该体是抽象方法的实现逻辑，即Lambda表达式要执行的功能代码放在该体中</li></ul></li></ul><p><strong>语法</strong></p><ul><li>(参数类型 参数名1,参数类型 参数名2) -&gt; { 方法体的实现（Lambda体） }</li><li>(String o1, String o2)-&gt;{return o1.compareTo(o2);}</li></ul><h4 id="语法格式1"><a href="#语法格式1" class="headerlink" title="语法格式1"></a>语法格式1</h4><ul><li><p>无参、无返回类型</p></li><li><p>```java<br>Runnable r = () -&gt; System.out.println(“无参无返回类型”);<br>r.run();</p><pre class="language-none"><code class="language-none">#### 语法格式2- 有一个参数、无返回值类型- &#96;&#96;&#96;java  Consumer&lt;Integer&gt; c1 &#x3D; (Integer i) -&gt;System.out.println(i);  c1.accept(100);</code></pre></li></ul><h4 id="语法格式3"><a href="#语法格式3" class="headerlink" title="语法格式3"></a>语法格式3</h4><ul><li><p>有一个参数、无返回值类型，类型可以省略（泛型）</p></li><li><p>```java<br>Consumer<Integer> c2 = (i) -&gt;System.out.println(i);<br>c2.accept(200);</Integer></p><pre class="language-none"><code class="language-none">#### 语法格式4- 有一个参数、无返回值类型，小括号可以省略- &#96;&#96;&#96;java  Consumer&lt;Integer&gt; c3 &#x3D; i -&gt;System.out.println(i);  c3.accept(300);</code></pre></li></ul><h4 id="语法格式5"><a href="#语法格式5" class="headerlink" title="语法格式5"></a>语法格式5</h4><ul><li><p>有多个参数、有返回值类型、有多条语句</p></li><li><p>```java<br>BiFunction&lt;Integer,Integer,Integer&gt; f = (i, j) -&gt; {</p><pre><code>int result =i+j;System.out.println(&quot;有多个参数、有返回值类型、有多条语句,result=&quot;+result);return result;</code></pre><p>};<br>System.out.println(f.apply(100,200));</p><pre class="language-none"><code class="language-none">#### 语法格式6- 只有一条语句、有返回值类型，大括号和return可以省略- &#96;&#96;&#96;java  Comparator&lt;Integer&gt; c &#x3D; (o1,o2) -&gt; o1.compareTo(o2);</code></pre></li></ul><h4 id="语法格式总结"><a href="#语法格式总结" class="headerlink" title="语法格式总结"></a>语法格式总结</h4><ul><li>左侧参数列表中的参数类型可以省略</li><li>如果左侧参数列表中只有一个参数，则小括号也可以省略； 如果没有参数，则小括号不能省略</li><li>右侧的Lambda体中如果仅有一句话，则大括号可以省略</li><li>右侧的Lambda体中仅有的一句话为return语句，则大括 号和return都可以一起省略，不能只省略其中一个</li></ul><p>以下见pdf</p><p>方法引用</p><p>构造器引用</p><p>数组引用</p><p>Stream API</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>38-Java反射</title>
      <link href="/2021/12/06/38-Java%E5%8F%8D%E5%B0%84/"/>
      <url>/2021/12/06/38-Java%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="Java的反射"><a href="#Java的反射" class="headerlink" title="Java的反射"></a>Java的反射</h1><h2 id="1-类的加载、连接、初始化"><a href="#1-类的加载、连接、初始化" class="headerlink" title="1-类的加载、连接、初始化"></a>1-类的加载、连接、初始化</h2><h4 id="类的加载来源"><a href="#类的加载来源" class="headerlink" title="类的加载来源"></a>类的加载来源</h4><ul><li>本地class文件</li><li>jar包</li><li>通过网络加载class文件</li><li>动态编译Java源文件并加载</li></ul><h4 id="类的连接"><a href="#类的连接" class="headerlink" title="类的连接"></a>类的连接</h4><ul><li>验证<ul><li>检验被加载类的内部结构</li></ul></li><li>准备<ul><li>为静态域分配内存，并赋默认值</li></ul></li><li>解析<ul><li>将符号引用替换成直接引用</li></ul></li></ul><h4 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h4><ul><li>初始化类中的静态域</li></ul><h3 id="JVM初始化一个类的步骤"><a href="#JVM初始化一个类的步骤" class="headerlink" title="JVM初始化一个类的步骤"></a>JVM初始化一个类的步骤</h3><ul><li>如果该类还未被加载和连接，则先加载和连接该类</li><li>如果该类的父类还没有被初始化，则先初始化父类</li><li>如果该类中有静态代码块，则依次执行这些静态代码块，静态代码块也叫类的初始化代码块</li></ul><h3 id="类的初始化时机"><a href="#类的初始化时机" class="headerlink" title="类的初始化时机"></a>类的初始化时机</h3><ul><li>创建该类的实例</li><li>调用该类的静态方法</li><li>访问该类（接口）的静态域 (静态变量)</li><li>使用反射的方式强制创建该类（接口）对应的Class对象</li><li>直接使用java.exe程序运行该类</li><li>访问该类的在编译期确定值的静态域，不会初始化该类 (常量)</li><li>访问该类的在运行期才能确定值的静态域，会初始化该类 (静态变量)</li></ul><h2 id="2-Class"><a href="#2-Class" class="headerlink" title="2-Class"></a>2-Class</h2><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><ul><li>类的类</li><li>所有的类都是Class的实例</li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li>Class forName(String)<ul><li>根据一个类的全限定名获取Class对象</li></ul></li><li>Package getPackage() <ul><li>获取该类型的包对象</li></ul></li><li>int getModifiers() <ul><li>获取该类型表示修饰符的int值</li></ul></li><li>String getSimpleName() <ul><li>获取该类型的简单名称</li></ul></li><li>String getName() <ul><li>获取该类型的全限定名称</li></ul></li><li>boolean isInterface() <ul><li>判断该类型是类还是接口</li></ul></li><li>Class[] getInterfaces() <ul><li>获取该类型继承或者实现的接口数组</li></ul></li><li>Constructor[] getConstructors() <ul><li>获取该类构造器的数组（只能取得公开的）</li></ul></li><li>Constructor[] getDeclaredConstructors() <ul><li>获取该类构造器的数组（可以取得所有的，包括私有的）</li></ul></li><li>Field[] getFields() <ul><li>获取该类型的域的数组（只能取得公开的）</li></ul></li><li>Field[] getDeclaredFields()<ul><li>获取该类型的域的数组（可以取得所有的，包括私有的）</li></ul></li><li>Method[] getMethods() <ul><li>获取该类型的方法的数组（只能取得公开的）</li></ul></li><li>Method[] getDeclaredMethods() <ul><li>获取该类型的方法的数组（可以取得所有的，包括私有的）</li></ul></li></ul><h2 id="3-反射操作对象"><a href="#3-反射操作对象" class="headerlink" title="3-反射操作对象"></a>3-反射操作对象</h2><h3 id="利用反射创建对象"><a href="#利用反射创建对象" class="headerlink" title="利用反射创建对象"></a>利用反射创建对象</h3><ul><li>使用Class的newInstance()方法构造对象，该方式需要被构造对象的类中有一个无参的构造器</li><li>使用Class的getConstructor(Class … parameterTypes) 方法获取指定参数的构造器对象，然后再使用该构造器的newInstance(Object… initargs)方法再构造出一个对象</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> cls <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">//使用Class的newInstance()方法构造对象，该方式需要被构造对象的类中有一个无参的构造器</span><span class="token class-name">Person</span> person <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用Class的getConstructor(Class ... parameterTypes)方法获取指定参数的构造器对象，然后再使用该构造器的newInstance(Object... initargs)方法再构造出一个对象</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> c1 <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> person1 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="利用反射访问域"><a href="#利用反射访问域" class="headerlink" title="利用反射访问域"></a>利用反射访问域</h3><p><strong>Class有关Field的方法</strong></p><ul><li>Field getField(String name)<ul><li>返回指定名称的<font color="red">公开域</font></li></ul></li><li>Field getDeclaredField(String name)<ul><li>返回指定名称的域</li></ul></li><li>Field[] getFields()<ul><li>返回所有<font color="red">公开域</font>的数组</li></ul></li><li>Field[] getDeclaredFields()<ul><li>返回所有的域数组</li></ul></li></ul><p><strong>Field有关方法</strong></p><ul><li>setAccessible(boolean flag)<ul><li>访问该域时是否执行访问权限检查，true为可访问表示取消访问权限检查；false为不可访问表示执行访问权限检查</li></ul></li><li>setXxx(Object obj,Object value)<ul><li>将obj对象的该域的值设置成value值</li></ul></li><li>getXxx(Object obj)<ul><li>获取obj对象的该域的值</li></ul></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Field</span> nameField <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//无视访问修饰符,可以访问private</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nameField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等价与person2.name,反射思维</span></code></pre><h3 id="利用反射调用方法"><a href="#利用反射调用方法" class="headerlink" title="利用反射调用方法"></a>利用反射调用方法</h3><p><strong>Class有关Method的方法</strong></p><ul><li>Method getMethod(String name, Class … parameterTypes)<ul><li>返回指定方法名称、指定形参类型的公开方法</li></ul></li><li>Method getDeclaredMethod(String name, Class …  parameterTypes)<ul><li>返回指定方法名称、指定形参类型的方法</li></ul></li><li>Method[] getMethods()<ul><li>返回该类型以及父类型所有的公开方法的数组</li></ul></li><li>Method[] getDeclaredMethods()<ul><li>返回该类型所有的方法的数组</li></ul></li></ul><p><strong>Method有关方法</strong></p><ul><li>setAccessible(boolean flag)<ul><li>访问该方法时是否执行访问权限检查，true为可访问表示取消访问权限检查；false为不可访问表示执行访问权限检查</li></ul></li><li>Object invoke(Object obj,Object… args)<ul><li>调用obj对象的该方法，args是调用该方法传入的参数</li><li>返回值是该方法本身的返回值</li></ul></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Method</span> eatMethod <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eatMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//无视访问修饰符,可以访问private</span>eatMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>调用静态方法</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Method</span> multiplyMethod <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"multiply"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>multiplyMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调静态方法,可以使用类对象</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>multiplyMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调静态方法,null表示没有对象</span></code></pre><h1 id="Java动态代理"><a href="#Java动态代理" class="headerlink" title="Java动态代理"></a>Java动态代理</h1><p><font color="red">JavaSE阶段，实现代理有两种方法：继承、实现接口</font></p><p>继承见代码version3</p><p>实现接口见代码version4</p><h3 id="Java动态代理-1"><a href="#Java动态代理-1" class="headerlink" title="Java动态代理"></a><strong>Java动态代理</strong></h3><ul><li>目标类<ul><li>真正做业务逻辑的类</li></ul></li><li>代理类<ul><li>可以认为是目标类的一个替代品</li></ul></li><li>执行点<ul><li>将一些通用功能、共性服务施加在目标类之上</li></ul></li></ul><h3 id="Java的动态代理需要目标类实现接口"><a href="#Java的动态代理需要目标类实现接口" class="headerlink" title="Java的动态代理需要目标类实现接口"></a><strong>Java的动态代理需要目标类实现接口</strong></h3><h3 id="核心接口"><a href="#核心接口" class="headerlink" title="核心接口"></a><strong>核心接口</strong></h3><ul><li>Proxy<ul><li>所有动态代理类的父类</li><li>static Object <strong>newProxyInstance</strong>(ClassLoader classLoader, Class … interfaces, InvcationHandler handler)<ul><li>该方法可以根据目标类的类加载器、目标类所实现的接口、handler对象静态地返回一个该目标对象的一个动态代理类</li></ul></li></ul></li><li>InvocationHandler<ul><li>该接口是定义动态代理对象执行方法的时机</li><li>public Object <strong>invoke</strong>(Object proxy, Method method, Object[] args)<ul><li>该方法是具体执行代理类方法时实际上执行的方法，proxy是代理类， method是目标类的方法，args是执行目标类所传入的参数</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>37-网络编程</title>
      <link href="/2021/12/06/37-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2021/12/06/37-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h1><ul><li>应用层（Application）</li><li>表示层（Presentation ）</li><li>会话层（Session ）</li><li>传输层（Transport ）</li><li>网络层（NetWork ）</li><li>数据链路层（Data Link </li><li>物理层（Physical ）</li></ul><img src="/2021/12/06/37-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20211206161957266.png" style="zoom:50%;" loading="lazy"><h1 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h1><img src="/2021/12/06/37-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20211206162036637.png" alt="image-20211206162036637" style="zoom:50%;" loading="lazy"><h1 id="网络编程常用类"><a href="#网络编程常用类" class="headerlink" title="网络编程常用类"></a>网络编程常用类</h1><h2 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h2><ul><li>表示一个IP地址</li><li>常用方法<ul><li>static InetAddress getLocalHost()<ul><li>获取本地IP</li></ul></li><li>static InetAddress getByName(String)<ul><li>根据名称(一般是域名)获取一个IP</li></ul></li><li>static InetAddress[] getAllByName()<ul><li>获取IP地址所绑定的所有IP</li></ul></li><li>String getHostName()<ul><li>获取IP地址的主机名称</li></ul></li><li>String getHostAddress()<ul><li>获取IP地址的主机IP</li></ul></li></ul></li></ul><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><ul><li>Uniform Resource Locator</li><li>统一资源定位地址</li><li>它规范了www资源定位地址的表示方法</li><li>常见的协议与端口<ul><li>HTTP-80</li><li>HTTPS-433</li><li>FTP-21</li><li>TELNET-23</li><li>SMTP-25</li><li>ORACLE的服务端口1521</li><li>ORACLE的HTTP服务端口8080</li><li>TOMCAT服务端口8080</li><li>MySQL服务端口3306</li></ul></li></ul><h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><ul><li>套接字</li><li>每个套接字都有两个流<ul><li>输入流</li><li>输出流</li></ul></li><li>建立连接<ul><li>建立网络连接类似于拨打电话：一端必须拨打电话，另一端必须在接听</li></ul></li><li>寻址连接包括如下内容<ul><li>远程计算机的地址或者是名称</li><li>在服务器上识别目的的端口号</li></ul></li></ul><h2 id="Socket连接模型"><a href="#Socket连接模型" class="headerlink" title="Socket连接模型"></a>Socket连接模型</h2><p><img src="/2021/12/06/37-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20211206170102507.png" loading="lazy"></p><h2 id="ServerSocket"><a href="#ServerSocket" class="headerlink" title="ServerSocket"></a>ServerSocket</h2><ul><li>使用ServerSocket类建立一个等待请求的服务器套接字对象</li><li>构造方法<ul><li>ServerSocket(int port)<ul><li>创建一个端口为port的服务器套接字对象</li></ul></li><li>ServerSocket(int port,int backlog)<ul><li>可以通过backlog指定最大连接数</li></ul></li><li>ServerSocket(int port,int backlog,InetAddress address)<ul><li>可指定绑定的IP地址为address</li></ul></li></ul></li><li>接受客户端的请求<ul><li>public Socket accept() throws IOException<ul><li>监听并接受到此套接字的连接</li></ul></li></ul></li></ul><h2 id="Socket-1"><a href="#Socket-1" class="headerlink" title="Socket"></a>Socket</h2><ul><li>客户端使用Socket类建立一个到服务器的套接字对象,连接建立后服务器和客户端双方都通过Socket进行通信</li><li>构造方法<ul><li>Socket(String host,int port)<ul><li>创建一个套接字对象,host指定主机,port指定端口</li></ul></li><li>Socket(String host,port,InetAddress localAddr,int localPort)<ul><li>额外指定本地机器使用的地址和端口</li></ul></li></ul></li><li>获得输入/输出流<ul><li>getInputStream()<ul><li>返回此套接字的输入流</li></ul></li><li>getOutputStream()<ul><li>返回此套接字的输出流</li></ul></li></ul></li></ul><h2 id="编写Socket程序的一般步骤"><a href="#编写Socket程序的一般步骤" class="headerlink" title="编写Socket程序的一般步骤"></a>编写Socket程序的一般步骤</h2><ul><li>创建服务器ServerSocket，设置建立连接的port</li><li>创建客户端Socket，设置绑定的主机名称或IP地址，指定连接端口号</li><li>客户端Socket发起连接请求</li><li>建立连接(accept)</li><li>获取InputStream和OutputStream</li><li>利用InputStream和OutputStream进行数据通信</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>36-Java线程</title>
      <link href="/2021/12/03/36-Java%E7%BA%BF%E7%A8%8B/"/>
      <url>/2021/12/03/36-Java%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h1><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><blockquote><ul><li>操作系统能同时做很多事情，由不同的进程来完成</li><li>人类的视觉反应时间是0.1秒，在一个时间点上，程序是单个运行的</li><li>进程有自己独立的CPU时间片、代码和数据</li><li>各个进程之间没有任何的影响</li></ul></blockquote><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><blockquote><ul><li>线程是相对于进程而言的</li><li>多线程是共同存在于一个进程中的</li><li>线程有自己独立的CPU时间片，但是可以共享代码和数据</li><li>进程依赖操作系统</li><li>线程依赖进程</li></ul></blockquote><h1 id="多线程的概念"><a href="#多线程的概念" class="headerlink" title="多线程的概念"></a>多线程的概念</h1><p>在Java中，不可能用多进程来处理一些应用</p><p>Java从语言级支持多线程</p><p>在Java中，一切都是对象，所以线程也是一个对象，这个对象也有相对应的类</p><p>在Java中，线程是由三部分组成的</p><ul><li>cpu时间片</li><li>数据</li><li>线程的代码</li></ul><img src="/2021/12/03/36-Java%E7%BA%BF%E7%A8%8B/image-20211203094311370.png" alt="线程模型" style="zoom:25%;" loading="lazy"><h2 id="Java的多线程"><a href="#Java的多线程" class="headerlink" title="Java的多线程"></a>Java的多线程</h2><h3 id="线程对象与线程的区别"><a href="#线程对象与线程的区别" class="headerlink" title="线程对象与线程的区别"></a>线程对象与线程的区别</h3><ul><li>线程对象代表了一个线程，但并不是说一个线程对象就是一个线程</li><li>我们不可能绕开JVM直接创建线程，我们只能访问JVM中的线程对象，线程是由JVM来启动的</li><li>线程对象就是我们访问系统底层的线程的一个代理，当我们调用start()方法之后线程才会启动</li></ul><h1 id="多线程编程的两种方式"><a href="#多线程编程的两种方式" class="headerlink" title="多线程编程的两种方式"></a>多线程编程的两种方式</h1><h3 id="继承Thread类，覆盖run-方法"><a href="#继承Thread类，覆盖run-方法" class="headerlink" title="继承Thread类，覆盖run()方法"></a>继承Thread类，覆盖run()方法</h3><ul><li><font color="blue">run()方法中写的代码就是这个线程的代码</font></li><li>要启动线程,必须调用<font color="red">start()</font>方法</li></ul><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><ul><li>实现run()方法</li><li>new一个Runnable对象</li><li>构造一个线程对象</li><li>Thread t = new Thread(Runnable对象);</li></ul><h4 id="线程的三要素"><a href="#线程的三要素" class="headerlink" title="线程的三要素"></a>线程的三要素</h4><blockquote><ul><li>CPU时间片 : <ul><li>继承Thread类即可</li></ul></li><li>线程代码 : <ul><li>覆盖Thread类的run方法,或者实现Runnable接口的run方法</li></ul></li><li>数据 : <ul><li>一般情况下,继承Thread父类的方式没有数据</li><li><font color="red">只有实现了Runnable接口的方式才会有数据</font></li></ul></li></ul></blockquote><h3 id="继承Thread与实现Runnable接口两种编码的区别"><a href="#继承Thread与实现Runnable接口两种编码的区别" class="headerlink" title="继承Thread与实现Runnable接口两种编码的区别"></a>继承Thread与实现Runnable接口两种编码的区别</h3><ul><li>继承的好处：编码简单、可读性好</li><li>实现接口的好处：保留了类的继承，代码和逻辑分离，便于实现多线程</li><li><font color="red"><strong>真正的多线程代码应该使用实现Runnable接口的方式</strong></font></li></ul><h1 id="线程的相关方法"><a href="#线程的相关方法" class="headerlink" title="线程的相关方法"></a>线程的相关方法</h1><blockquote><h3 id="void-setPriority-int-n"><a href="#void-setPriority-int-n" class="headerlink" title="void setPriority(int n)"></a>void setPriority(int n)</h3><ul><li>设置优先级，可以是1~10，默认是5，数据越大，优先级 越高</li></ul><h3 id="并不是每个操作系统都会按照优先级来选择线程，有些操作系统并不看这个优先级"><a href="#并不是每个操作系统都会按照优先级来选择线程，有些操作系统并不看这个优先级" class="headerlink" title="并不是每个操作系统都会按照优先级来选择线程，有些操作系统并不看这个优先级"></a>并不是每个操作系统都会按照优先级来选择线程，有些操作系统并不看这个优先级</h3><ul><li>独占式操作系统：按优先级</li><li>共享式操作系统：不按优先级来</li></ul><h4 id="由于需要跨平台，所以最好不要通过优先级来决定线程的执行顺序。"><a href="#由于需要跨平台，所以最好不要通过优先级来决定线程的执行顺序。" class="headerlink" title="由于需要跨平台，所以最好不要通过优先级来决定线程的执行顺序。"></a><font color="red">由于需要跨平台，所以最好不要通过优先级来决定线程的执行顺序</font>。</h4><h4 id="在独占式系统中，高优先级进入可运行状态，会打断正在运行的低优先级的线程，高优先级线程将进入运行状态"><a href="#在独占式系统中，高优先级进入可运行状态，会打断正在运行的低优先级的线程，高优先级线程将进入运行状态" class="headerlink" title="在独占式系统中，高优先级进入可运行状态，会打断正在运行的低优先级的线程，高优先级线程将进入运行状态"></a>在独占式系统中，高优先级进入可运行状态，会打断正在运行的低优先级的线程，高优先级线程将进入运行状态</h4></blockquote><hr><blockquote><h3 id="static-void-yield-也叫让位方法"><a href="#static-void-yield-也叫让位方法" class="headerlink" title="static void yield() 也叫让位方法"></a>static void yield() 也叫让位方法</h3><ul><li>暂停线程，优先级大于等于本类的线程才能去抢系统时间片，低于本类的没机会抢到，并不是所有的操作系统都支持线程的优先级，Windows7、Windows8.1、 Windows10、Linux不支持。</li></ul><h3 id="this-yield"><a href="#this-yield" class="headerlink" title="this.yield()"></a>this.yield()</h3><ul><li>只会让位优先级高的，如果看不出来，只能是系统对线程的优先级支持的不是很完善</li></ul></blockquote><hr><blockquote><h3 id="void-setDaemon-boolean-on"><a href="#void-setDaemon-boolean-on" class="headerlink" title="void setDaemon(boolean on)"></a>void setDaemon(boolean on)</h3><ul><li>将该线程标记为守护线程或用户线程，守护线程依赖于其他的线程，<font color="red">当虚拟机结束的时候，该线程也会结束</font></li></ul><hr><h3 id="static-void-sleep-long-millis"><a href="#static-void-sleep-long-millis" class="headerlink" title="static void sleep(long millis)"></a>static void sleep(long millis)</h3><ul><li>暂停线程，本线程不会去抢系统时间片，等sleep完了才会去抢系统时间片</li></ul><hr><h3 id="void-join"><a href="#void-join" class="headerlink" title="void join()"></a>void join()</h3><ul><li>等待该线程终止，（即先让该线程运行，其他线程暂停）</li></ul><h3 id="void-join-long-millis"><a href="#void-join-long-millis" class="headerlink" title="void join(long millis)"></a>void join(long millis)</h3><ul><li>等待该线程终止的时间最长为millis毫秒</li></ul><h3 id="void-join-long-millis-int-nanos"><a href="#void-join-long-millis-int-nanos" class="headerlink" title="void join(long millis, int nanos)"></a>void join(long millis, int nanos)</h3><ul><li>等待该线程终止的时间最长为millis毫秒+nanos纳秒</li></ul><h4 id="让本线程加入到主线程中去-相当于单线程执行"><a href="#让本线程加入到主线程中去-相当于单线程执行" class="headerlink" title="让本线程加入到主线程中去,相当于单线程执行"></a>让本线程加入到主线程中去,相当于单线程执行</h4><h4 id="要先启动线程才能join，否则无效"><a href="#要先启动线程才能join，否则无效" class="headerlink" title="要先启动线程才能join，否则无效"></a>要先启动线程才能join，否则无效</h4></blockquote><h1 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h1><p>不推荐,但是简单:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//这个synchronized锁的对象一般是当前对象</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//(同步方法) 此方法简单,但是效率低下,相当于一整个方法都串行</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//模拟网络延迟</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取账户中的余额</span>            <span class="token keyword">int</span> balance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span>            <span class="token comment">//余额不足</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>balance<span class="token operator">&lt;</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"余额不足"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">500</span><span class="token punctuation">;</span>            <span class="token comment">//模拟网络延迟</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><p>推荐:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//加个this表示锁的是当前对象</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//(同步代码块)</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//模拟网络延迟</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//获取账户中的余额</span>                <span class="token keyword">int</span> balance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span>                <span class="token comment">//余额不足</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>balance <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"余额不足"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">500</span><span class="token punctuation">;</span>                <span class="token comment">//模拟网络延迟</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><blockquote><ul><li><p>线程的栈空间是独立的，堆空间是共享的，所以多个线程都可以访问堆空间中的对象</p><ul><li>栈空间里面放的是run()方法里的变量，堆空间里面放的是线程对象的成员变量。</li></ul></li><li><p>原子操作，几个不可分割的操作，要么一起做，要么不做</p></li><li><p>多线程并发访问共享资源，如果不加同步控制，打断了原子操作，会造成共享资源的数据冲突</p><ul><li>数据不一致</li><li>数据不完整</li></ul></li></ul></blockquote><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><blockquote><ul><li><font color="red">synchronized(对象 o）{代码块}</font></li><li>只有获得o的锁标记的线程才能进入代码块</li><li>当代码块执行结束后，o的锁标记就会被自动释放</li><li>注意同步代码块锁的是对象，而不是代码块</li><li>对o加锁的同步代码块，只有取得o对象的锁标记的同步代码块才能进入</li><li>代码块中一般会是对o进行的原子操作</li><li>当一个线程失去CPU时间片，进入可运行状态，或者进入阻塞状态时候，不会释放拥有的锁标记</li></ul></blockquote><h3 id="synchronized第二种用法"><a href="#synchronized第二种用法" class="headerlink" title="synchronized第二种用法"></a>synchronized第二种用法</h3><blockquote><p>在方法的声明中加入synchronized修饰符</p><ul><li><font color="red">public synchronized void method(){}</font></li><li>synchronized作为方法修饰符时，在整个方法范围内对this加锁， 哪个线程能获得this的锁标记，就能调用这个方法</li></ul></blockquote><h2 id="线程的同步的应用"><a href="#线程的同步的应用" class="headerlink" title="线程的同步的应用"></a>线程的同步的应用</h2><blockquote><p>回忆区别</p><ul><li>ArrayList、Vector</li><li>HashMap、HashTable</li><li>StringBuilder、StringBuffer</li></ul><p>List list = Collections.syncronizedList(new  ArrayList());</p><ul><li>外同步，同步的方式在外部完成</li></ul><p>List list = new Vector();</p><ul><li>内同步，类本身方法同步</li></ul></blockquote><h2 id="线程在同步中的状态"><a href="#线程在同步中的状态" class="headerlink" title="线程在同步中的状态"></a>线程在同步中的状态</h2><blockquote><ul><li>每一个对象不仅仅有个锁标记，他还有一个锁池</li><li>锁池中存放着等待该对象锁标记的线程</li><li>当一个线程希望获得对象的锁标记，却拿不到的时候，这个线程会进入该对象的锁池。我们称这个线程进入了锁池状态</li><li>当对象的锁被释放之后，锁池中的线程有好多时，谁能得到对象的锁标记呢？（去抢）</li><li>当锁池中的一个线程得到锁标记后，进入什么状态呢？（可运行状态）</li><li>进入运行状态只有一条路，从可运行状态被系统选中</li><li>谁能出锁池<ul><li>操作系统会从锁池中挑选一个线程进入可运行，操作系统有可能会选出等待时间较长线程</li><li>对象本身没有选择的权利</li></ul></li></ul></blockquote><h2 id="线程的同步注意事项"><a href="#线程的同步注意事项" class="headerlink" title="线程的同步注意事项"></a>线程的同步注意事项</h2><ul><li><p>同步代码的嵌套</p><ul><li><p>CPU在某一时刻永远只执行一个线程</p><ul><li><p><font color="red">一个对象的锁标记只能给一个线程，但是一个线程可以同时拥有多个对象的锁标记，即同步代码块可以嵌套</font>。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//拿到o1的锁标记</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//这个线程同时拥有o1和o2的对象的锁标记</span>        <span class="token comment">//...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//避免这样写</span></code></pre></li></ul></li></ul></li><li><p><strong><font color="blue">当一个线程阻塞在锁池中时，不会释放拥有的其他锁标记<font color="red">(死锁)</font></font>。</strong></p></li></ul><h1 id="线程的状态图"><a href="#线程的状态图" class="headerlink" title="线程的状态图"></a>线程的状态图</h1><p>七状态图:</p><p><img src="/2021/12/03/36-Java%E7%BA%BF%E7%A8%8B/image-20211203154250278.png" loading="lazy"></p><p><img src="/2021/12/03/36-Java%E7%BA%BF%E7%A8%8B/image-20211203154342322.png" loading="lazy"></p><p>五状态图（自己画的）:</p><p><img src="/2021/12/03/36-Java%E7%BA%BF%E7%A8%8B/image-20211203153932819.png" loading="lazy"></p><h1 id="线程间的通信"><a href="#线程间的通信" class="headerlink" title="线程间的通信"></a>线程间的通信</h1><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ul><li>T1:synchronized(o1){synchronized(o2){ }}</li><li>T2:synchronized(o2){synchronized(o1){ }}</li><li>多线程中，每个线程不释放自己拥有的资源，却申请别的线程拥有的资源</li></ul><h3 id="解决死锁的问题需要线程间的通信"><a href="#解决死锁的问题需要线程间的通信" class="headerlink" title="解决死锁的问题需要线程间的通信"></a>解决死锁的问题需要线程间的通信</h3><ul><li>线程通信是为了多线程之间的协作</li><li>让出资源</li><li>等待通知</li></ul><h3 id="线程同步经典案例"><a href="#线程同步经典案例" class="headerlink" title="线程同步经典案例"></a><font color="red">线程同步经典案例</font></h3><p><strong>生产者、消费者模式</strong></p><ul><li>模拟一个栈</li><li>入栈、出栈两个方法</li></ul><p>见study26</p><h3 id="方法java-lang-Object的"><a href="#方法java-lang-Object的" class="headerlink" title="方法java.lang.Object的"></a>方法java.lang.Object的</h3><blockquote><p>wait()</p><ul><li><font color="red">必须出现在同步代码中</font></li><li>线程会释放所拥有的所有的锁标记，而且肯定至少有一个锁被释放</li><li>线程退出运行状态，进入对象的等待队列（这是一个对象的第三个固有的组成部分）</li><li>等待队列也是一个阻塞的状态</li></ul><p>notify()</p><ul><li>必须出现在同步代码中</li><li>从当前的等待队列中释放一个线程（notifyAll为释放所有线程），一般会用notifyAll</li><li>不会释放自己拥有的对象的标记锁</li></ul><p>notifyAll()</p><ul><li>notifyAll()会把所有的线程都从等待队列中释放出来，出来后的线程进入什么状态？</li><li>进入锁池状态<ul><li>无论状态如何转变，都不能改变程序执行的流程，所以从等待队列中释放出来的线程还是得得到锁标记才能执行wait后面的代码， 所以它只能回到锁池中等待对象的锁标记</li></ul></li><li>使用if还是使用while<ul><li>在多生产者或多消费者的情况下，要通过while反复判断，以确保生产在它生产时栈一定是不满的</li></ul></li></ul></blockquote><h3 id="等待队列和锁池的区别"><a href="#等待队列和锁池的区别" class="headerlink" title="等待队列和锁池的区别"></a><font color="red">等待队列和锁池的区别</font></h3><ul><li>线程要获得锁标记，而得不到锁标记的则进锁池，是迫不得已的</li><li>等待队列中的线程是主动进入的</li><li>锁池中的线程手里还可能有锁标记</li><li>等待队列中的线程手里一定没有当前对象的锁标记</li><li>等待队列中的线程如果没有调notify的话，永远出不去， 只有当调用了notify后，才会出去。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>35-JavaIO流</title>
      <link href="/2021/11/29/35-JavaIO%E6%B5%81/"/>
      <url>/2021/11/29/35-JavaIO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="流的概念"><a href="#流的概念" class="headerlink" title="流的概念"></a>流的概念</h1><p><img src="/2021/11/29/35-JavaIO%E6%B5%81/image-20211129104441136.png" loading="lazy"></p><h2 id="流的分类-三个要素"><a href="#流的分类-三个要素" class="headerlink" title="流的分类 (三个要素)"></a>流的分类 (三个要素)</h2><ul><li><h5 id="处理方式-字节和字符"><a href="#处理方式-字节和字符" class="headerlink" title="处理方式 (字节和字符)"></a>处理方式 (字节和字符)</h5><ul><li>字节可以操作任何格式的文件</li><li>字符只能操作字符格式的文件</li></ul></li><li><h5 id="流的方向-参照物-应用程序"><a href="#流的方向-参照物-应用程序" class="headerlink" title="流的方向 - 参照物:应用程序"></a>流的方向 - 参照物:应用程序</h5><ul><li><strong>InputStream</strong> : 可以通过该流将外部的数据读进我们的程序中</li><li><strong>OutputStream</strong> : 可以通过该流将我们的程序中的数据输出到外部</li></ul></li><li><h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><ul><li>如果这个流是处理其他流的，就是<font color="red">处理流（过滤流）</font></li><li>如果这个流不处理其他流，就不是处理流（过滤流），是<font color="red">节点流</font></li><li>节点流，就是直接“搭”在数据上面的，节点流操作数据的来源，而处理流操作节点流。</li></ul></li></ul><h3 id="流的分类区分方式"><a href="#流的分类区分方式" class="headerlink" title="流的分类区分方式"></a>流的分类区分方式</h3><blockquote><p>区分输入流</p><ul><li>输入流<ul><li>以InputStream、Reader结尾</li></ul></li><li>输出流<ul><li>以OutputStream、Writer结尾</li></ul></li></ul><p>区分字节流、字符流</p><ul><li>字节流<ul><li>以Stream结尾</li></ul></li><li>字符流<ul><li>以Reader结尾</li></ul></li></ul><p>区分节点流、处理流</p><ul><li>看构造器里面的参数</li><li>节点流<ul><li>构造器参数是<font color="red">String、File</font>等</li></ul></li><li>处理流<ul><li>构造器参数<font color="green">有其他流</font></li></ul></li></ul></blockquote><h3 id="InputStream的方法、OutputStream的方法"><a href="#InputStream的方法、OutputStream的方法" class="headerlink" title="InputStream的方法、OutputStream的方法"></a>InputStream的方法、OutputStream的方法</h3><blockquote><p>InputStream</p><ul><li><p>int read()</p></li><li><p>int read(byte[])</p></li><li><p>int read(byte[], int, int)</p></li><li><p>void close()</p></li><li><p>void mark(int)</p></li></ul><p>OutputStream</p><ul><li>void write(int)</li><li>void write(byte[])</li><li>void write(byte[], int, int)</li><li>void close()</li><li>void flush()</li></ul></blockquote><h3 id="Reader、Writer的方法"><a href="#Reader、Writer的方法" class="headerlink" title="Reader、Writer的方法"></a><font color="green">Reader、Writer的方法</font></h3><blockquote><p>Reader</p><ul><li>int read()</li><li>int read(char[])</li><li>int read(char[], int, int)</li></ul><p>Writer</p><ul><li>void write(int)</li><li>void write(char[])</li><li>void write(char[], int, int)</li><li>void write(String)</li><li>void write(String, int, int)</li><li>void close()</li><li>void flush()</li></ul></blockquote><h2 id="流的结构"><a href="#流的结构" class="headerlink" title="流的结构"></a>流的结构</h2><p><img src="/2021/11/29/35-JavaIO%E6%B5%81/image-20211129110323598.png" loading="lazy"></p><h1 id="常见的流"><a href="#常见的流" class="headerlink" title="常见的流"></a>常见的流</h1><h3 id="FileInputStream、FileOutputStream"><a href="#FileInputStream、FileOutputStream" class="headerlink" title="FileInputStream、FileOutputStream"></a><font color="blue">FileInputStream、FileOutputStream</font></h3><blockquote><p>文件存在，并且有读权限</p><ul><li><p>FileInputStream(File file)</p></li><li><p>FileInputStream(String name)</p></li></ul><p>文件会被创建，或者覆盖原始文件</p><ul><li><p>FileOutputStream(File file)</p></li><li><p>FileOutputStream(File file, boolean append)</p></li><li><p>FileOutputStream(String name)</p></li><li><p>FileOutputStream(String name, boolean append)</p></li></ul></blockquote><h3 id="BufferedInputStream、BufferedOutputStream"><a href="#BufferedInputStream、BufferedOutputStream" class="headerlink" title="BufferedInputStream、BufferedOutputStream"></a><font color="blue">BufferedInputStream、BufferedOutputStream</font></h3><blockquote><p>缓冲Java读写</p><p>构造器</p><ul><li>BufferedInputStream(InputStream in)</li><li>BufferedInputStream(InputStream in, int size)</li><li> BufferedOutputStream(OutputStream out)</li><li> BufferedOutputStream(OutputStream out, int size)</li></ul></blockquote><h3 id="DataInputStream、DataOutputStream"><a href="#DataInputStream、DataOutputStream" class="headerlink" title="DataInputStream、DataOutputStream"></a><font color="blue">DataInputStream、DataOutputStream</font></h3><blockquote><p>允许程序读写Java基本数据类型</p><p>构造器</p><ul><li>DataInputStream(InputStream in)</li><li>DataOutputStream(OutputStream out)</li></ul><p>方法</p><ul><li>readBoolean()/writeBoolean</li><li>readByte()/writeByte()</li><li>readChar()/writeChar()</li></ul></blockquote><h3 id="InputStreamReader、OutputStreamWriter"><a href="#InputStreamReader、OutputStreamWriter" class="headerlink" title="InputStreamReader、OutputStreamWriter"></a>InputStreamReader、OutputStreamWriter</h3><blockquote><p>InputStreamReader</p><ul><li>字节流到字符流的转换</li></ul><p>OutputStreamWriter</p><ul><li>字节流到字符流的转换</li></ul><p>构造器</p><ul><li>InputStreamReader<ul><li>InputStreamReader(InputStream in) </li><li>InputStreamReader(InputStream in, Charset cs) </li></ul></li><li>OutputStreamReader<ul><li>OutputStreamWriter(OutputStream out) </li><li>OutputStreamWriter(OutputStream out, Charset cs)</li></ul></li></ul></blockquote><h3 id="FileReader、FileWriter"><a href="#FileReader、FileWriter" class="headerlink" title="FileReader、FileWriter"></a><font color="green">FileReader、FileWriter</font></h3><blockquote><p>FileReader构造器</p><ul><li>FileReader(File file)</li><li>FileReader(String name)</li></ul><p>FileWriter构造器</p><ul><li>FileWriter(File file)</li><li>FileWriter(String filename)</li></ul></blockquote><h2 id="键盘输入"><a href="#键盘输入" class="headerlink" title="键盘输入"></a>键盘输入</h2><h3 id="BufferedReader、BufferedWriter"><a href="#BufferedReader、BufferedWriter" class="headerlink" title="BufferedReader、BufferedWriter"></a>BufferedReader、BufferedWriter</h3><blockquote><p>三部曲:带缓冲的字符输入/输出流</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token comment">//缓冲字符输入流</span>        <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token comment">//字节流转换字符流,过渡流</span>            <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>inputpath<span class="token punctuation">)</span><span class="token comment">//文件输入字节流</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedReader</span> keyInput <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token comment">//标准键盘输入流</span>                <span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一段文字(exit:退出)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> inputcontent <span class="token operator">=</span> keyInput<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读一行</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>inputcontent<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"exit"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"再见"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的内容是:"</span><span class="token operator">+</span>inputcontent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></blockquote><h2 id="编码格式"><a href="#编码格式" class="headerlink" title="编码格式"></a>编码格式</h2><blockquote><p>ASCII（一个英文字母（不分大小写）占一个字节，一个中文汉字占两个字节）</p><ul><li>ISO8859-1</li><li>ISO8859-2</li><li>ISO8859-3</li></ul><p>Unicode（一个英文等于两个字节，一个中文（含繁体）等于两个字节）</p><ul><li>GBK（英文占1个字节，中文占两个字节）</li><li>GB2312</li><li>Big5</li><li>UTF-8（一个英文字符等于一个字节，一个中文（含繁体）等于三个字节）</li></ul></blockquote><h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><p>分隔符（常量：File.separator）</p><ul><li><p>windows：\   代码里面写这个符号，需要转义    “\\“</p></li><li><p>Linux：/    代码里写这个符号什么问题都没有</p></li></ul><p><strong>windows系统中文件名不能包含  \ / : * ? “ &lt; &gt; |  一共9个特殊字符</strong></p><h4 id="File类可以操作所有文件"><a href="#File类可以操作所有文件" class="headerlink" title="File类可以操作所有文件"></a>File类可以操作所有文件</h4><h3 id="构造器："><a href="#构造器：" class="headerlink" title="构造器："></a>构造器：</h3><blockquote><p>File(File parent, String child)</p><p>File(String pathname)</p><p>File(String parent, String child)</p><p>File(URI uri)</p></blockquote><h4 id="目录分隔符"><a href="#目录分隔符" class="headerlink" title="目录分隔符"></a>目录分隔符</h4><ul><li>FIle.separator</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><blockquote><p>boolean createNewFile()</p><p>boolean delete()</p><p>boolean mkdir()/mkdirs()</p><p>boolean renameTo(File destination)</p><p>boolean canRead()/canWrite()</p><p>boolean exists()</p><p>String[] list()</p><p>long lastModified()</p><p>boolean setLastModified(long time)</p><p>String getAbsoluteFile()/getAbsolutePath()</p><p>String getParent()/getName()</p><p>long length() 返回由此抽象路径名表示的文件的长度。(文件实际内容大小)</p></blockquote><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><ul><li>FilenameFilter<ul><li>boolean accept(File dir,String name)</li><li>测试指定文件是否应该包含在某一文件列表中</li></ul></li><li>FileFilter<ul><li> boolean accept(File pathname) </li><li>测试指定抽象<font color="red">路径名</font>是否应该包含在某个路径名列表中</li></ul></li></ul><h1 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h1><blockquote><p>public class Date </p><p>​    extends Object  </p><p>​        implements <font color="blue">Serializable, Cloneable, Comparable</font></p></blockquote><h3 id="ObjectInputStream、ObjectOutputStream"><a href="#ObjectInputStream、ObjectOutputStream" class="headerlink" title="ObjectInputStream、ObjectOutputStream"></a>ObjectInputStream、ObjectOutputStream</h3><h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><ul><li>ObjectInputStream(InputStream in)</li><li>ObjectOutputStream(OutputStream out)</li></ul><h3 id="对象序列化常用方法"><a href="#对象序列化常用方法" class="headerlink" title="对象序列化常用方法"></a>对象序列化常用方法</h3><ul><li> readObject()</li><li>writeObject()</li></ul><h4 id="JavaBean的语法规则"><a href="#JavaBean的语法规则" class="headerlink" title="JavaBean的语法规则:"></a><font color="red">JavaBean的语法规则:</font></h4><ol><li>无参构造器</li><li>属性私有化</li><li>提供读写方法(get/set)<ol><li>(一般情况下,读写方法是公开的,可以根据业务需求做更改)</li></ol></li><li>实现Serializable接口</li><li>(可选)覆盖hashCode和equals方法</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>34-集合Properties</title>
      <link href="/2021/11/29/34-%E9%9B%86%E5%90%88Properties/"/>
      <url>/2021/11/29/34-%E9%9B%86%E5%90%88Properties/</url>
      
        <content type="html"><![CDATA[<h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><ul><li><h5 id="key-value的类型都是String类型"><a href="#key-value的类型都是String类型" class="headerlink" title="key-value的类型都是String类型"></a>key-value的类型都是<font color="red">String类型</font></h5></li><li><h5 id="一般作为属性配置文件使用"><a href="#一般作为属性配置文件使用" class="headerlink" title="一般作为属性配置文件使用"></a>一般作为属性配置文件使用</h5></li></ul><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><blockquote><p>void load(InputStream inStream)</p><ul><li>从输入流中读取属性列表（键和元素对）。</li></ul><p>void store(OutputStream out, String comments)</p><ul><li>以适合使用load(InputStream)方法加载到 <code>Properties</code> 表中的格式，将此 <code>Properties</code>  表中的属性列表（键和元素对）写入输出流。</li></ul><p>String getProperty(String key)</p><ul><li>用指定的键在此属性列表中搜索属性。</li></ul><p>Object setProperty(String key, String value)</p><ul><li>调用 <code>Hashtable</code> 的方法 <code>put</code>。</li></ul></blockquote><h4 id="通过修改属性文件，不修改代码的方式提高代码的扩展性"><a href="#通过修改属性文件，不修改代码的方式提高代码的扩展性" class="headerlink" title="通过修改属性文件，不修改代码的方式提高代码的扩展性"></a>通过修改属性文件，不修改代码的方式提高代码的扩展性</h4>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>33-集合Collections</title>
      <link href="/2021/11/29/33-%E9%9B%86%E5%90%88Collections/"/>
      <url>/2021/11/29/33-%E9%9B%86%E5%90%88Collections/</url>
      
        <content type="html"><![CDATA[<h2 id="类-Collections"><a href="#类-Collections" class="headerlink" title="类 Collections"></a>类 Collections</h2><p>java.util.Collections</p><h5 id="内同步：容器对象本身的方法就是同步方法"><a href="#内同步：容器对象本身的方法就是同步方法" class="headerlink" title="内同步：容器对象本身的方法就是同步方法"></a>内同步：容器对象本身的方法就是同步方法</h5><h5 id="外同步：使用工具类（Collections）将本来不支持同步的容器对象变成支持同步的容器对象"><a href="#外同步：使用工具类（Collections）将本来不支持同步的容器对象变成支持同步的容器对象" class="headerlink" title="外同步：使用工具类（Collections）将本来不支持同步的容器对象变成支持同步的容器对象"></a>外同步：使用工具类（Collections）将<font color="red">本来不支持同步的容器对象变成支持同步的容器对象</font></h5><table><thead><tr><th><code>static   &lt;T&gt; Collection&lt;T&gt;</code></th><th><code>synchronizedCollection(Collection&lt;T&gt; c)</code>        返回指定 collection 支持的同步（线程安全的）collection。</th></tr></thead><tbody><tr><td><code>static   &lt;T&gt; List&lt;T&gt;</code></td><td><code>synchronizedList(List&lt;T&gt; list)</code>        返回指定列表支持的同步（线程安全的）列表。</td></tr><tr><td><code>static   &lt;K,V&gt; Map&lt;K,V&gt;</code></td><td><code>synchronizedMap(Map&lt;K,V&gt; m)</code>        返回由指定映射支持的同步（线程安全的）映射。</td></tr><tr><td><code>static   &lt;T&gt; Set&lt;T&gt;</code></td><td><code>synchronizedSet(Set&lt;T&gt; s)</code>       返回指定  set 支持的同步（线程安全的）set。</td></tr><tr><td><code>static   &lt;K,V&gt; SortedMap&lt;K,V&gt;</code></td><td><code>synchronizedSortedMap(SortedMap&lt;K,V&gt; m)</code>        返回指定有序映射支持的同步（线程安全的）有序映射。</td></tr><tr><td><code>static   &lt;T&gt; SortedSet&lt;T&gt;</code></td><td><code>synchronizedSortedSet(SortedSet&lt;T&gt; s)</code>        返回指定有序 set 支持的同步（线程安全的）有序 set。</td></tr></tbody></table><p>例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea快捷键</title>
      <link href="/2021/11/28/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2021/11/28/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="idea快捷键"><a href="#idea快捷键" class="headerlink" title="idea快捷键"></a>idea快捷键</h4><p>main：public static void main(String[] args){}</p><p>sout：System.out.println();</p><p>Ctrl+d：复制光标行到下一行</p><p>Ctrl+x：删除光标所在行</p><p>Ctrl+/：注释</p><p>shift+enter: 鼠标新建一行, 自动跳入下一行</p><p>alt +shift+insert 垂直选中文本</p><p>Shift+Alt (shift+ctrl) +方向上键：代码上移，将鼠标光标放到要上移的所在代码行的任何位置</p><p>Shift+Alt +方向下键：代码下移</p><p>Ctrl+Alt+V：默认自动生成变量名（也可以在代码后面接一个<code>.var</code>后，回车即可自动生成变量名）</p><p>Ctrl+O：重写方法</p><p>Ctrl+Alt+T：Surround with（try-catch等）</p><p>Ctrl+Alt_L：code Reformate（重订格式）</p><p>Alt+Insert：Generate（写实体类）</p><p>Ctrl+I：实现接口方法</p><p>Ctrl+H：打开类结构</p><p>Shift+F6：重命名</p><blockquote><h4 id="IntelliJ-IDEA-设置代码提示或自动补全的快捷键"><a href="#IntelliJ-IDEA-设置代码提示或自动补全的快捷键" class="headerlink" title="IntelliJ IDEA 设置代码提示或自动补全的快捷键"></a>IntelliJ IDEA 设置代码提示或自动补全的快捷键</h4><p>修改方法如下：</p><p>点击 文件菜单(File) –&gt; 点击 设置(Settings… Ctrl+Alt+S), –&gt; 打开设置对话框。</p><p>在左侧的导航框中点击 KeyMap。<br>接着在右边的树型框中选择 Main menu –&gt; Code –&gt; Completion.<br>接着需要做两件事：</p><ol><li><p>移除原来的Cycle Expand Word 的 Alt+/ 快捷键绑定。</p></li><li><p>在 Basic 上点击右键,去除原来的 Ctrl+空格 绑定,然后添加 Alt+/ 快捷键。</p></li></ol><p>然后应用(Apply), OK.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>32-集合Map</title>
      <link href="/2021/11/28/32-%E9%9B%86%E5%90%88Map/"/>
      <url>/2021/11/28/32-%E9%9B%86%E5%90%88Map/</url>
      
        <content type="html"><![CDATA[<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><strong>键值对</strong></p><p><strong>key-value</strong></p><p><img src="/2021/11/28/32-%E9%9B%86%E5%90%88Map/image-20211128153202743.png" loading="lazy"></p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap的键其实就是一个HashSet，所以<font color="red">无序且不可以重复</font>，</p><p>原理和HashSet一致。</p><p>不重复：<font color="red">键肯定不重复</font>(必须唯一)，但是值可以是后加入替换之前的。</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>31-集合Set</title>
      <link href="/2021/11/26/31-%E9%9B%86%E5%90%88Set/"/>
      <url>/2021/11/26/31-%E9%9B%86%E5%90%88Set/</url>
      
        <content type="html"><![CDATA[<blockquote><p>list：有序，可重复</p><p>Set：无序，不可重复（没有与下标有关的方法，所以无序）</p></blockquote><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h3 id="HashSet-整合了数组和链表的优点"><a href="#HashSet-整合了数组和链表的优点" class="headerlink" title="HashSet(整合了数组和链表的优点)"></a>HashSet(整合了数组和链表的优点)</h3><blockquote><p>&#x2B50;&#x2B50;&#x2B50;</p><h4 id="面试题：HashSet是如何保证其元素的无序和不重复的？"><a href="#面试题：HashSet是如何保证其元素的无序和不重复的？" class="headerlink" title="面试题：HashSet是如何保证其元素的无序和不重复的？"></a>面试题：HashSet是如何保证其元素的<font color="red">无序和不重复</font>的？</h4><p>加载因子(散列度)：默认0.75</p><ol><li>取得被加入对象的hashCode，再经过计算得到一个数组的下标值，该下标值就是HashSet无序的体现。</li><li>根据第一步获得的下标值，得到该下标上面的链表，是否能够被添加到链表中，需要查看对象中的equals()方法。这是不重复的体现。</li></ol></blockquote><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><h5 id="有序-不可重复的"><a href="#有序-不可重复的" class="headerlink" title="有序,不可重复的"></a><font color="red">有序,不可重复的</font></h5><blockquote><p>构造方法：</p><ul><li>TreeSet()<ul><li>构造一个新的空 set，该 set 根据其元素的自然顺序进行排序。</li></ul></li><li>TreeSet(Comparator&lt;? super E&gt; comparator)<ul><li>构造一个新的空 TreeSet，它根据指定<font color="red">比较器</font>进行排序。</li></ul></li></ul></blockquote><p>JavaSE阶段，如果要比较，实现Comparable&lt;&gt;可比较接口<font color="orange">(实体类去实现)</font>和Comparator&lt;&gt;比较器接口这两种方式，Comparator比较器接口更加灵活适用。</p><p><font color="blue">但是在javaEE阶段,以上两个都不适用，请使用数据库自带的比较（order by）</font></p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>30-集合ArrayList</title>
      <link href="/2021/11/24/30-%E9%9B%86%E5%90%88ArrayList/"/>
      <url>/2021/11/24/30-%E9%9B%86%E5%90%88ArrayList/</url>
      
        <content type="html"><![CDATA[<h2 id="集合的概述"><a href="#集合的概述" class="headerlink" title="集合的概述"></a>集合的概述</h2><p>集合=容器</p><blockquote><ul><li>List<ul><li>有序存放，允许重复</li></ul></li><li>Set<ul><li>随机存放(无序)，不允许重复</li></ul></li><li>SortedSet<ul><li>自动排序存放</li></ul></li><li>Map<ul><li>存储键-值（key-value）对，要求所有的键必须唯一</li></ul></li><li>SortedMap<ul><li>按照键的大小来排序</li></ul></li></ul></blockquote><p><img src="/2021/11/24/30-%E9%9B%86%E5%90%88ArrayList/image-20211124144825079.png" loading="lazy"></p><p>forEach 循环可以循环的对象：<font color="orange">数组、枚举、集合</font><font color="red">实现了Interable可迭代接口集合</font></p><p>ArrayList</p><p><font color="red">以下类实现了Iterable接口的才可以迭代，使用forEach（）循环</font></p><p>Iterable：可迭代,可遍历</p><p>Iterator：迭代器</p><h3 id="几个集合实现类的特点"><a href="#几个集合实现类的特点" class="headerlink" title="几个集合实现类的特点"></a>几个集合实现类的特点</h3><blockquote><ul><li>HashSet<ul><li>防止重复的集合，可快速地找寻相符的元素</li></ul></li><li>TreeSet<ul><li>以有序状态保持并可防止重复</li></ul></li><li>LinkedList<ul><li>针对经常插入或删除中间元素所设计的高效率集合</li></ul></li><li>HashMap<ul><li>可用成对的key/value来保存与取出</li></ul></li><li>LinkedHashMap<ul><li>类似HashMap,但可记住元素插入的顺序</li></ul></li></ul></blockquote><h4 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h4><ul><li>看类型</li><li>看长度</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> studentArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>studentArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>studentArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//错,类型不同</span></code></pre><h4 id="java集合："><a href="#java集合：" class="headerlink" title="java集合："></a>java集合：</h4><ul><li>不看类型</li><li>不看长度</li></ul><p><font color="red">&lt;&gt;    泛型(JDK1.5)</font>.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//错,加了泛型,类型不同了</span></code></pre><p>泛型的菱形写法(JDK1.7) (简写)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>&#x2B50;&#x2B50;&#x2B50;&#x2B50;&#x2B50;</p><h4 id="面试题：ArrayList、LinkedList、Vector之间的区别？"><a href="#面试题：ArrayList、LinkedList、Vector之间的区别？" class="headerlink" title="面试题：ArrayList、LinkedList、Vector之间的区别？"></a>面试题：ArrayList、LinkedList、Vector之间的区别？</h4><ul><li>ArrayList：底层是数组，查询效率高，增加和删除效率低</li><li>LinkedList：底层是链表，查询效率低，增加和删除效率高</li><li>Vector：和ArrayList底层一样，比ArrayList的每一元素的操作多了一个<font color="red">同步</font>。比ArrayList数据安全，但是增加、删除、查询效率都低。</li></ul></blockquote><p>MyArrayList.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token comment">//真正存放数据的数组对象</span><span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span><span class="token comment">//表示当前存储元素的位置(下标)</span><span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">MyArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//向列表的尾部添加指定的元素（可选操作）。</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span>array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>array<span class="token punctuation">.</span>length<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>newArray<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>array <span class="token operator">=</span> newArray<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//在列表的指定位置插入指定元素（可选操作）。</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断是否需要扩容</span><span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span>array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>array<span class="token punctuation">.</span>length<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>newArray<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>array <span class="token operator">=</span> newArray<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//挪位操作</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">;</span>i<span class="token operator">></span>index<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//对应位置赋值</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//从列表中移除所有元素（可选操作）。 </span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//如果列表包含指定的元素，则返回 true。  </span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>index<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>index<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">/*继承的父类AbstractList&lt;E>有这个方法,且不是抽象的,可以不重写比较指定的对象与列表是否相等。   @Overridepublic boolean equals(Object o)&#123;return false;&#125; //返回列表的哈希码值。   @Overridepublic int hashCode()&#123;return 0;&#125; //返回此列表元素的列表迭代器（按适当顺序）。 @Overridepublic ListIterator&lt;E> listIterator()&#123;return null;&#125; //返回列表中元素的列表迭代器（按适当顺序），从列表的指定位置开始。   @Overridepublic ListIterator&lt;E> listIterator(int index)&#123;return null;&#125; //返回列表中指定的 fromIndex（包括 ）和 toIndex（不包括）之间的部分视图。   @Overridepublic List&lt;E> subList(int fromIndex, int toIndex)&#123;return null;&#125;*/</span><span class="token comment">//返回列表中指定位置的元素。   </span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//返回此列表中第一次出现的指定元素的索引；如果此列表不包含该元素，则返回 -1。   </span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>index<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>index<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">//如果列表不包含元素，则返回 true。  </span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> index<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">//返回按适当顺序在列表的元素上进行迭代的迭代器。   </span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span><span class="token comment">//如果仍有元素可以迭代，则返回 true。</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> index <span class="token operator">&lt;</span> <span class="token class-name">MyArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//返回迭代的下一个元素。</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">E</span> element <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>index<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//从迭代器指向的 collection 中移除迭代器返回的最后一个元素（可选操作）。</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">MyArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token class-name">MyArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">MyArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//返回此列表中最后出现的指定元素的索引；如果列表不包含此元素，则返回 -1。   </span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token comment">//移除列表中指定位置的元素（可选操作）。 </span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">E</span> element <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>index<span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token class-name">MyArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">MyArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//从此列表中移除第一次出现的指定元素（如果存在）（可选操作）。   </span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">E</span> element <span class="token operator">=</span> <span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> element<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">/*这两个方法是因为本类继承的 AbstractList&lt;E>抽象类类又从其父类AbstractCollection抽象类 继承的两个非抽象方法,可以不重写。//如果列表包含指定 collection 的所有元素，则返回 true。   @Overridepublic boolean containsAll(Collection&lt;?> c)&#123;return false;&#125; //从列表中移除指定 collection 中包含的其所有元素（可选操作）。   @Overridepublic boolean removeAll(Collection&lt;?> c)&#123;return false;&#125; //仅在列表中保留指定 collection 中所包含的元素（可选操作）。  @Overridepublic boolean retainAll(Collection&lt;?> c)&#123;return false;&#125; //返回按适当顺序（从第一个元素到最后一个元素）包含列表中所有元素的数组；//返回数组的运行时类型是指定数组的运行时类型。 @Overridepublic &lt;T> T[] toArray(T[] a)&#123;return null;&#125; */</span><span class="token comment">//用指定元素替换列表中指定位置的元素（可选操作）。   </span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span><span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//返回列表中的元素数。   </span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//返回按适当顺序包含列表中的所有元素的数组（从第一个元素到最后一个元素）。 </span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>newArray<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> newArray<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口与多态作业</title>
      <link href="/2021/11/23/%E6%8E%A5%E5%8F%A3%E4%B8%8E%E5%A4%9A%E6%80%81%E4%BD%9C%E4%B8%9A/"/>
      <url>/2021/11/23/%E6%8E%A5%E5%8F%A3%E4%B8%8E%E5%A4%9A%E6%80%81%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<p>见本地</p>]]></content>
      
      
      <categories>
          
          <category> Homework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>29-注解</title>
      <link href="/2021/11/23/29-%E6%B3%A8%E8%A7%A3/"/>
      <url>/2021/11/23/29-%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Annotation-注解"><a href="#Annotation-注解" class="headerlink" title="Annotation(注解)"></a>Annotation(注解)</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h3><blockquote><ul><li>从JDK1.5开始，Java增加了对元数据（MetaData）的支持，这个支持就是Annotation（注解）</li><li>Annotation其实就是代码里的特殊标记，这些标记可以在编译、类加载、运行时被读取，并执行相应的处理。 通过使用Annotation，程序员可以在不改变原有逻辑的情况下，在源文件中嵌入一些补充信息</li><li>Annotation可以像修饰符一样被使用，可用于修饰包、 类、构造器、方法、成员变量、参数、局部变量，这些信息被保存在Annotation的“name=value”对中</li><li>Annotation能被用来为程序元素（类、方法、成员变量 等）设置元数据</li></ul></blockquote><h3 id="JDK内置注解"><a href="#JDK内置注解" class="headerlink" title="JDK内置注解"></a>JDK内置注解</h3><blockquote><ul><li>使用Annotation时要在其前面增加@符号，并把该 Annotation当成一个修饰符使用，用于修饰它支持的程序元素</li><li>JDK提供的三个基本Annotation<ul><li>@Override<ul><li>限定重写父类方法，该注释只能用于方法</li></ul></li><li>@Deprecated<ul><li>用于表示某个程序元素（类, 方法等）已过时</li></ul></li><li>@SuppressWarnings<ul><li>抑制编译器警告</li></ul></li></ul></li></ul></blockquote><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><blockquote><ul><li>定义新的Annotation类型使用@interface关键字</li><li>Annotation的成员变量在Annotation定义中以无参数方法的形式来声明。其方法名和返回值定义了该成员的名字和类型</li><li>可以在定义Annotation的成员变量时为其指定初始值， 指定成员变量的初始值可使用default关键字</li><li>没有成员定义的Annotation称为标记，包含成员变量的Annotation称为元数据Annotation</li></ul></blockquote><img src="/2021/11/23/29-%E6%B3%A8%E8%A7%A3/image-20211123161515411.png" style="zoom:60%;" loading="lazy"><h3 id="元Annotation"><a href="#元Annotation" class="headerlink" title="元Annotation"></a>元Annotation</h3><blockquote><ul><li>JDK的元Annotation用于修饰其他Annotation定义</li><li>JDK5.0提供了专门在Annotation上的Annotation<ul><li>@Retention</li><li>@Target</li><li>@Documented</li><li>@Inherited</li></ul></li></ul></blockquote><h4 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h4><p>用于修饰Annotation定义，用于指定该Annotation可以 保留多长时间，包含一个 RetentionPolicy类型的成员变量，使用@Rentention时必须为该value成员变量指定值</p><ul><li>RetentionPolicy.SOURCE<ul><li>编译器直接丢弃这种策略的注释</li></ul></li><li>RetentionPolicy.CLASS<ul><li>编译器将把注释记录在class文件中，当运行Java程序时，JVM不会保留注解，这是默认值</li></ul></li><li>RetentionPolicy.RUNTIME<ul><li>编译器将把注释记录在class文件中，当运行Java程序时，JVM会保留注释，程序可以通过反射获取该注释</li></ul></li></ul><h4 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h4><ul><li>用于修饰Annotation定义，用于指定被修饰的 Annotation能用于修饰哪些程序元素</li><li>@Target包含一个名为value的成员变量</li></ul><h4 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h4><ul><li>用于指定被该元Annotation修饰的Annotation类将被 javadoc工具提取成文档</li><li>定义为Documented的注解必须设置Retention值为 RUNTIME</li></ul><h4 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h4><ul><li>被它修饰的Annotation将具有继承性，如果某个类使用了被 @Inherited修饰的Annotation，则其子类将自动具有该注解</li><li>实际应用中，使用较少</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>28-枚举</title>
      <link href="/2021/11/23/28-%E6%9E%9A%E4%B8%BE/"/>
      <url>/2021/11/23/28-%E6%9E%9A%E4%B8%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><ul><li>一个类的实例是有限的，并且能穷举出来的<ul><li>性别<ul><li>男、女</li></ul></li><li>季节<ul><li>春、夏、秋、冬</li></ul></li><li>星期<ul><li>星期一、星期二、星期三、星期四、星期五、星期六、星期日</li></ul></li><li>尺码<ul><li>S、M、L、XL、XXL</li></ul></li><li>原颜色<ul><li>红、橙、黄、绿、青、蓝、紫</li></ul></li><li>支付方式<ul><li>现金、微信、支付宝、信用卡、银联</li></ul></li></ul></li><li>如果需要定义多个或者一组有关常量的时候，建议使用枚举</li></ul></blockquote><h3 id="自定义枚举"><a href="#自定义枚举" class="headerlink" title="自定义枚举"></a>自定义枚举</h3><h4 id="JDK5-0之前的定义方式"><a href="#JDK5-0之前的定义方式" class="headerlink" title="JDK5.0之前的定义方式"></a>JDK5.0之前的定义方式</h4><blockquote><ul><li>定义一个普通的Java类作为枚举类</li><li>私有化构造器<ul><li>如果枚举类的对象没有属性，私有化无参构造器</li><li>如果枚举类的对象有属性，私有化有对应参数的构造器</li></ul></li><li>定义枚举类对象的常量属性（如果没有属性可以省略）</li><li>定义枚举类对象的常量</li><li>定义枚举类对象属性的读方法</li><li>定义枚举类对象的toString方法</li></ul></blockquote><p>Season.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Season</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">String</span> description<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> SPRING <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> SUMMER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span><span class="token string">"汗流浃背"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> AUTUMN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span><span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> WINTER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"银装素裹"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"name="</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",description="</span><span class="token operator">+</span>description<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> description<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>TestSeason.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSeason</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Season</span> s1 <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span>SPRING<span class="token punctuation">;</span><span class="token class-name">Season</span> s2 <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span>SUMMER<span class="token punctuation">;</span><span class="token class-name">Season</span> s3 <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span>AUTUMN<span class="token punctuation">;</span><span class="token class-name">Season</span> s4 <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span>WINTER<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="JDK5-0之后的定义方式"><a href="#JDK5-0之后的定义方式" class="headerlink" title="JDK5.0之后的定义方式"></a>JDK5.0之后的定义方式</h4><blockquote><ul><li>使用enum关键字定义一个枚举类</li><li><font color="red">定义枚举类对象的常量（必须优先定义）</font>。</li><li>私有化构造器<ul><li>如果枚举类的对象没有属性，私有化无参构造器</li><li>如果枚举类的对象有属性，私有化有对应参数的构造器</li></ul></li><li>定义枚举类对象的常量属性（如果没有属性可以省略）</li><li>定义枚举类对象属性的读方法</li></ul></blockquote><p>SeasonEnum.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SeasonEnum</span> <span class="token comment">/*extends Enum*/</span><span class="token punctuation">&#123;</span> <span class="token comment">//默认父类是Enum</span><span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//注意用逗号(,)结尾,最后分号(;)结尾.</span><span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span><span class="token string">"汗流浃背"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//必须优先定义</span><span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span><span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"银装素裹"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">SeasonEnum</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">String</span> description<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"name="</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",description="</span><span class="token operator">+</span>description<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> description<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Enum的常用方法"><a href="#Enum的常用方法" class="headerlink" title="Enum的常用方法"></a>Enum的常用方法</h3><blockquote><ul><li>toString() <ul><li>返回声明中包含的此枚举常量的名称。 该方法可以被覆盖，尽管 它通常不是必需或不可取的。当一个更“程序员友好”的字符串形式存在时，枚举类型应该覆盖此方法</li></ul></li><li>static values() <ul><li>返回枚举类型所有枚举常量的一个数组</li></ul></li><li>static valueOf(String) <ul><li>返回具有指定名称的指定枚举类型的枚举常量，该名称必须与用于声明此类型的枚举常量的标识符完全一致</li></ul></li></ul></blockquote><p>TestSeason.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SeasonEnum</span> se1 <span class="token operator">=</span> <span class="token class-name">SeasonEnum</span><span class="token punctuation">.</span>SPRING<span class="token punctuation">;</span> <span class="token comment">//用的toString()写的规范,默认结果出来直接就是SPRING</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>se1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SeasonEnum</span><span class="token punctuation">[</span><span class="token punctuation">]</span> seasonEnum <span class="token operator">=</span> <span class="token class-name">SeasonEnum</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">SeasonEnum</span> element<span class="token operator">:</span>seasonEnum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SeasonEnum</span> se2 <span class="token operator">=</span> <span class="token class-name">SeasonEnum</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"WINTER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>se2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="枚举类实现接口见ppt-用不到"><a href="#枚举类实现接口见ppt-用不到" class="headerlink" title="枚举类实现接口见ppt,用不到"></a>枚举类实现接口见ppt,用不到</h4>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>27-异常</title>
      <link href="/2021/11/22/27-%E5%BC%82%E5%B8%B8/"/>
      <url>/2021/11/22/27-%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="异常的意义"><a href="#异常的意义" class="headerlink" title="异常的意义"></a>异常的意义</h2><p><strong>调用有风险的方法(或许不是你写的)时</strong></p><blockquote><p>假设你调用了一个不是你自己写的方法</p><p>该方法执行某些有风险的任务，可能会在运行期间出现问题</p><p>你必须认识到该方法是有风险的</p><p>你得写出可以在发生问题时加以处理的程序代码，未雨绸缪</p></blockquote><blockquote><p>Java使用异常来告诉调用方法：”有问题，我不行了”</p><p>Java的异常处理机制是个简洁、轻量化的执行期间异常情况的处理方式，这让你能够将处理错误状况的程序代码摆在一个容易阅读的位置。但这依赖于你已经知道所调用的方法是有风险的（也就是方法会产生异常）</p><p>如何才能得知方法会抛出异常呢？那就得看方法的声明是否有throws语句就知道了。编译器要确定你了解所调用的方法是有风险的。如果你把有风险的程序代码包含在 try/catch块中，那么编译器就会放心许多。try/catch块 会告诉编译器你确实知道所调用的方法会有风险，并且也已经准备好要处理它，它只会注意你有没有表示你会注意到异常</p></blockquote><h2 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h2><p><img src="/2021/11/22/27-%E5%BC%82%E5%B8%B8/image-20211122153442954.png" loading="lazy"></p><h3 id="按检查分类"><a href="#按检查分类" class="headerlink" title="按检查分类"></a>按检查分类</h3><blockquote><ul><li>检查异常 (编译时异常)<ul><li>Java建议，所有的检查异常都必须处理，如果不处理就需要向上级抛出，否则程序编译不通过，体现了人性化的设计</li></ul></li><li>RuntimeException (运行时异常–未检查异常)<ul><li>所有的RuntimeException类型的异常都可以不处理，也可以处理</li></ul></li><li>常见的RuntimeException<ul><li>ClassCastException 类型转换异常</li><li>IllegalArgumentException 参数错误异常</li><li>NullPointerException 空指针异常</li><li>NumberFormatException 数值转换异常</li><li>IndexOutOfBoundsException 索引越界异常</li></ul></li></ul></blockquote><h3 id="为什么不管RuntimeException"><a href="#为什么不管RuntimeException" class="headerlink" title="为什么不管RuntimeException"></a>为什么不管RuntimeException</h3><blockquote><ul><li>大部分的RuntimeException都是因为程序逻辑的问题， 而不是以你所无法预测或防止的方法出现的执行期失败状况，你无法保证文件一直都在，你无法保证服务器不会死机。但是你可以确保程序不会运行不合理的逻辑，例如只有5个元素的数组取第八个元素的值</li><li>try/catch是用来处理真正的异常，而不是你程序的逻辑错误，该块要做的是恢复的尝试，或者至少会优雅的列出错误信息</li></ul></blockquote><h2 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h2><blockquote><p><font color="red"><strong>try catch finally</strong></font></p><ul><li><p>try</p><ul><li>将有可能出现异常的代码放置在try块中</li></ul></li><li><p>catch</p><ul><li>捕获try中的异常，并可以将处理代码放置在catch块中</li></ul></li><li><p>finally</p><ul><li>不管try块中是否出现异常，将必须执行的代码放置在finally块中， 以保证回收系统资源的一些代码一定会被执行</li></ul></li></ul></blockquote><p><strong>try</strong></p><ul><li>try块放置可能出现异常的代码</li><li>try块中<font color="blue">捕获到指定的异常（catch中指定），会越过try块下面剩下的代码，直接去执行catch块中的代码。</font></li><li>try块中没有异常，则正常执行完try块中的所有代码，不会执行catch块中的代码</li></ul><p><strong>catch</strong></p><ul><li>可以catch本类异常</li><li>可以catch父类异常</li><li>可以catch多个平级的异常</li><li>可以catch多个异常，如果多个异常之前存在继承关系， 则先catch小范围异常，再catch大范围异常</li><li>catch块中放置处理异常的代码</li></ul><p><font color="grenn">try-catch体现了java的健壮性，将RuntimeException提前到编译时处理</font>。</p><p>异常处理的宗旨:谁能处理就是谁处理</p><p>​        能处理:try  catch</p><p>​        不能处理:throws</p><p><strong>finally</strong></p><ul><li>将必须执行的代码放置在finally中，表示不管是try块是否出现异常，都会执行finally块中的代码</li><li><font color="red">**注意:**不要将return语句放置在try catch finally块中，不然会出 现很不理解的返回值！</font></li></ul><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="ERROR"><a href="#ERROR" class="headerlink" title="ERROR"></a>ERROR</h2><blockquote><ul><li>指示合理的应用程序不应该试图捕获的严重问题</li><li>一般不应该捕获错误，因为错误是不可恢复的</li></ul></blockquote><p><img src="/2021/11/22/27-%E5%BC%82%E5%B8%B8/image-20211123110134061.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>26-Java内部类</title>
      <link href="/2021/11/22/26-Java%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>/2021/11/22/26-Java%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Java内部类"><a href="#Java内部类" class="headerlink" title="Java内部类"></a>Java内部类</h1><p><strong>内部类是定义在另外一个类中的类</strong></p><blockquote><ul><li>内部类方法可以访问所在外部类的属性，包括私有属性</li><li>内部类可以对同一个包中其他类隐藏</li><li>可以使用匿名内部类减少代码量</li><li>主要的用处是在<font color="red">处理事件监听</font>，其他地方建议避免使用内部类</li><li>理解内部类的方式<font color="red">类似于理解变量</font></li></ul></blockquote><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p><strong>最简单的一种内部类</strong></p><blockquote><ul><li>名称不能跟外部类的名称一样</li><li>编译的时候会跟外部类分开编译，外部类一个class文件， 内部类一个class文件</li><li>能访问外部类的静态的属性和方法，包括private的</li><li>创建静态内部类对象的格式<ul><li>new outerClass.innerClass();</li><li><font color="red">如果在外部类的范围之内访问该类的内部类,可以不需要前缀outerclass</font></li></ul></li></ul></blockquote><p>InnerClassStatic.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*静态内部类可以访问外部类的静态变量静态方法静态内部类可以访问自己类的静态or普通成员变量静态or普通方法*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassStatic</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> a2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InnerClassStatic:static:test1()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InnerClassStatic:member:test2()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//静态内部类</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> a2 <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InnerClass:static:test1()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InnerClass:member:test2()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InnerClassStatic.a1="</span><span class="token operator">+</span><span class="token class-name">InnerClassStatic</span><span class="token punctuation">.</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InnerClassStatic</span><span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*错误,静态内部类无法从静态上下文中引用非静态变量,方法System.out.println("InnerClassStatic.a2="+InnerClassStatic.this.a2);InnerClassStatic.test2();*/</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//静态调用用类就行</span><span class="token class-name">InnerClassStatic<span class="token punctuation">.</span>InnerClass</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerClassStatic<span class="token punctuation">.</span>InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2021/11/22/26-Java%E5%86%85%E9%83%A8%E7%B1%BB/image-20211122101454003.png" loading="lazy"></p><h2 id="成员-非静态-内部类"><a href="#成员-非静态-内部类" class="headerlink" title="成员(非静态)内部类"></a>成员(非静态)内部类</h2><p><strong>跟静态内部类定义一样,仅仅去掉static关键系</strong></p><blockquote><ul><li>可以访问外部类的所有的属性和方法（静态、非静态）</li><li>在外部类中访问成员内部类的方式 <ul><li>this.new Innerclass();</li></ul></li><li>在其他类中访问成员内部类的方式 <ul><li>(new Outerclass()).new Innerclass();</li></ul></li><li>访问外部类属性、方法的方式<ul><li>Outerclass.this.member</li></ul></li></ul></blockquote><p>InnerClassMember.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*成员内部类能访问外部类的静态变量静态方法普通成员变量普通方法成员内部类不能有静态属性和方法*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassMember</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> a2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InnerClassMember:static:test1()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InnerClassMember:member:test2()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//成员内部类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">&#123;</span><span class="token comment">/*不能有静态成员变量和方法public static int a1 = 30;public static void test1()&#123;System.out.println("InnerClass:static:test1()");&#125;*/</span><span class="token keyword">private</span> <span class="token keyword">int</span> a2 <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InnerClass:member:test2()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InnerClassMember.a1="</span><span class="token operator">+</span><span class="token class-name">InnerClassMember</span><span class="token punctuation">.</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InnerClassMember.a2="</span><span class="token operator">+</span><span class="token class-name">InnerClassMember</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InnerClassMember</span><span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InnerClassMember</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//成员内部类调用需要对象</span><span class="token class-name">InnerClassMember<span class="token punctuation">.</span>InnerClass</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerClassMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><blockquote><ul><li><font color="red">定义在方法中</font></li><li>用得相对较少，但是面试问得最多</li><li>前面不能有修饰符修饰（private、protected、public、 static等）</li><li>能访问外部类所有的属性和方法（包括静态的），以及final局部变量</li></ul></blockquote><p>InnerClassPart.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*局部内部类不能有静态属性和方法局部内部类能访问外部类的静态变量静态方法普通成员变量普通方法*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassPart</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> a2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InnerClassPart:static:test1()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InnerClassPart:member:test2()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//局部内部类</span><span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">&#123;</span><span class="token comment">//public static int a1 = 30;不能有静态属性</span><span class="token keyword">private</span> <span class="token keyword">int</span> a2 <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token comment">/*不能有静态方法public static void test1()&#123;System.out.println("InnerClass:static:test1()");&#125;*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InnerClass:member:test2()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InnerClassPart.a1="</span><span class="token operator">+</span><span class="token class-name">InnerClassPart</span><span class="token punctuation">.</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InnerClassPart.this.a2="</span><span class="token operator">+</span><span class="token class-name">InnerClassPart</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InnerClassPart</span><span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InnerClassPart</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">InnerClass</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">InnerClassPart</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerClassPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><blockquote><ul><li><font color="orange">没有名字</font>的局部内部类    <font color="red">(说明定义在方法内部)</font></li><li>没有class关键字</li><li>没有extends、implements关键字</li><li>没有构造器</li><li><font color="green">隐式的继承一个父类或者实现一个接口</font></li></ul></blockquote><p>new了一个匿名内部类，就是new了一个 实现了接口 的 实现类 的对象</p><hr><p>OneInterface.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OneInterface</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>InnerClassNoName.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassNoName</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">OneInterface</span> oi1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OneInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//匿名内部类的规范写法(new的是接口)</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"2.0"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>oi1<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>runnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>25-多态</title>
      <link href="/2021/11/19/25-%E5%A4%9A%E6%80%81/"/>
      <url>/2021/11/19/25-%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="什么是多态"><a href="#什么是多态" class="headerlink" title="什么是多态?"></a>什么是多态?</h3><blockquote><p>一个物体多种形态</p><p>is a规则</p><p>子类可以被看做父类类型</p><p>实现类可以被看做接口类型</p></blockquote><p><font color="red">面向接口编程:编译时类型尽量使用接口类型</font></p><p><font color="red">面向抽象编程:编译时类型尽量使用父类型</font></p><blockquote><ul><li>多态（Polymorphism）按字面的意思就是多种状态</li><li>类、接口的多种不同的实现方式即为多态</li><li>父类类型的引用变量可以被赋值为子类对象</li><li>接口类型的引用变量可以被赋值为实现该接口的其他类的对象</li></ul></blockquote><blockquote><ul><li>Java引用变量分为编译时类型和运行时类型</li><li>编译时类型由声明该变量时的类型决定，运行时类型由实际赋给该变量的对象决定。如果编译时类型和运行时类型不一致，这就出现了多态</li><li>引用与对象可以是不同的类型</li><li>引用类型可以是实际对象类型的父类</li><li>参数和返回类型也可以多态</li></ul></blockquote><h3 id="为什么要多态"><a href="#为什么要多态" class="headerlink" title="为什么要多态?"></a>为什么要多态?</h3><ul><li><p>通过多态，你可以编写出引进新型子类时也不必修改的程序</p></li><li><p>如果你没有办法看到类的源程序，但又想改变该类的方法时，可以覆盖掉它的方法</p></li></ul><h3 id="类级别的多态"><a href="#类级别的多态" class="headerlink" title="类级别的多态"></a>类级别的多态</h3><blockquote><ul><li>声明变量为父类类型</li><li>创建一个子类对象的实例</li><li>将该实例赋值给父类类型的变量</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><h3 id="接口级别的多态"><a href="#接口级别的多态" class="headerlink" title="接口级别的多态"></a>接口级别的多态</h3><blockquote><ul><li>声明变量类型为接口类型</li><li>创建一个实现该接口的实现类的对象</li><li>将该对象赋值给接口类型变量</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">GraphicsDriver</span><span class="token keyword">class</span> <span class="token class-name">WindowsXP</span> <span class="token keyword">implements</span> <span class="token class-name">GraphicsDriver</span><span class="token keyword">class</span> <span class="token class-name">WindowsWin7</span> <span class="token keyword">implements</span> <span class="token class-name">GraphicsDriver</span><span class="token keyword">class</span> <span class="token class-name">SuseLinux</span> <span class="token keyword">implements</span> <span class="token class-name">GraphicsDriver</span><span class="token class-name">GraphicsDriver</span> gd1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WindowsXP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">GraphicsDriver</span> gd2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WindowsWin7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">GraphicsDriver</span> gd3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuseLinux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><h3 id="方法级别的多态"><a href="#方法级别的多态" class="headerlink" title="方法级别的多态"></a>方法级别的多态</h3><blockquote><ul><li>类类型的方法级别的多态(方法覆盖)</li><li>接口类型的方法级别的多态(方法实现)</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24-接口</title>
      <link href="/2021/10/28/24-%E6%8E%A5%E5%8F%A3/"/>
      <url>/2021/10/28/24-%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><blockquote><ul><li>接口不是类，而是对类的一组需求的描述</li><li>如果类遵从某个特定的接口，那么就履行这项服务</li><li>合同、规定、协议</li><li>接口没有实例</li><li>接口可以有方法和域<ul><li><font color="red">方法默认修饰符：public abstract</font></li><li><font color="red">域默认修饰符：public static final</font></li></ul></li></ul></blockquote><p><font color="orange"><strong>java不支持多继承</strong></font>。</p><p><font color="green">标记接口，例如Cloneable接口（里面没有方法）</font></p><p><font color="red">抽象类可以不用实现接口里面的方法</font></p><h3 id="接口的作用"><a href="#接口的作用" class="headerlink" title="接口的作用"></a>接口的作用</h3><ul><li>访问的统一</li><li>程序的动态性</li><li>实现C++多继承功能、为类提供新的类型</li><li>为多态提供了实现的技术前提</li></ul><h3 id="接口的定义"><a href="#接口的定义" class="headerlink" title="接口的定义"></a>接口的定义</h3><p>关键字:implements</p><p>StudentDao.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*Dao(DAO):Date Access Object数据访问对象*/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentDao</span><span class="token punctuation">&#123;</span><span class="token comment">/*public static final*/</span><span class="token class-name">String</span> VERSION <span class="token operator">=</span> <span class="token string">"1.0"</span><span class="token punctuation">;</span><span class="token comment">/*public abstract*/</span><span class="token class-name">Student</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>StudentDaoImpl.java    (实现接口里面的所有方法)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StudentDao</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"zhurui"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"zhangwuji"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"zhangsanfeng"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"libai"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"limochou"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="接口的特性"><a href="#接口的特性" class="headerlink" title="接口的特性"></a>接口的特性</h3><blockquote><ul><li>接口不是类，<font color="red">不能使用new关键字实例化一个接口</font></li><li>能声明接口的变量</li><li><font color="red">接口变量必须指向实现了接口的类的对象</font></li><li>使用<font color="grenn">instanceof</font>关键字判断一个对象是否实现了某个特定的接口</li><li>接口可以被继承 </li><li>一个接口也可以继承多个父接口  (<font color="orange">接口可以多继承</font>.)</li><li>接口<font color="grenn">不可以被final关键字修饰</font></li></ul></blockquote><h3 id="再议instanceof"><a href="#再议instanceof" class="headerlink" title="再议instanceof"></a><font color="grenn">再议instanceof</font></h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStudentDao2</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">StudentDao</span> studentDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>studentDao <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//studentDao这个接口引用变量所指向的对象是 Object类型 的一个实例 true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>studentDao <span class="token keyword">instanceof</span> <span class="token class-name">StudentDaoImpl</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//......引用变量所指向的对象是 StudentDaoImpl类 的一个实例 true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>studentDao <span class="token keyword">instanceof</span> <span class="token class-name">StudentDao</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//.......引用变量所指向的对象是 StudentDao接口实现类 的一个实例 true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="接口与抽象类的区别-x2B50-x2B50-x2B50-x2B50-x2B50"><a href="#接口与抽象类的区别-x2B50-x2B50-x2B50-x2B50-x2B50" class="headerlink" title="接口与抽象类的区别&#x2B50;&#x2B50;&#x2B50;&#x2B50;&#x2B50;"></a>接口与抽象类的区别&#x2B50;&#x2B50;&#x2B50;&#x2B50;&#x2B50;</h3><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类:"></a>抽象类:</h4><blockquote><ul><li>属于类的范畴，可以单独存在</li><li>不可以实例化对象</li><li>可以被子类继承（子类必须实现父抽象类中定义的抽象方法）</li><li>默认的成员变量是普通成员变量</li><li>其中可以存在抽象方法，也可以不存在抽象方法</li><li>子类继承的父类只能有一个</li></ul></blockquote><h4 id="接口："><a href="#接口：" class="headerlink" title="接口："></a>接口：</h4><blockquote><ul><li>属于和类平级的概念，可以单独存在</li><li>不可以实例化对象</li><li>可以被抽象类、普通类实现</li><li>默认的成员变量是<font color="blue">静态常量(final)</font></li><li>其中的<font color="red">方法全部都是抽象方法，全部都没有方法体</font></li><li>子接口继承的父接口可以有多个</li></ul></blockquote><p><img src="/2021/10/28/24-%E6%8E%A5%E5%8F%A3/image-20211119151524753.png" loading="lazy"></p><p><font color="blue">接口可以<strong>多实现</strong>和<strong>多继承</strong></font></p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23-Java常用类</title>
      <link href="/2021/10/09/23-Java%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
      <url>/2021/10/09/23-Java%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="系统相关类"><a href="#系统相关类" class="headerlink" title="系统相关类"></a>系统相关类</h2><h3 id="java-lang-System"><a href="#java-lang-System" class="headerlink" title="java.lang.System"></a>java.lang.System</h3><p>System也是我们经常用的类，目前为止，我们用的最多的就是它下面out属性对象的println方法，项目其实用得最多的还是它的一些可以获取系统信息的一些方法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSystem</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> envMap <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//static Map&lt;String,String>getenv() 返回当前系统环境的不可修改的字符串映射视图。</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entrySet <span class="token operator">=</span> envMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> element<span class="token operator">:</span>entrySet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key="</span><span class="token operator">+</span>element<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",value="</span><span class="token operator">+</span>element<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回当前时间（以毫秒为单位）。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"JAVA_HOME"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取所有的系统属性</span><span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将所有系统属性保存到props.txt文件中</span>props<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.home"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/props.txt"</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token string">"System Properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//props.store(new FileOutputStream("C:\\workspace\\01.JavaSE\\day09\\props.txt") , "System Properties");</span><span class="token comment">//输出特定的系统属性</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="用户交互类"><a href="#用户交互类" class="headerlink" title="用户交互类"></a>用户交互类</h2><blockquote><p>main方法参数 </p><p>public static void main(String[] args){ </p><p>​        for(String s:args){ </p><p>​                System.out.println(s); </p><p>​        } </p><p>} </p><p>args参数对应了JVM的参数，可以在运行之前指定 </p><p>运行命令：</p><p>java HelloWorld hello world hehe~</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//这个方法运行后面直接写输入,可以显示</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token operator">:</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2021/10/09/23-Java%E5%B8%B8%E7%94%A8%E7%B1%BB/image-20211010110339447.png" loading="lazy"></p><hr><h3 id="java-util-Scanner"><a href="#java-util-Scanner" class="headerlink" title="java.util.Scanner"></a>java.util.Scanner</h3><blockquote><p>通过运行java程序时，只能在程序运行之前预规定好参数， 稍微再复杂一点的程序，这种获取参数的方式就显得有点 太简单了，我们希望能够通过键盘输入的方式获取一些参 数信息，这里的Scanner类就能满足我们的要求</p><p> Scanner主要提供了两个方法来扫描输入</p><ul><li><p>hasNext<font color="red">Xxx</font>()：</p><p>判断是否还有下一个输入项，其中<font color="red">Xxx</font>可以是Int、Long等代表的基本数据类型字符串，如果需要判断是否有下一个字符串，则可以直接使用hasNext() </p></li><li><p>next<font color="red">Xxx</font>()：</p><p>获取下一个输入的值。<font color="red">Xxx</font>的意思跟上面的一 样。</p></li></ul></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestScanner</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token operator">:</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//构造从键盘获取值的Scanner对象</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>scanner<span class="token punctuation">.</span><span class="token function">useDelimiter</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//ScanneruseDelimiter(String pattern) 将此扫描器的分隔模式设置为从指定的构造的模式 String 。</span><span class="token class-name">String</span> oneline <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>oneline<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><font size="5" color="red">注意：Scanner默认使用空白（空格、Tab制表、回车） 作为多个输入项之间的分隔符</font></p><p>使用Scanner之后,输入一串字符，却只拿到了hello,因为默认是以<strong>空格，回车，Tab键</strong>作为分隔符。所以一行被分为三个字符串。</p><p><img src="/2021/10/09/23-Java%E5%B8%B8%E7%94%A8%E7%B1%BB/image-20211010110951017.png" loading="lazy"></p><p>我们可以使用<strong>回车\r和换行\n</strong>作为分隔符。</p><p><code>scanner.useDelimiter(&quot;\r\n&quot;);</code></p><p><img src="/2021/10/09/23-Java%E5%B8%B8%E7%94%A8%E7%B1%BB/image-20211010111742758.png" loading="lazy"></p><p>以上是键盘扫描输入，Scanner还可以扫描文件来输入</p><blockquote><ul><li><p>Scanner类不仅仅只能读取单个字符、数字等，还可以读取一行 </p></li><li><p>Scanner也提供了两个方法来逐行读取 </p><p>boolean hasNextLine()：输入源中是否还有下一行 </p><p>String nextList()：返回输入源中下一行的字符串</p></li></ul></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>  <span class="token comment">//后面需要输入输出流,先*上</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestScanner</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token operator">:</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\workspace\\JavaStudy\\JavaSE\\17.Java常用类\\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//正斜杠/就不要转义了,\反斜杠就需要转义.</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="字符串相关类"><a href="#字符串相关类" class="headerlink" title="字符串相关类"></a>字符串相关类</h2><h3 id="String、StringBuffer、StringBuilder"><a href="#String、StringBuffer、StringBuilder" class="headerlink" title="String、StringBuffer、StringBuilder"></a>String、StringBuffer、StringBuilder</h3><blockquote><ul><li>String：<font color="red">String是不可变类</font>，即一旦一个String对象被创建后，包含在 这个对象中的字符序列是<font color="red">不允许改变的</font>，一旦想改变，只有创建新的 对象，直到这个对象被JVM垃圾回收销毁 </li><li>StringBuffer：StringBuffer对象代表一个可以改变的字符序列，当一 个StringBuffer对象被创建后，可以通过append、insert、reverse、 setCharAt、setLength等一些方法来改变这个字符串的值，直到最后 通过调用toString方法再变成String类型的值 </li><li>StringBuilder：StringBuilder与StringBuffer之间很类似，唯一的不 同，就是StringBuilder是线程不安全的，而StringBuffer是线程安全 的，所以由此可以知道StringBuilder的效率还要比StringBuffer高</li></ul></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestString</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"name="</span><span class="token operator">+</span><span class="token string">"张三"</span><span class="token operator">+</span><span class="token string">",gender="</span><span class="token operator">+</span><span class="token string">"男"</span><span class="token operator">+</span><span class="token string">",age="</span><span class="token operator">+</span><span class="token string">"24"</span><span class="token punctuation">;</span><span class="token comment">/*一共11个对象中间过渡的字符串,浪费name=张三name=张三,gender=name=张三,gender=男name=张三,gender=男,age=*/</span><span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"name="</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">",gender="</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">",age="</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"24"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时还不是字符串</span><span class="token comment">//用这个方法只有六个对象</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><font color="red">经典面试题 </font>&#x2B50;&#x2B50;&#x2B50;</p><p>String s = new String(“12”+”34”); </p><p>上述代码创建了几个String对象？<font color="red"><strong>三个</strong></font></p><h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><h3 id="java-lang-Math"><a href="#java-lang-Math" class="headerlink" title="java.lang.Math"></a>java.lang.Math</h3><blockquote><p>Java已经提供了基本的+、-、 * 、/、%等一系列的数学操 作符，但是更为复杂的操作符，如三角函数、对数运算则无能为力了。这个时候的java.lang.Math类就有作用了</p><p>查看java.lang.Math的API文档</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMath</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.E = "</span><span class="token operator">+</span><span class="token class-name">Math<span class="token punctuation">.</span>E</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//E 自然对数的底数e</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.PI = "</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//圆周率</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.random = "</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//static doublerandom() 返回值为 double值为正号，大于等于 0.0 ，小于 1.0 。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.round(3.45) = "</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.45</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.round(3.65) = "</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.65</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//四舍五入</span><span class="token comment">//static longround(double a) 返回参数中最接近的 long ，其中 long四舍五入为正无穷大。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.rint(3.65) = "</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">rint</span><span class="token punctuation">(</span><span class="token number">3.65</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Math.rint(3.45) = "</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">rint</span><span class="token punctuation">(</span><span class="token number">3.45</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//static doublerint(double a) 返回与参数最接近值的 double值，并且等于数学整数。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"(int)3.45 = "</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">3.45</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接强转,特点:精度丢失</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h2><h3 id="java-util-Random"><a href="#java-util-Random" class="headerlink" title="java.util.Random"></a>java.util.Random</h3><blockquote><ul><li>Random类专门用于生成一个伪随机数</li><li>构造器<ul><li> 使用默认种子构造一个随机数类 </li><li>使用指定的long类型的值作为种子生成一个随机数类</li></ul></li><li>灵活度要比Math类的random方法高</li></ul></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestRandom</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//该方法有参(种子),只有第一次调用才生成伪随机数</span><span class="token comment">//一个种子对应一套序列,种子一样,序列一样.</span><span class="token class-name">Random</span> random1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>random1<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//该无参方法,随着系统纳秒时间的变化而种子(seed)变化,</span><span class="token comment">//所以没调用一次生成的伪随机数都不一样.</span><span class="token class-name">Random</span> random2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>random2<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>推荐：</p><p>使用当前的系统时间来作为随机数的种子，或者使用默认的构造器。（无参构造器）</p><h2 id="日期处理类"><a href="#日期处理类" class="headerlink" title="日期处理类"></a>日期处理类</h2><h3 id="java-util-Date"><a href="#java-util-Date" class="headerlink" title="java.util.Date"></a>java.util.Date</h3><blockquote><ul><li>Java提供了java.util.Date类来处理日期</li><li>由于该类存在的时间比较长，从JDK1.0开始就存在了，好多构造器已经被标识为已过时，剩下了两个构造器 <ul><li>Date() ：构造一个代表当前时间的Date对象 </li><li>Date(long)：根据指定的long值来生成一个Date对象。long值指 的是从公元1970.1.1 00:00:00时间点所经过的毫秒数</li></ul></li></ul></blockquote><blockquote><p>java.util.Date类的主要方法</p><ul><li>boolean after(Date when) <ul><li>测试该日期是否在指定日期when之后</li></ul></li><li>boolean before(Date when) <ul><li>测试该日期是否在指定日期when之前</li></ul></li><li>int compareTo(Date anotherDate) <ul><li>比较两个日期的大小，该日期大于后面的就返回正数，相等返回0 ，小于就返回负数</li></ul></li><li>boolean equals(Object obj) <ul><li>当前两个时间表示同一时刻时就放回true</li></ul></li><li>long getTime() <ul><li>返回毫秒数</li></ul></li><li>void setTime(long time) <ul><li>设置该Date对象的时间</li></ul></li></ul></blockquote><p><font color="red">Date - &gt; Calendar    用void setTime(Date date)</font>使用给定的 <code>Date</code>设置此日历的时间。</p><p><font color="red">Calendar - &gt; Date</font>   用Date    getTime()    返回一个表示此 <code>Calendar</code> 时间值（从<a href="#Epoch">历元</a>至现在的毫秒偏移量）的  <code>Date</code> 对象。</p><h3 id="java-util-Calendar"><a href="#java-util-Calendar" class="headerlink" title="java.util.Calendar"></a>java.util.Calendar</h3><blockquote><ul><li>因为Date类型很多的构造器与方法都不推荐再使用，所以在此不再推荐使用Date类型，而是使用Calendar类</li><li>Calendar是一个抽象类，表示特定环境下的日历</li><li>获取Calendar实例的方法 <ul><li>Calendar cal = Calendar.getInstance();</li></ul></li></ul></blockquote><blockquote><p>java.util.Calendar类的常用方法</p><ul><li>void add(int field,int amount)<ul><li>根据日历的规则，将指定的时间量添加或减去给定的日历字段。</li></ul></li><li>void roll(int field,int amount)<ul><li>向指定日历字段添加指定（有符号的）时间量，不更改更大的字段。</li></ul></li><li>int get(int field)<ul><li>返回给定日历字段的值。</li></ul></li><li>int getActualMaximum(int field)<ul><li>给定此 <code>Calendar</code>的时间值，返回指定日历字段可能具有的 <code>Calendar</code> 。</li></ul></li><li>int getActualMinimum(int field)<ul><li>给定此 <code>Calendar</code>的时间值，返回指定的日历字段可以具有的 <code>Calendar</code> 。</li></ul></li><li>void set(int field,int value)<ul><li>将给定的日历字段设置为给定的值。</li></ul></li><li>void set(int year,int month,int date)<ul><li>设置日历字段中的值 <code>YEAR</code> ， <code>MONTH</code>和 <code>DAY_OF_MONTH</code> 。</li></ul></li><li>void set(int year,int month,int date,int hourOfDay,int minute,int second)<ul><li>设置字段中的值 <code>YEAR</code> ， <code>MONTH</code> ， <code>DAY_OF_MONTH</code> ， <code>HOUR_OF_DAY</code> ， <code>MINUTE</code>和 <code>SECOND</code> 。</li></ul></li></ul></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Calendar</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCalendar</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">;</span><span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//System.out.println(date);//不符合国人习惯</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Calendar</span> cal <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> year <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> month <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> day <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> hour <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>HOUR_OF_DAY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> minute <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MINUTE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> second <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>SECOND<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//System.out.println(year+"-"+(month+1)+"-"+day+" "+hour+":"+minute+":"+second);</span><span class="token comment">//以上注释的都是废话,应该用SimpleDateFormat</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>Date表示日期</p><p>Calendar对日期进行运算</p><p>SimpleDateFormat对日期进行格式化输出</p></blockquote><h3 id="java-text-SimpleDateFormat"><a href="#java-text-SimpleDateFormat" class="headerlink" title="java.text.SimpleDateFormat"></a>java.text.SimpleDateFormat</h3><ul><li>SimpleDateFormat是DateFormat的子类，可以更简单、 更直观地格式化和解析日期对象 SimpleDateFormat sdf = new SimpleDateFormat(“yyyy年MM月dd日 HH时 mm分ss秒”); System.out.println(sdf.format(new Date()));</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Calendar</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCalendar2</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">;</span><span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2008</span><span class="token operator">-</span><span class="token number">1900</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Calendar</span> cal <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cal<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Date->Calendar</span>cal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MONTH<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//往后加一个月,会自动进位</span><span class="token comment">//cal.roll(Calendar.MONTH,1);//不进位</span><span class="token comment">//获得对应域的最大值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cal<span class="token punctuation">.</span><span class="token function">getActualMaximum</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>cal<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Calendar转成Date后用format格式化</span><span class="token class-name">String</span> dateString <span class="token operator">=</span> <span class="token string">"1999-01-09 12:12:12"</span><span class="token punctuation">;</span><span class="token comment">//这个date字符串必须满足sdf定义的pattern</span><span class="token class-name">Date</span> date2 <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong><font color="orange">一般情况下先使用Calendar处理日期，再转换成Date 类，再由SimpleDateFormat类格式化输出</font></strong></p><h2 id="Java程序的国际化（I18N）"><a href="#Java程序的国际化（I18N）" class="headerlink" title="Java程序的国际化（I18N）"></a>Java程序的国际化（I18N）</h2><h3 id="国际化相关的Java类"><a href="#国际化相关的Java类" class="headerlink" title="国际化相关的Java类"></a>国际化相关的Java类</h3><blockquote><p>java.util.ResourceBundle</p><ul><li>用于加载一个资源包</li></ul><p>java.util.Locale</p><ul><li>对应一个特定的国家/区域、语言环境</li></ul><p>java.text.MessageFormat</p><ul><li>用于将消息格式化</li></ul></blockquote><h3 id="国际化资源文件"><a href="#国际化资源文件" class="headerlink" title="国际化资源文件"></a>国际化资源文件</h3><blockquote><ul><li>为实现程序的国际化，必须提供程序所需要的资源文件。 资源文件的内容由key-value对组成</li><li>资源文件的命名可以有3种格式<ul><li>basename_language_country.properties</li><li>basename_language.properties</li><li>basename.properties</li></ul></li></ul><p>如:</p><p>msg_zh_CN.properties简体中文资源文件</p><p>msg_en_US.properties美式英文资源文件</p><p>msg_en.properties英文资源文件</p><p>msg.properties默认的资源文件</p></blockquote><blockquote><p><font color="red">若资源文件包含非西方字符，则需要用JDK自带的工具来处理，native2ascii，这个工具的语法格式如下</font>。</p><ul><li>native2ascii    资源文件名    目标资源文件名</li></ul></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">MessageFormat</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestI18N</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获得系统默认的国家/语言环境</span><span class="token class-name">Locale</span> myLocale <span class="token operator">=</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据指定的国家/语言环境加载对应的资源环境</span><span class="token class-name">ResourceBundle</span> bundle <span class="token operator">=</span> <span class="token class-name">ResourceBundle</span><span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>myLocale<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得本地化字符串</span><span class="token class-name">String</span> name <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">MessageFormat</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span><span class="token string">"zhurui"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22-包装类和Object类</title>
      <link href="/2021/09/28/22-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%92%8CObject%E7%B1%BB/"/>
      <url>/2021/09/28/22-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%92%8CObject%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>什么是Java包装类?</p><p>有时候，需要将int这样的基本类型转换为<font color="red">引用类型</font>，</p><p>Java中所有的基本类型都对应了一个对象类，我们称这些类为基本类型的包装类。</p><blockquote><p>Byte、Short、Integer、Long</p><p>Float、Double</p><p>Character</p><p>Boolean</p><p>Void</p></blockquote><p><strong><font color="red">Java类的属性，一般使用包装类型，方法的形参一般使用基本类型。</font></strong></p><p>包装类型与String类型具有相同的“池”的概念。（详见08，equals和==）</p><p>String池</p><p>常量池</p><p>自动封解箱 (JDK1.5之后的新特性)</p><p>封箱：把基本类型转换成对应的包装类型。</p><p>解箱：把包装类型装换成对应的基本类型。</p><p>&#x2B50;&#x2B50;&#x2B50;&#x2B50;</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMain</span><span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token comment">//字面值</span>       <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>       <span class="token comment">//自动封箱</span>       <span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//int ->Integer </span>       <span class="token comment">//Integer i2 = new Integer(100);</span>       <span class="token comment">//自动解箱</span>       i1 <span class="token operator">=</span> i2<span class="token punctuation">;</span><span class="token comment">//Integer -> int </span>       <span class="token comment">//int i1 = Integer.parseInt(i2);</span>              <span class="token comment">//基本类型、包装类型、String类型之间转换</span>       <span class="token comment">//基本类型、包装类型，自动进行</span>              <span class="token comment">//基本类型-->String</span>       <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">""</span><span class="token operator">+</span>i1<span class="token punctuation">;</span><span class="token comment">//推荐这种方法</span>       <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//String -->基本类型</span>       <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"200"</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> i3 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><p>Object类是Java所有类的父类，在Java的封装、继承、多态的概念支持下，Object类的一些属性和方法都会起到一些共性的作用。</p><blockquote><p><font color="blue">String    toString() : 返回该对象的字符串表示</font></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认调用</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示调用(直观地看到)</span></code></pre><p>直接打印对象，相当于打印的是调用该对象的toString方法返回的结果。</p></blockquote><blockquote><p><font color="blue">int    hashCode() : 返回该对象的哈希码值</font></p><p>在java中，尽量让不同的对象有不同的哈希码。</p><p>需要重写此方法</p></blockquote><blockquote><p><font color="blue">boolean    equals(Object obj) : 指示其他某个对象是否与此对象”相等“。</font></p><p>需要重写此方法,重写此方法后new一个属性一样的新对象就不会创建两个.</p><p><font color="orange">equals()方法是继承的Objec类的，类的属性用的都是包装类，是引用类型，都继承的Object类，都有equals()方法。</font></p><p><font color="#f15a22">比如：String类型的equals()比较的都是字符序列（字符串）</font></p><p>​            <font color="#f15a22">Boolean类型的比较的是true或false</font></p><p>​            <font color="#f15a22">Integer类型比较的是值</font></p></blockquote><blockquote><p><font color="blue">protected void finalize() : 当垃圾回收器确定不存在对该对象的更多引用时,由对象的垃圾回收器调用此方法。</font></p><p>&#x2B50;    GC回收机制,不需要我们写,java自己调用</p></blockquote><blockquote><p><font color="blue">Class getClass() : 返回此Object的运行时类</font></p><p>&#x2B50;&#x2B50;&#x2B50;&#x2B50;&#x2B50;</p><p><img src="/2021/09/28/22-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%92%8CObject%E7%B1%BB/image-20211001104156667.png" loading="lazy"></p><p>请解释：对象、类、类的对象、类对象、类的类</p><p>答：三个固定名词（<font color="red">类的类专指Class类，类对象专指蓝色部分，类的对象专指橙色部分。</font>）<font color="blue">处于一级抽象时，对象等同于类的对象，类等同于类对象；</font><font color="green">处于二级抽象时，对象等同于类对象，类等同于类的类。</font></p><ol><li><p>//根据对象获得类对象的实例，也就是获得类对象。</p><p>Class cls1 = p1.getClass();</p><p>cls1引用变量所指向的对象 是 p1引用变量所指向的对象的类对象是 Class类型的对象。</p></li><li><p>//根据类名获得类对象的实例</p><p>Class cls2 = Person.class;</p></li><li><p>//根据类的全名获得类对象的实例</p><p>Class cls3 = Class.forName(“Person”);</p></li></ol></blockquote><blockquote><p><font color="red">后面基本用不到</font></p><p><font color="blue">protected Object clone() : 创建并返回此对象的一个副本</font></p><p>实现克隆的步骤</p><ul><li>要克隆类<font color="orange">实现Cloneable接口</font> <font color="grenn">是一个标记接口(里面没有方法)</font></li><li>覆盖clone()方法</li><li>扩展clone()方法的访问修饰符到public</li></ul><p>拷贝:</p><blockquote><ul><li><p>深拷贝：对象中的所有的属性全部都拷贝一份</p></li><li><p>浅拷贝：对象中的所有的基本数据类型以及常量池（String，Double…)属性拷贝一份，<font color="red">引用类型不拷贝</font>。</p><p>当拷贝一个变量时，原始变量与拷贝变量引用同一个对象。</p></li></ul><p><img src="/2021/09/28/22-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%92%8CObject%E7%B1%BB/image-20211002103259425.png" loading="lazy"></p></blockquote><p> 克隆:</p><p><img src="/2021/09/28/22-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%92%8CObject%E7%B1%BB/image-20211002103447622.png" loading="lazy"></p><p>浅拷贝:</p><p><img src="/2021/09/28/22-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%92%8CObject%E7%B1%BB/image-20211002105704489.png" loading="lazy"></p><p>address是普通的引用类型,不拷贝,所以指向的是同一个Address</p><p>深拷贝:</p><p><img src="/2021/09/28/22-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%92%8CObject%E7%B1%BB/image-20211002105844293.png" loading="lazy"></p><p>因为浅拷贝是默认进行的，所以引用类型需要自己重写方法里面写一下。将其变成深拷贝。</p><p>例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span><span class="token punctuation">&#123;</span><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Address</span> cloneAddress <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Address</span><span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    person<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>cloneAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> person<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></blockquote><h2 id="Java的值拷贝-传递"><a href="#Java的值拷贝-传递" class="headerlink" title="Java的值拷贝(传递)"></a>Java的值拷贝(传递)</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*"值拷贝":基本类型"地址拷贝":引用类型*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestValueCopy</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhangdan"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//基本类型的值拷贝:将数值拷贝一份传递到方法中去操作</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引用类型的值拷贝:将引用变量拷贝一份传递到方法中操作</span><span class="token function">swap</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addAge</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b="</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1 =>"</span><span class="token operator">+</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p2 =>"</span><span class="token operator">+</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//只是将值传递过来,这个方法的操作与上面的a,b无关.</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//只是将引用变量传递过来,这个方法的操作与上面的p1,p2无关.</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p1<span class="token punctuation">,</span><span class="token class-name">Person</span> p2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Person</span> temp <span class="token operator">=</span> p1<span class="token punctuation">;</span>p1 <span class="token operator">=</span> p2<span class="token punctuation">;</span>p2 <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//只是将引用变量传递过来,但是两个引用变量指向的是同一个对象,所以值改变了</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addAge</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> age <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>age <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2021/09/28/22-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%92%8CObject%E7%B1%BB/image-20211210151619098.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21-Java的抽象类和final</title>
      <link href="/2021/09/27/21-Java%E7%9A%84%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8Cfinal/"/>
      <url>/2021/09/27/21-Java%E7%9A%84%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8Cfinal/</url>
      
        <content type="html"><![CDATA[<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><blockquote><ul><li><font color="red">抽象类不能被实例化</font></li><li><font color="green">抽象类中不一定有抽象方法</font></li><li><font color="blue">有抽象方法的类一定是抽象类</font></li><li><font color="grenn">抽象类天生就是用来被继承的</font></li><li><font color="orange">继承该抽象类的<font color="red">(普通)</font>子类必须实现<font color="red">(覆盖、重写)</font>抽象类里面所定义的方法</font></li><li>关键字：abstract</li></ul></blockquote><p><font color="red">以 <strong>;</strong> 结尾的方法 (没有方法体) 有两种修饰 <font color="green">native 和 abstract</font></font></p><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><blockquote><p>final：最终的</p><ul><li><p>类：最终类，不能有子类（阻止继承）</p></li><li><p>变量：常量，不能再被赋予新的值。</p><p>​            <font color="red">常量没有默认值，必须显示初始化</font>。        </p><ul><li>常量赋值的三个机会：<ul><li>直接定义赋值</li><li>代码块赋值</li><li>set方法赋值，但是只能取一个</li></ul></li></ul></li><li><p>方法：不能被子类覆盖（重写）</p></li></ul><p>​    </p></blockquote><p><font color="red"><strong>静态常量需要大写</strong></font>。</p><p>常量赋值的三个方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/* final */</span> <span class="token keyword">class</span> <span class="token class-name">SuperClass</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> VERSION <span class="token operator">=</span> <span class="token string">"1.0"</span><span class="token punctuation">;</span><span class="token comment">//直接定义赋值</span><span class="token keyword">final</span> <span class="token keyword">int</span> code <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">/*static&#123;//代码块赋值VERSION = "2.0";&#125;&#123;code = 2.0;&#125;*/</span><span class="token comment">/*public void setCode(int code)&#123;//set方法赋值this.code = code;&#125;*/</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span><span class="token punctuation">&#123;</span><span class="token comment">/*public void test()&#123;//无法覆盖final定义的test()方法&#125;*/</span><span class="token punctuation">&#125;</span></code></pre><p>​    </p><p>&#x2B50;&#x2B50;&#x2B50;</p><h4 id="一个类能不能同时被abstract和final修饰-x274c"><a href="#一个类能不能同时被abstract和final修饰-x274c" class="headerlink" title="一个类能不能同时被abstract和final修饰?    &#x274c;"></a>一个类能不能同时被abstract和final修饰?    &#x274c;</h4>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20-方法的覆盖(重写)和instanceof</title>
      <link href="/2021/09/26/20-%E6%96%B9%E6%B3%95%E7%9A%84%E8%A6%86%E7%9B%96(%E9%87%8D%E5%86%99)%E5%92%8Cinstanceof/"/>
      <url>/2021/09/26/20-%E6%96%B9%E6%B3%95%E7%9A%84%E8%A6%86%E7%9B%96(%E9%87%8D%E5%86%99)%E5%92%8Cinstanceof/</url>
      
        <content type="html"><![CDATA[<h2 id="方法的覆盖-重写"><a href="#方法的覆盖-重写" class="headerlink" title="方法的覆盖(重写)"></a>方法的覆盖(重写)</h2><p>子类扩展了父类，子类是父类的一种特殊的存在，可以在子类中新增新的属性和方法。但是有一种特殊的情况：子类需要重写父类已经存在的方法，这就是<font color="blue">方法覆盖</font>。</p><blockquote><p>父类：Animal </p><p>​            方法：eat </p><p>子类：Cat </p><p>​            方法：eat         吃的东西不一样,需要覆盖</p><p>子类：Dog </p><p>​            方法：eat</p></blockquote><h3 id="方法覆盖所遵守的规则-x2B50-x2B50-x2B50-x2B50-x2B50"><a href="#方法覆盖所遵守的规则-x2B50-x2B50-x2B50-x2B50-x2B50" class="headerlink" title="方法覆盖所遵守的规则&#x2B50;&#x2B50;&#x2B50;&#x2B50;&#x2B50;"></a>方法覆盖所遵守的规则&#x2B50;&#x2B50;&#x2B50;&#x2B50;&#x2B50;</h3><ul><li>方法名<font color="red">相同</font></li><li>方法的参数列表<font color="red">相同</font></li><li>子类方法返回值的范围基本类型要<font color="red">等于</font>，引用类型要<font color="red">小于等于</font>父类方法返回值的范围</li><li>子类方法声明抛出的异常范围要<font color="red">小于等于</font>父类方法声明抛出异常范围</li><li>子类方法声明的访问权限要<font color="red">大于等于</font>父类方法声明的访问权限</li></ul><p><strong>方法的覆盖(重写)为多态提供了方法级别的应用</strong></p><p>@Override</p><h2 id="instanceof关键字"><a href="#instanceof关键字" class="headerlink" title="instanceof关键字"></a><font color="grenn">instanceof关键字</font></h2><ul><li><p>使用instanceof运算符确定对象的类型</p></li><li><p>子类对象可以隐含扩展为父类型</p><ul><li>```java<br>Student s = new Student();<br>Person p = s;<pre class="language-none"><code class="language-none">- 父类型必须明确声明转化为子类型  - &#96;&#96;&#96;java    Person p &#x3D; new Student();    Student s &#x3D; (Student)p;</code></pre></li></ul></li><li><p>不是所有的父类型对象都能转化为子类型</p><ul><li><pre><code class="java">Person p = new Teacher(); //p指向的对象不对Student s = (Student)p;</code></pre></li></ul></li></ul><h4 id="强制类型转换的前提-x2B50-x2B50-x2B50"><a href="#强制类型转换的前提-x2B50-x2B50-x2B50" class="headerlink" title="强制类型转换的前提:&#x2B50;&#x2B50;&#x2B50;"></a>强制类型转换的前提:&#x2B50;&#x2B50;&#x2B50;</h4><p>​        强转的目标类型一定是对象的本身类型或者是父类型<br>​        (运行时类型才是本身类型)</p><h4 id="强制类型转换的注意事项-x2B50-x2B50-x2B50-x2B50"><a href="#强制类型转换的注意事项-x2B50-x2B50-x2B50-x2B50" class="headerlink" title="强制类型转换的注意事项&#x2B50;&#x2B50;&#x2B50;&#x2B50;"></a>强制类型转换的注意事项&#x2B50;&#x2B50;&#x2B50;&#x2B50;</h4><ul><li><p>基本类型之间的转换只能在<font color="red">数值类型之间</font>进行，这里所说数值类型包括整数型、字符型和浮点型。</p><p>但是数值型不能和布尔型之间进行类型转换。</p></li><li><p>引用类型之间的转换只能把一个父类变量转换成子类类型。 </p><p>如果是两个没有任何继承关系的类型，则无法进行类型转换。</p><p>如果试图将一个父类转换成子类，则这个对象实际上是子类实例。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19-封装与继承</title>
      <link href="/2021/09/26/19-%E5%B0%81%E8%A3%85%E4%B8%8E%E7%BB%A7%E6%89%BF/"/>
      <url>/2021/09/26/19-%E5%B0%81%E8%A3%85%E4%B8%8E%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><blockquote><p>为什么要用封装?</p><ul><li>将一系列有关系的、可以看做一个整体的数据放在一起</li><li>将一些逻辑性比较强的业务处理放在一起    （方法的封装）</li><li>隐藏实现过程，暴露功能    （方法的封装）</li><li>封装后的代码更具有安全性、可拓展性和可维护性</li></ul></blockquote><p>大体分为两种：</p><ul><li><p>类级别</p></li><li><p>方法级别：功能的封装、重复性代码的封装。</p></li></ul><hr><h3 id="访问控制级别表"><a href="#访问控制级别表" class="headerlink" title="访问控制级别表:"></a><font color="red">访问控制级别表:</font></h3><table><thead><tr><th align="center"></th><th align="center">private</th><th align="center">default</th><th align="center">protected</th><th align="center">public</th></tr></thead><tbody><tr><td align="center">同一个类中</td><td align="center">&#x2714;</td><td align="center">&#x2714;</td><td align="center">&#x2714;</td><td align="center">&#x2714;</td></tr><tr><td align="center">同一个包中</td><td align="center"></td><td align="center">&#x2714;</td><td align="center">&#x2714;</td><td align="center">&#x2714;</td></tr><tr><td align="center">子类中</td><td align="center"></td><td align="center"></td><td align="center">&#x2714;</td><td align="center">&#x2714;</td></tr><tr><td align="center">全局范围内</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">&#x2714;</td></tr></tbody></table><hr><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote><p>什么是继承?</p><ul><li>构建一个基于已经存在类的新类</li><li>复用已经存在类的方法和域</li><li>在新类之上添加新的方法和域，满足新的业务需求</li><li>Java的核心技术之一，避免了重复的程序代码，提高了程序的可重用性</li><li>定义出共同的特性</li></ul></blockquote><h3 id="Java的继承"><a href="#Java的继承" class="headerlink" title="Java的继承"></a>Java的继承</h3><ul><li>Java中的继承完全满足上述的特点</li><li>Java的继承更加简单：<font color="red">单继承</font></li><li>关键字：<font color="red">extends</font></li><li>Java解决C++中的多继承的技术：<font color="red">接口</font></li><li>Java的继承分类：<ul><li>类的继承</li><li><font color="blue">接口的继承（允许多继承）</font></li></ul></li></ul><hr><blockquote><p>Student extends Person</p><p>Student:    子类（派生类、衍生类）</p><p>Person:    父类、超类</p></blockquote><blockquote><p>&#x2B50;&#x2B50;&#x2B50;</p><p>在Java中，看某一个类中是否有某一个属性，并不是看成员变量，而是看<strong>读写</strong>方法。</p><p>将读写方法的<strong>前缀（get|is、set）</strong>去掉，再将首字母变小写，剩下的部分，称之为<strong>属性</strong>。</p></blockquote><p>Person.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> gender<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//默认存在</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">boolean</span> gender<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//默认存在</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"name="</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",gender="</span><span class="token operator">+</span>gender<span class="token operator">+</span><span class="token string">",age="</span><span class="token operator">+</span>age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> gender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> gender<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>Student.java      继承Person类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> studyNumber<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认存在</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> studyNumber<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认存在</span><span class="token keyword">this</span><span class="token punctuation">.</span>studyNumber <span class="token operator">=</span> studyNumber<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"name="</span><span class="token operator">+</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",gender="</span><span class="token operator">+</span><span class="token function">isGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",age="</span><span class="token operator">+</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",studyNumber="</span><span class="token operator">+</span>studyNumber<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStudyNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> studyNumber<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStudyNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> studyNumber<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>studyNumber <span class="token operator">=</span> studyNumber<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>TestPerson.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPerson</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhurui"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//直接调用有参构造器</span><span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">setStudyNumber</span><span class="token punctuation">(</span><span class="token string">"NO-001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"NO-002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用有参构造器</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1 => "</span><span class="token operator">+</span>p1<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p2 => "</span><span class="token operator">+</span>p2<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1 => "</span><span class="token operator">+</span>s1<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s2 => "</span><span class="token operator">+</span>s2<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>TestPerson结果:</p><p><img src="/2021/09/26/19-%E5%B0%81%E8%A3%85%E4%B8%8E%E7%BB%A7%E6%89%BF/image-20210926164934359.png" loading="lazy"></p><hr><p><strong>将Person和Student中的构造器写入输出语句测试，让构造器显示地看出来是否调用。</strong></p><p>Person.java (构造器的代码)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//插入的输出语句!</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">boolean</span> gender<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person(String,boolean,int)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>Student.java同理 (构造器的代码)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Student()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> studyNumber<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>studyNumber <span class="token operator">=</span> studyNumber<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Student(String)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">boolean</span> gender<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token class-name">String</span> studyNumber<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用父类的有参构造器</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Student(String,boolean,int,String)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>studyNumber <span class="token operator">=</span> studyNumber<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>TestPerson2.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPerson2</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhurui"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//为什么生成Person()对象?因为super()默认存在->调用父类构造器</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"NO-002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用有参构造器</span><span class="token class-name">Student</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">"NO-003"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s3 => "</span><span class="token operator">+</span>s3<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>结果:</p><p><img src="/2021/09/26/19-%E5%B0%81%E8%A3%85%E4%B8%8E%E7%BB%A7%E6%89%BF/image-20210926212958252.png" loading="lazy"></p><hr><p>**super(); **和 <strong>this();</strong></p><p>必须放在第一行</p><p><font color="green">不能同时存在</font>：不能调用多次父类构造器。</p><p><strong><font color="red">构造器不能被继承</font></strong></p><h4 id="多态-polymorphism-："><a href="#多态-polymorphism-：" class="headerlink" title="多态(polymorphism)："></a><font color="blue">多态(polymorphism)：</font></h4><ul><li>Java引用变量有两个类型：**<font color="red">编译时类型</font><strong>和</strong><font color="red">运行时类型</font>**</li><li>编译时类型由声明该变量时使用的类型决定，运行时类型由实际赋值给变量的对象的类型决定。</li><li>如果<font color="red">编译时类型和运行时类型不一致</font>，就会出现所谓的<font color="grenn">多态</font>。</li></ul><blockquote><p>编译时类型:就是在编译期间看的类型</p><p>运行时类型:就是在运行期间看的类型</p><p>Person&#x1f697; p1 = new Person&#x1f699;();</p><p>Person&#x1f697;:编译时类型</p><p>Person&#x1f699;:运行时类型</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18-单例模式</title>
      <link href="/2021/09/25/18-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/09/25/18-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h4 id="单例模式的使用场景"><a href="#单例模式的使用场景" class="headerlink" title="单例模式的使用场景:"></a>单例模式的使用场景:</h4><ul><li>该类的对象的创建比较耗系统资源，而且一个该类的对象 就能提供完全的系统服务</li><li>类的对象有且只能有一个</li></ul><h4 id="单例模式的特点"><a href="#单例模式的特点" class="headerlink" title="单例模式的特点:"></a>单例模式的特点:</h4><ul><li>单例类只能有一个实例</li><li>单例类必须自己创建自己的唯一实例</li><li>单例类必须给所有其他对象提供这一实例</li></ul><hr><h4 id="懒汉式单例模式"><a href="#懒汉式单例模式" class="headerlink" title="懒汉式单例模式:"></a>懒汉式单例模式:</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*该类只能有一个对象懒汉式单例模式*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">LazySingleton</span> instance<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token class-name">LazySingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>TestLazySingleton.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLazySingleton</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">LazySingleton</span> instance <span class="token operator">=</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LazySingleton</span> instance2 <span class="token operator">=</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2021/09/25/18-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/image-20210925233708103.png" loading="lazy"></p><p>只生成了一个对象</p><h4 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式:"></a>饿汉式单例模式:</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*该类只能有一个对象饿汉式单例模式*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EagerSingleton</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">EagerSingleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EagerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">EagerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">EagerSingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>TestEagerSingleton.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEagerSingleton</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">EagerSingleton</span> instance <span class="token operator">=</span> <span class="token class-name">EagerSingleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">EagerSingleton</span> instance2 <span class="token operator">=</span> <span class="token class-name">EagerSingleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17-package</title>
      <link href="/2021/09/25/17-package/"/>
      <url>/2021/09/25/17-package/</url>
      
        <content type="html"><![CDATA[<h2 id="package"><a href="#package" class="headerlink" title="package"></a>package</h2><ul><li>包的作用是防止同名的类有分歧</li><li><font color="red">类名: 包名+类的简单名  (java.util.Date)</font></li><li>Java类的正确使用:包名.类的简单名</li><li>import导入,出现在package语法之后</li><li>JDK1.5新特性:静态导入import static</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//静态导入,可以将类中的静态属性直接导入</span><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>zr<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStaticImport</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//可以直接省略System</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="纯手工测试包"><a href="#纯手工测试包" class="headerlink" title="纯手工测试包"></a>纯手工测试包</h4><p><img src="/2021/09/25/17-package/image-20210925222051378.png" loading="lazy"></p><p><strong>-d</strong>    表示生成目录结构</p><p><strong>.</strong>    代表当前目录</p><hr><h3 id="java常用包"><a href="#java常用包" class="headerlink" title="java常用包"></a>java常用包</h3><ul><li>java.lang：java核心包，java自动导入，无须再手动导入</li><li>java.util：java工具包</li><li>java.io：java输入、输出包</li><li>java.net：java网络编程包</li><li>java.sql：java数据库编程包</li><li>java.awt：java图形界面编程包      (过时)</li><li>java.swing：增强的java图形界面编程包    (过时)</li><li>java.text：java文本格式化包</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16-this和static关键字</title>
      <link href="/2021/09/24/16-this%E5%92%8Cstatic%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2021/09/24/16-this%E5%92%8Cstatic%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a><font color="grenn">this关键字</font></h2><h4 id="this关键字是一个对象的默认引用-总是指向-调用该方法的对象"><a href="#this关键字是一个对象的默认引用-总是指向-调用该方法的对象" class="headerlink" title="this关键字是一个对象的默认引用,总是指向 调用该方法的对象"></a>this关键字是一个对象的默认引用,总是指向 调用该方法的对象</h4><p>两种使用情形:</p><ul><li><p><font color="grenn">构造器</font>中引用 该构造器执行初始化对象</p><p><font color="red">注意:在构造器中,如果调用其他的构造器,<font color="blue">一定要放在第一行</font></font></p></li><li><p>在<font color="grenn">方法</font>中引用 调用该方法的对象 (当前对象)</p></li></ul><hr><p>Person.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> gender<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person(String)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">boolean</span> gender<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//this.Person(name);构造器可以简写</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person(String,boolean)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">boolean</span> gender<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//this.Person(name,gender);</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person(String,boolean,int)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> gender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> gender<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>TestPerson.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPerson</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2021/09/24/16-this%E5%92%8Cstatic%E5%85%B3%E9%94%AE%E5%AD%97/image-20210924232320706.png" loading="lazy"></p><p>调用了好几个构造器,其实只构造了一个对象。</p><blockquote><p>:star:&#x2B50;:star:小判断：</p><p>构造器的执行，一定是构造了新对象吗?       &#x274c;</p><p>对象的构造，一定是执行了构造器吗?           &#x2714;</p></blockquote><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a><font color="grenn">static关键字</font></h2><p>仅仅看static单词来理解，完全不能体现出它的作用</p><p>可以修饰:</p><ul><li>域 (属性)<ul><li>静态域，被类的所有实例共享，可以直接通过<font color="red">类名.静态域</font>的方式来调用</li></ul></li><li>方法<ul><li>静态方法,属于类级别的方法,可以直接通过<font color="red">类名.静态方法</font>的方式调用</li></ul></li><li>代码块<ul><li>静态代码块,语法类似于<font color="blue">对象代码块</font>,只是该静态代码块是<font color="red">属于类级别</font>的</li></ul></li></ul><hr><p>Student.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> gender<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//静态代码块</span><span class="token keyword">static</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//对象代码块</span><span class="token punctuation">&#123;</span><span class="token comment">//将对象的一些初始化的工作放在对象代码块中</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Student()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">boolean</span> gender<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Student(String,boolean,int)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//静态方法不能访问对象的属性和方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"staticMethod()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        this.generalMehtod();//错误,无法从静态上下文中引用非静态方法。这里的this相当于引用->调用该方法的对象,但是静态方法属于类级别,此时对象还未创建。        System.out.println(name);//错误,无法从静态上下文中引用非静态变量        */</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generalMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"generalMethod()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> gender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> gender<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15-方法的重载和递归</title>
      <link href="/2021/09/23/15-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD%E5%92%8C%E9%80%92%E5%BD%92/"/>
      <url>/2021/09/23/15-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD%E5%92%8C%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载:"></a>方法的重载:</h3><h4 id="方法名相同-功能是一致的"><a href="#方法名相同-功能是一致的" class="headerlink" title="方法名相同 (功能是一致的)"></a>方法名相同 (功能是一致的)</h4><h4 id="参数列表不同-功能实现的环境不一样-能更加地适应环境"><a href="#参数列表不同-功能实现的环境不一样-能更加地适应环境" class="headerlink" title="参数列表不同 (功能实现的环境不一样,能更加地适应环境)"></a>参数列表不同 (功能实现的环境不一样,能更加地适应环境)</h4><ul><li>参数数量的不同</li><li>相同数量，但是对应位置的变量类型的不同</li></ul><h4 id="不要将返回值类型的不同看作是方法的重载"><a href="#不要将返回值类型的不同看作是方法的重载" class="headerlink" title="不要将返回值类型的不同看作是方法的重载"></a><font color="red">不要将返回值类型的不同看作是方法的重载</font></h4><h4 id="方法的重载可以解决做同样性质的事情（方法名相同），-由于情况的不同（参数列表不同）而得到不同的结果"><a href="#方法的重载可以解决做同样性质的事情（方法名相同），-由于情况的不同（参数列表不同）而得到不同的结果" class="headerlink" title="方法的重载可以解决做同样性质的事情（方法名相同）， 由于情况的不同（参数列表不同）而得到不同的结果"></a><font color="blue">方法的重载可以解决做同样性质的事情（方法名相同）， 由于情况的不同（参数列表不同）而得到不同的结果</font></h4><hr><p>MethodOverload.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodOverload</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span><span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*不能够形成方法重载:重载不参考形参的名称public double add(int c,int d)&#123;return c+d;&#125;*/</span><span class="token comment">/*不能够形成方法重载:重载不参考返回值类型public int add(int a,int b)&#123;return a+b;&#125;*/</span><span class="token punctuation">&#125;</span></code></pre><hr><h3 id="方法的递归"><a href="#方法的递归" class="headerlink" title="方法的递归"></a>方法的递归</h3><h4 id="一个方法内部调用它自身-被称为递归方法"><a href="#一个方法内部调用它自身-被称为递归方法" class="headerlink" title="一个方法内部调用它自身,被称为递归方法"></a>一个方法内部调用它自身,被称为递归方法</h4><p>MethodRecursion.java</p><p>题目:    f(0)=1,f(1)=1,f(2)=2,f(3)=3,f(4)=5… f(n)=f(n-2)+f(n-1)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodRecursion</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//斐波那契数列</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>斐波那契数列:</p><p>0、1、1、2、3、5、8、13、21、34</p><p><em>F</em>(0)=0，<em>F</em>(1)=1, <em>F</em>(n)=<em>F</em>(n - 1)+<em>F</em>(n - 2)（<em>n</em> ≥ 2，<em>n</em> ∈ N*）</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14-方法的可变长参数</title>
      <link href="/2021/09/07/14-%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%AF%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0/"/>
      <url>/2021/09/07/14-%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%AF%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是方法"><a href="#什么是方法" class="headerlink" title="什么是方法"></a>什么是方法</h3><ul><li>方法就是表明一个对象它能干什么事情</li><li>方法从属于<font color="red">类或者对象</font>，不能单独存在</li><li>方法的执行<font color="red">需要调用者</font>，而这个调用者就是该方法所属于的类或者对象</li></ul><h3 id="方法定义的结构"><a href="#方法定义的结构" class="headerlink" title="方法定义的结构"></a>方法定义的结构</h3><ul><li><p>最简单的结构 </p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">返回值类型 方法名(形参列表)&#123;<span class="token code keyword">...//方法体</span>&#125; </code></pre><p>如： </p><p>String getName(){ </p><p>​    return name; </p><p>}</p></li><li><p>最全的结构&#x2B50;&#x2B50;&#x2B50;&#x2B50;&#x2B50;</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">&lt;font访问修饰符 普通修饰符 返回值类型 方法名(形参列表) 抛出的异常&#123;...//方法体&#125;</code></pre><p>如:</p><p>public static double division(double num1,double num2)  throws IllegalArgumentException{ </p><p>​    return num1/num2; </p><p>}</p></li></ul><h3 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h3><h5 id="普通方法调用"><a href="#普通方法调用" class="headerlink" title="普通方法调用"></a>普通方法调用</h5><ul><li>对象.方法名(参数列表);</li></ul><h5 id="静态方法调用"><a href="#静态方法调用" class="headerlink" title="静态方法调用"></a>静态方法调用</h5><ul><li>类名.方法名(参数列表);</li></ul><h3 id="可变参数方法-jdk1-5之后"><a href="#可变参数方法-jdk1-5之后" class="headerlink" title="可变参数方法 (jdk1.5之后)"></a><font color="red">可变参数方法 (jdk1.5之后)</font></h3><h5 id="如果方法的参数不确定，可以使用JDK1-5的新特性：方法的可变参数"><a href="#如果方法的参数不确定，可以使用JDK1-5的新特性：方法的可变参数" class="headerlink" title="如果方法的参数不确定，可以使用JDK1.5的新特性：方法的可变参数"></a>如果方法的参数不确定，可以使用JDK1.5的新特性：方法的可变参数</h5><ul><li>int sum(int a,int b);</li><li>int sum(int a,int b,int c);</li><li>int sum(int a,int b,int … c);</li><li>int sum(int a,int b,int[] c); </li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>一个方法只能最多<font color="red">只有一个</font>是可变长参数</li><li>可变长参数一定要放在方法形参的<font color="red">最后一个</font></li><li>可变长参数在本质上就是一个参数数组</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestArgs</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">,</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>str2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//...类似于数组</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> element<span class="token operator">:</span>str2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>str1 <span class="token operator">+=</span> element<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> str1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="jdk1-5之前-废弃"><a href="#jdk1-5之前-废弃" class="headerlink" title="(jdk1.5之前) (废弃)"></a>(jdk1.5之前) (废弃)</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestArgs</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"world"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"world"</span><span class="token punctuation">,</span><span class="token string">"!"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> element<span class="token operator">:</span>str2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>str1 <span class="token operator">+=</span> element<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> str1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13-对象构造和成员变量、局部变量</title>
      <link href="/2021/08/28/13-%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E5%92%8C%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E3%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/"/>
      <url>/2021/08/28/13-%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E5%92%8C%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E3%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="对象的构造"><a href="#对象的构造" class="headerlink" title="对象的构造"></a>对象的构造</h3><ul><li>构造器与类同名</li><li>每一个类可以有一个以上的构造器</li><li>构造器可以有0个、1个或者1个以上的参数</li><li>构造器没有返回值类型，连void也没有</li><li>构造器总是伴随着new操作符一同使用，让你有机会介入new的过程</li></ul><h4 id="一个对象的创建过程"><a href="#一个对象的创建过程" class="headerlink" title="一个对象的创建过程"></a>一个对象的创建过程</h4><ul><li>为对象分配内存空间</li><li>调用构造方法</li><li>为实例变量赋初始值</li></ul><h4 id="把初始化代码放到构造方法中-并且把构造方法设定成需要参数的"><a href="#把初始化代码放到构造方法中-并且把构造方法设定成需要参数的" class="headerlink" title="把初始化代码放到构造方法中,并且把构造方法设定成需要参数的"></a>把初始化代码放到构造方法中,并且把构造方法设定成需要参数的</h4><p>TestEmployee.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEmployee</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Employee</span> e1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e1<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e1<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e1<span class="token punctuation">.</span><span class="token function">setWorkNumber</span><span class="token punctuation">(</span><span class="token string">"zr-001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e1<span class="token punctuation">.</span><span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Employee</span> e2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"NO-001"</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e1="</span><span class="token operator">+</span>e1<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e2="</span><span class="token operator">+</span>e2<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="编译器一定会帮你写出没有参数的构造方法吗-不会"><a href="#编译器一定会帮你写出没有参数的构造方法吗-不会" class="headerlink" title="编译器一定会帮你写出没有参数的构造方法吗?不会"></a>编译器一定会帮你写出没有参数的构造方法吗?<font color="red">不会</font></h5><blockquote><ul><li>如果你已经写了一个有参数的构造方法,并且你需要一个没有参数的构造方法,则你必须自己动手写</li><li>如果类有一个以上的构造方法,则参数一定要不一样,我们可以认为这几个构造方法形成重载关系</li></ul></blockquote><h3 id="成员变量、局部变量"><a href="#成员变量、局部变量" class="headerlink" title="成员变量、局部变量"></a>成员变量、局部变量</h3><p><font color="red">成员变量有默认值,局部变量没有</font></p><h4 id="变量按其类型分类"><a href="#变量按其类型分类" class="headerlink" title="变量按其类型分类"></a>变量按其类型分类</h4><ul><li>基本类型变量</li><li>引用类型变量</li></ul><h4 id="变量按其作用域分类"><a href="#变量按其作用域分类" class="headerlink" title="变量按其作用域分类"></a>变量按其作用域分类</h4><ul><li><p>成员变量</p><ul><li><p>类级别的成员变量(<font color="red">被static修饰符修饰</font>)</p></li><li><p>实例级别的成员变量(<font color="red">没有被static修饰符修饰</font>)</p></li><li><p>在一个类定义的内部,跟方法属于同一个级别   如:</p><p>class Employee{</p><p>​    public static int count;</p><p>​    private String name;</p><p>​    public String getName(){</p><p>​        return name;    </p><p>​    }</p><p>}</p></li></ul></li><li><p>局部变量</p><ul><li>代码块定义的变量</li><li>方法内部定义的变量</li><li>方法的形参</li><li>成员变量、局部变量同名，优先使用局部变量</li><li>成员变量的作用域大于局部变量</li><li>各个方法、代码块的内部的局部变量没有任何影响</li></ul></li></ul><h4 id="成员变量与局部变量之间的差别"><a href="#成员变量与局部变量之间的差别" class="headerlink" title="成员变量与局部变量之间的差别"></a>成员变量与局部变量之间的差别</h4><blockquote><p>成员变量是声明在类内部而不是方法内</p><p>局部变量是声明在方法内部的</p><p>局部变量在使用前必需初始化</p><p>局部变量没有默认值!如果在变量被初始化前就使用,编译会报错</p><p>方法的参数基本上与局部变量相同,但你不需要直接初始化它,编译器会确保方法调用时会有与声明相符的参数传进来,且参数会自动被赋值</p></blockquote><p><font color="blue">局部变量没有访问修饰符</font></p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github_token</title>
      <link href="/2021/08/19/Github-token/"/>
      <url>/2021/08/19/Github-token/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/08/19/Github-token/image-20210819101058984.png" loading="lazy"></p><pre class="language-markdo" data-language="markdo"><code class="language-markdo">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</code></pre>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组作业</title>
      <link href="/2021/08/16/%E6%95%B0%E7%BB%84%E4%BD%9C%E4%B8%9A/"/>
      <url>/2021/08/16/%E6%95%B0%E7%BB%84%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<ol><li><p>定义一个int型的一维数组，包含10个元素，分别赋一 些随机整数（随机数参考Random类），然后求出所有元素的最大值，最小值，平均值，和值，并输出出来</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*定义一个int型的一维数组，包含10个元素，分别赋一些随机整数（随机数参考Random类），然后求出所有元素的最大值，最小值，平均值，和值，并输出出来*/</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework1</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//使用随机数赋值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"数组遍历:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>element<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大值:"</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最小值:"</span><span class="token operator">+</span><span class="token function">min</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"和值:"</span><span class="token operator">+</span><span class="token function">sum</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均值:"</span><span class="token operator">+</span><span class="token function">avg</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//最大值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> max <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>max <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//最小值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> min <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>min<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>min <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> min<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//和值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//平均值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">avg</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> avg <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token operator">/</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">return</span> avg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>定义一个int型的一维数组，包含10个元素，分别赋值 为1~10， 然后将数组中的元素都向前移一个位置，即， a[0]=a[1],a[1]=a[2],…最后一个元素的值是原来第一个元素的值，然后输出这个数组作业 </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*定义一个int型的一维数组，包含10个元素，分别赋值为1~10，然后将数组中的元素都向前移一个位置，即，a[0]=a[1],a[1]=a[2],…最后一个元素的值是原来第一个元素的值，然后输出这个数组作业 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework2</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"原始数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//将数组中的元素都向前移一个位置</span><span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>array<span class="token punctuation">[</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"移位后数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>定义一个int型的一维数组，包含40个元素，用来存储每个学员的成绩，循环产生40个0~100之间的随机整数， 将它们存储到一维数组中，然后统计成绩低于平均分的学员的人数，并输出出来 </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*定义一个int型的一维数组，包含40个元素，用来存储每个学员的成绩，循环产生40个0~100之间的随机整数， 将它们存储到一维数组中，然后统计成绩低于平均分的学员的人数，并输出出来 */</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework3</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机赋值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//平均分</span><span class="token keyword">int</span> avg <span class="token operator">=</span> <span class="token function">avg</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均分:"</span><span class="token operator">+</span><span class="token function">avg</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//成绩低于平均分的学员的人数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>avg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>avg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//排序后,这一行才有意义(大于平均分就退出循环)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"低于平均分的人数:"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//和值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//平均值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">avg</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> avg <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token operator">/</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">return</span> avg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>承上题，将这40个成绩按照从高到低的顺序输出出来 </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*承上题，将这40个成绩按照从高到低的顺序输出出来 */</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework4</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机赋值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"原始数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//降序排序</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//-i步骤优化了程序,</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//冒泡排序一趟下来最后两位不要动了</span>temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历排序后的数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"遍历排序后数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不排序,反过来输出</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"不排序方法:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>编写程序，将一个数组中的元素倒排过来。例如原数 组为1，2，3，4，5；则倒排后数组中的值为5，4，3，2， 1</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*编写程序，将一个数组中的元素倒排过来。例如原数 组为1，2，3，4，5；则倒排后数组中的值为5，4，3，2， 1*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework5</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"倒排后数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Homework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12-使用现有类和自定义类</title>
      <link href="/2021/08/11/12-%E4%BD%BF%E7%94%A8%E7%8E%B0%E6%9C%89%E7%B1%BB%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB/"/>
      <url>/2021/08/11/12-%E4%BD%BF%E7%94%A8%E7%8E%B0%E6%9C%89%E7%B1%BB%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="使用现有类"><a href="#使用现有类" class="headerlink" title="使用现有类"></a>使用现有类</h3><p>TestDate1.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDate1</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">365</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d1="</span><span class="token operator">+</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d2="</span><span class="token operator">+</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//过时的API尽量不要用,但是不是不可以用</span><span class="token class-name">Date</span> d3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">1900</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> d4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">1900</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> d5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">1900</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> d6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2019-12-12 12:12:12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//java.lang.IllegalArgumentException:无效参数异常</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d3="</span><span class="token operator">+</span>d3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d4="</span><span class="token operator">+</span>d4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d5="</span><span class="token operator">+</span>d5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d6="</span><span class="token operator">+</span>d6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><font color="red">java.lang.IllegalArgumentException:无效参数异常</font></p><h3 id="用户自定义类"><a href="#用户自定义类" class="headerlink" title="用户自定义类"></a>用户自定义类</h3><p>最简单类的定义形式</p><blockquote><p>class ClassName{</p><p>​    field1;        //域,属性</p><p>​    field2;</p><p>​    constructor1;        //构造器</p><p>​    constructor2;</p><p>​    method1;        //方法</p><p>​    method2;</p><p>​    ……</p><p>}</p></blockquote><h4 id="JavaBean的语法规则"><a href="#JavaBean的语法规则" class="headerlink" title="JavaBean的语法规则:"></a><font color="red">JavaBean的语法规则:</font></h4><ul><li><p>属性私有化</p></li><li><p>提供读写方法(get/set)</p><ul><li>(一般情况下,读写方法是公开的,可以根据业务需求做更改)</li></ul></li><li><p>业务方法公开化</p></li></ul><p>Employee.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">&#123;</span><span class="token comment">//属性(成员变量,域)</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> gender<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> workNumber<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span><span class="token comment">//构造方法(构造器)</span><span class="token comment">//构造方法没有返回值类型</span><span class="token comment">//构造方法的方法名与类同名</span><span class="token comment">//此构造方法没有参数,即此构造方法为无参构造方法(无参构造器)</span><span class="token comment">//无参构造器在开发人员不写任何构造器的前提下是默认提供的</span><span class="token comment">//如果开发人员提供了一个任意非无参(有参)构造器,JDK不再提供无参构造器</span><span class="token comment">//结论:建议无参构造器显示地写出来</span><span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">boolean</span> gender<span class="token punctuation">,</span><span class="token class-name">Date</span> birthday<span class="token punctuation">,</span><span class="token class-name">String</span> workNumber<span class="token punctuation">,</span><span class="token keyword">double</span> salary<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>workNumber <span class="token operator">=</span> workNumber<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"在工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"name="</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",gender="</span><span class="token operator">+</span>gender<span class="token operator">+</span><span class="token string">",birthday="</span><span class="token operator">+</span>birthday<span class="token operator">+</span><span class="token string">",workNumber="</span><span class="token operator">+</span>workNumber<span class="token operator">+</span><span class="token string">",salary="</span><span class="token operator">+</span>salary<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//读方法:get</span><span class="token comment">//写方法、设置方法:set</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//boolean类型的读方法是isXXX,注意是小b,不是Boolean</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> gender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> gender<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> birthday<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBirthday</span><span class="token punctuation">(</span><span class="token class-name">Date</span> birthday<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getWorkNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> workNumber<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWorkNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> workNumber<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>workNumber <span class="token operator">=</span> workNumber<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> salary<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token keyword">double</span> salary<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11-PowerDesigner画类图</title>
      <link href="/2021/08/11/11-PowerDesigner%E7%94%BB%E7%B1%BB%E5%9B%BE/"/>
      <url>/2021/08/11/11-PowerDesigner%E7%94%BB%E7%B1%BB%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>类图实例:</p><img src="/2021/08/11/11-PowerDesigner%E7%94%BB%E7%B1%BB%E5%9B%BE/image-20210811132957783.png" style="zoom:50%;" loading="lazy"><p>类名的编辑:</p><p><img src="/2021/08/11/11-PowerDesigner%E7%94%BB%E7%B1%BB%E5%9B%BE/image-20210811133649268.png" loading="lazy"></p><p>属性编辑:</p><p><img src="/2021/08/11/11-PowerDesigner%E7%94%BB%E7%B1%BB%E5%9B%BE/image-20210811134213175.png" loading="lazy"></p><p>方法编辑:</p><p><img src="/2021/08/11/11-PowerDesigner%E7%94%BB%E7%B1%BB%E5%9B%BE/image-20210811134409025.png" loading="lazy"></p><p><em><strong>几个重要的关系:</strong></em></p><p>依赖(Dependency)（“uses-a”）</p><img src="/2021/08/11/11-PowerDesigner%E7%94%BB%E7%B1%BB%E5%9B%BE/image-20210811132033982.png" style="zoom:33%;" loading="lazy"><p>聚合(Aggregation)（“has-a”）</p><img src="/2021/08/11/11-PowerDesigner%E7%94%BB%E7%B1%BB%E5%9B%BE/image-20210811132057495.png" style="zoom:33%;" loading="lazy"><p>继承(Generalization)（“is-a”）</p><img src="/2021/08/11/11-PowerDesigner%E7%94%BB%E7%B1%BB%E5%9B%BE/image-20210811132110060.png" style="zoom:33%;" loading="lazy"><p><strong>表示符号上的区别:</strong></p><img src="/2021/08/11/11-PowerDesigner%E7%94%BB%E7%B1%BB%E5%9B%BE/image-20210811132331899.png" style="zoom:60%;" loading="lazy"><p>实现(Realization)</p><p>关联(Association)</p><p>组合(Composition)</p><p>专业UML工具:Rational Rose</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-对象的生命周期</title>
      <link href="/2021/08/08/10-%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2021/08/08/10-%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="对象声明-变量赋值"><a href="#对象声明-变量赋值" class="headerlink" title="对象声明,变量赋值"></a>对象声明,变量赋值</h2><blockquote><p>现实世界,先有<font color="red">客观存在</font>,再有抽象</p><p>​                        对象                类</p><p>java程序中,先有<font color="red">类</font>,再有<font color="red">对象</font> (编程思想中)</p><p>类:宏观抽象的集合体</p><p>对象:是类的具体表现形式 (客观体表现形式)</p></blockquote><h4 id="对象-客观世界的存在体-始终存在与计算机的堆内存中"><a href="#对象-客观世界的存在体-始终存在与计算机的堆内存中" class="headerlink" title="对象:客观世界的存在体,始终存在与计算机的堆内存中"></a>对象:客观世界的存在体,始终存在与计算机的<font color="red">堆内存</font>中</h4><h4 id="对象的引用"><a href="#对象的引用" class="headerlink" title="对象的引用:"></a>对象的引用:</h4><ul><li>是一个变量   <font color="red">存在栈内存中</font></li><li>本身没有任何意义</li><li>可以称为引用变量  (对象变量是一个误区)</li><li>只有明确指向的引用变量才有真正的意义,否则即为null</li></ul><h3 id="声明对象引用"><a href="#声明对象引用" class="headerlink" title="声明对象引用"></a>声明对象引用</h3><blockquote><p>引用类型的声明</p><ul><li>声明对象引用的方式和基本数据类型的方式很类似</li><li>Dog dog;</li></ul><p>基本数据类型的声明</p><ul><li>int age;</li></ul></blockquote><h3 id="引用变量的赋值"><a href="#引用变量的赋值" class="headerlink" title="引用变量的赋值"></a>引用变量的赋值</h3><blockquote><ul><li>事实上没有对象变量这样的东西存在</li><li>只有引用 (reference) 到对象的变量 (一般把这个变量直接叫做引用)</li><li>引用并不是对象的容器,而是类似指向对象的指针</li><li>引用变量的赋值,就是让该引用变量指向哪一个对象</li></ul></blockquote><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><blockquote><ul><li><p>java中的引用变量的目的就是要指向一个java对象</p></li><li><p>java对象的创建,需要使用new关键字</p><p>Dog dog = new Dog();</p><ul><li>在堆内存中开辟内存空间,该空间中放置一个Dog对象</li><li>在栈内存中定义一个引用变量dog</li><li>将dog引用变量指向Dog()对象</li></ul></li></ul></blockquote><p>Person.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token comment">//成员变量 属性 域(field)</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">boolean</span> gender<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">//方法</span><span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">String</span> food<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人在吃"</span><span class="token operator">+</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",gender="</span><span class="token operator">+</span>gender<span class="token operator">+</span><span class="token string">",age="</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><p>TestPerson1.java (都是不正规的写法,属性应该private等)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPerson1</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"蔬菜泥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当只需要使用一次的时候使用</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"lisi"</span><span class="token punctuation">;</span><span class="token comment">//new Person().age = 26;已经new了一个新的对象,这是另一个对象的age属性</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//此时的p2没有指向任何的对象,为空指针</span>p2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"wangwu"</span><span class="token punctuation">;</span> <span class="token comment">//为什么空引用能够访问对象的属性?编译时不出错,运行时却出错(java.lang.NullPointerException)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><font color="red">java.lang.NullPointerException</font> : 空指针异常:使用了没有指向任何对象的引用</p><h2 id="对象的生命周期"><a href="#对象的生命周期" class="headerlink" title="对象的生命周期"></a>对象的生命周期</h2><p><strong>生命周期:组件的创建到销毁的整个过程</strong></p><p>GC机制:垃圾回收机制,自行处理内存的回收释放</p><p>TestPerson2.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPerson2</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"lisi"</span><span class="token punctuation">;</span><span class="token comment">//引用变量之间的赋值,其意义是将被赋值的引用指向同一个对象</span><span class="token class-name">Person</span> p3 <span class="token operator">=</span> p1<span class="token punctuation">;</span>p3<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span><span class="token comment">/*此时第8行的对象已经没有了任何引用,将被垃圾回收机制所回收*/</span>p1<span class="token punctuation">.</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p3<span class="token punctuation">.</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>当声明完一个变量之后，我们需要为其赋值，这个过程称为变量的初始化</p><h3 id="自动初始化"><a href="#自动初始化" class="headerlink" title="自动初始化"></a>自动初始化</h3><blockquote><p>仅仅声明，不再为其赋值 </p><p><font color="red">基本数据类型变量的自动初始化有默认值 </font></p><ul><li>byte short int long 为 0 </li><li>float double 为 0.0 </li><li>char 为 ‘\u0000’ </li><li>boolean 为 false</li></ul><p>引用变量的自动初始化有默认值</p><ul><li>null</li></ul></blockquote><p>基本是<font color="red">成员变量</font>。</p><p>**<font color="blue">常量没有默认值，必须显式初始化</font>**。</p><h3 id="显式初始化"><a href="#显式初始化" class="headerlink" title="显式初始化"></a>显式初始化</h3><blockquote><p>改变基本数据类型的默认值 </p><p>为引用变量赋值，使其有明确的指向</p><p>如 </p><ul><li>int age = 25; </li><li>double d = 3.14; </li><li>boolean gender = true; </li><li>Student stu = new Student(“zhangsan”,25); </li><li>Dog dog = new Dog(“旺财”,5);</li></ul></blockquote><p>基本是<font color="red">局部变量</font></p><h3 id="null值的引用"><a href="#null值的引用" class="headerlink" title="null值的引用"></a>null值的引用</h3><blockquote><p>特殊的引用变量值 </p><p>明确该引用变量不指向任何的对象 </p><p>该引用变量只有编译时类型，没有运行时类型</p></blockquote><hr><p>编译时类型:就是在编译期间看的类型</p><p>运行时类型:就是在运行期间看的类型</p><p>Person&#x1f697; p1 = new Person&#x1f699;();</p><p>Person&#x1f697;:编译时类型</p><p>Person&#x1f699;:运行时类型</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09-二维数组</title>
      <link href="/2021/08/08/09-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
      <url>/2021/08/08/09-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>TestArray.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestArray</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//一维数组</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//一维引用数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token comment">//二维数组</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token comment">//三维数组</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//5</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//4</span><span class="token comment">//两个小数组,每个里面三个元素,用于规范的二维数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> array5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>array5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>array5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>array5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>array5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>array5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array5<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>array5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"array5["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]["</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>array5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//for each循环</span><span class="token comment">/*for(int[] e:array5)&#123;for(int i:e)&#123;System.out.println(i);&#125;&#125;*/</span><span class="token comment">//不规范的二维数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array6<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>array6<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>array6<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>array6<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> e<span class="token operator">:</span>array6<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>小测试,横竖打印古诗</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Poetry</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"千"</span><span class="token punctuation">,</span><span class="token string">"山"</span><span class="token punctuation">,</span><span class="token string">"鸟"</span><span class="token punctuation">,</span><span class="token string">"飞"</span><span class="token punctuation">,</span><span class="token string">"绝"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"万"</span><span class="token punctuation">,</span><span class="token string">"径"</span><span class="token punctuation">,</span><span class="token string">"人"</span><span class="token punctuation">,</span><span class="token string">"踪"</span><span class="token punctuation">,</span><span class="token string">"灭"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"孤"</span><span class="token punctuation">,</span><span class="token string">"舟"</span><span class="token punctuation">,</span><span class="token string">"蓑"</span><span class="token punctuation">,</span><span class="token string">"笠"</span><span class="token punctuation">,</span><span class="token string">"翁"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"独"</span><span class="token punctuation">,</span><span class="token string">"钓"</span><span class="token punctuation">,</span><span class="token string">"寒"</span><span class="token punctuation">,</span><span class="token string">"江"</span><span class="token punctuation">,</span><span class="token string">"雪"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"   江雪   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  柳宗元   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">3</span> <span class="token operator">||</span> i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"，"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"   江雪   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  柳宗元   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"。，。，"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><img src="/2021/08/08/09-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/image-20210808201517049.png" alt="image-20210808201517049" style="zoom:50%;" loading="lazy">]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断循环作业</title>
      <link href="/2021/08/05/%E5%88%A4%E6%96%AD%E5%BE%AA%E7%8E%AF%E4%BD%9C%E4%B8%9A/"/>
      <url>/2021/08/05/%E5%88%A4%E6%96%AD%E5%BE%AA%E7%8E%AF%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<h3 id="1-是否闰年"><a href="#1-是否闰年" class="headerlink" title="1.是否闰年"></a>1.是否闰年</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*1、编写程序，判断给定的某个年份是否是闰年，给定的年份通过用户输入的方式动态给定，输入的方式如：Scanner scan = new Scanner(System.in);int year = scan.nextInt();闰年的判断规则如下： 若某个年份能被4整除但不能被100整除，则是闰年 若某个年份能被400整除，则也是闰年*/</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework1</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个有效年份"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> input <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>input<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年份错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>input<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;</span>input<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> input<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>input<span class="token operator">+</span><span class="token string">"是闰年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>input<span class="token operator">+</span><span class="token string">"是平年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-编写程序求-1-3-5-7-……-99-的和值"><a href="#2-编写程序求-1-3-5-7-……-99-的和值" class="headerlink" title="2.编写程序求 1+3+5+7+……+99 的和值"></a>2.编写程序求 1+3+5+7+……+99 的和值</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework2</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1+3+5+7+...+99="</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3-利用三种循环循环打印-9-9-乘法表"><a href="#3-利用三种循环循环打印-9-9-乘法表" class="headerlink" title="3.利用三种循环循环打印 9*9 乘法表"></a>3.利用三种循环循环打印 9*9 乘法表</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*利用三种循环循环打印 9*9 乘法表1*1=1       相当于j*i=1*2=2 2*2=4 1*3=3 2*3=6 3*3=9 1*4=4 2*4=8 3*4=12 4*4=16*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework3</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=== for 9*9 ==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//列</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//行</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>j<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=== while 9*9 ==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>j<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=== do while 9*9 ==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>j<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="4-给定一个百分制的分数，输出相应的等级"><a href="#4-给定一个百分制的分数，输出相应的等级" class="headerlink" title="4.给定一个百分制的分数，输出相应的等级"></a>4.给定一个百分制的分数，输出相应的等级</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*给定一个百分制的分数，输出相应的等级90分以上 A级80~89 B级70~79 C级60~69 D级60分以下 E级*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework4</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//String -> int</span><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>score<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"E级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><font color="red">(String[] args)</font></p><p>在cmd中编译好的java文件后</p><p>输入<font color="red">java Homework4 20 30</font></p><p>代表第一个和第二个参数args是20 30(但是String数组类型的)</p><p><img src="/2021/08/05/%E5%88%A4%E6%96%AD%E5%BE%AA%E7%8E%AF%E4%BD%9C%E4%B8%9A/image-20210806213759462.png" loading="lazy"></p><h3 id="5-水仙花数"><a href="#5-水仙花数" class="headerlink" title="5.水仙花数"></a>5.水仙花数</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*输出水仙花数所谓水仙花数是指一个数3位数，其各位数字立方和等于其本身例如： 153 = 1*1*1 + 3*3*3 + 5*5*5*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework5</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> baiwei <span class="token operator">=</span> i<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> shiwei <span class="token operator">=</span> i<span class="token operator">%</span><span class="token number">100</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> gewei <span class="token operator">=</span> i<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">/*if(baiwei*baiwei*baiwei+shiwei*shiwei*shiwei+gewei*gewei*gewei==i)&#123;System.out.println(+i);&#125;*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>baiwei<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>shiwei<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>gewei<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="6-求-a-aa-aaa-……-aaaaaaaaa"><a href="#6-求-a-aa-aaa-……-aaaaaaaaa" class="headerlink" title="6.求 a+aa+aaa+…….+aaaaaaaaa=?"></a>6.求 a+aa+aaa+…….+aaaaaaaaa=?</h3><p>其中a为1至9之中的一个数，项数也可以指定<br>版本1：1<br>              2+22<br>              5+55+555+5555+55555<br>版本2：1+11+111+…+111111111<br>              2+22+222+…+222222222<br>              5+55+555+5555+…+555555555</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*6、求 a+aa+aaa+.......+aaaaaaaaa=?其中a为1至9之中的一个数，项数也可以指定版本1：1   2+22   5+55+555+5555+55555版本2：1+11+111+…+111111111   2+22+222+…+222222222   5+55+555+5555+…+555555555*/</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework6</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入1-9的数: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> number <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===版本1==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//版本1</span><span class="token keyword">int</span> sum1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>number<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum1 <span class="token operator">+=</span> number<span class="token operator">*</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum1= "</span><span class="token operator">+</span>sum1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//没看懂这个方法,这算下来的不是只有项吗?</span>sum1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>number<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>sum1 <span class="token operator">+=</span> number<span class="token operator">*</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>sum1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>number<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp <span class="token operator">=</span> temp<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>number<span class="token punctuation">;</span>sum1 <span class="token operator">+=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum1= "</span><span class="token operator">+</span>sum1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===版本2==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//版本2</span><span class="token keyword">int</span> sum2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp <span class="token operator">=</span> temp<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>number<span class="token punctuation">;</span>sum2 <span class="token operator">+=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum2= "</span><span class="token operator">+</span>sum2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="7-求-2-1-3-2-5-3-8-5-13-8…-前20项之和（结果的值是一个浮点类型）"><a href="#7-求-2-1-3-2-5-3-8-5-13-8…-前20项之和（结果的值是一个浮点类型）" class="headerlink" title="7.求 2/1+3/2+5/3+8/5+13/8…..前20项之和（结果的值是一个浮点类型）"></a>7.求 2/1+3/2+5/3+8/5+13/8…..前20项之和（结果的值是一个浮点类型）</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*7、求 2/1+3/2+5/3+8/5+13/8.....前20项之和（结果的值是一个浮点类型）*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework7</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token keyword">double</span> fenZi <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">double</span> fenMu <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>result <span class="token operator">+=</span> fenZi<span class="token operator">/</span>fenMu<span class="token punctuation">;</span><span class="token keyword">double</span> temp <span class="token operator">=</span> fenZi<span class="token operator">+</span>fenMu<span class="token punctuation">;</span>fenMu <span class="token operator">=</span> fenZi<span class="token punctuation">;</span>fenZi <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2021/08/05/%E5%88%A4%E6%96%AD%E5%BE%AA%E7%8E%AF%E4%BD%9C%E4%B8%9A/image-20210815190644646.png" loading="lazy"></p><h3 id="8-打印实心等边三角形（底边-号的数量是斜边的2n-1倍）"><a href="#8-打印实心等边三角形（底边-号的数量是斜边的2n-1倍）" class="headerlink" title="8.打印实心等边三角形（底边*号的数量是斜边的2n-1倍）"></a>8.打印实心等边三角形（底边*号的数量是斜边的2n-1倍）</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*8、打印实心等边三角形（底边*号的数量是斜边的2n-1倍）*/</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework8</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入打印星号的高度: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> height <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>height<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打印空格</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>height<span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印星号</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印换行</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><img src="/2021/08/05/%E5%88%A4%E6%96%AD%E5%BE%AA%E7%8E%AF%E4%BD%9C%E4%B8%9A/image-20210815220405187.png" style="zoom:50%;" loading="lazy"><h3 id="9-打印实心和空心菱形"><a href="#9-打印实心和空心菱形" class="headerlink" title="9.打印实心和空心菱形"></a>9.打印实心和空心菱形</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*9、打印实心和空心菱形*   * *  *   * *     **       * *     *  *   *   * *    **/</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework9</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入打印星号的上半部分高度: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> height <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实心菱形</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>height<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打印空格</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>height<span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印星号</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//反过来打印下半部分*</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>height<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打印空格</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>height<span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印星号</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//空心菱形</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>height<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打印空格</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>height<span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印原本实心的星号</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//仅在一行开始和末尾打印*</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">||</span> j<span class="token operator">==</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//反过来打印下半部分*</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>height<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打印空格</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>height<span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印原本实心的星号</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">||</span> j<span class="token operator">==</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><img src="/2021/08/05/%E5%88%A4%E6%96%AD%E5%BE%AA%E7%8E%AF%E4%BD%9C%E4%B8%9A/image-20210815220528896.png" style="zoom:50%;" loading="lazy">]]></content>
      
      
      <categories>
          
          <category> Homework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown颜色字体</title>
      <link href="/2021/08/02/Markdown%E9%A2%9C%E8%89%B2%E5%AD%97%E4%BD%93/"/>
      <url>/2021/08/02/Markdown%E9%A2%9C%E8%89%B2%E5%AD%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、颜色"><a href="#一、颜色" class="headerlink" title="一、颜色"></a>一、颜色</h2><p>在markdown中采用如下方式能够控制文字的颜色：</p><pre class="language-html" data-language="html"><code class="language-html">浅红色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#dd0000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>浅红色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 深红色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#660000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>深红色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 浅绿色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#00dd00<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>浅绿色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 深绿色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#006600<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>深绿色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 浅蓝色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0000dd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>浅蓝色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 深蓝色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000066<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>深蓝色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 浅黄色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#dddd00<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>浅黄色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 深黄色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#666600<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>深黄色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 浅青色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#00dddd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>浅青色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 深青色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#006666<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>深青色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 浅紫色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#dd00dd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>浅紫色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 深紫色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#660066<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>深紫色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> </code></pre><p>效果如下：</p><p>浅红色文字：<font color="#dd0000">浅红色文字：</font><br><br>深红色文字：<font color="#660000">深红色文字</font><br><br>浅绿色文字：<font color="#00dd00">浅绿色文字</font><br><br>深绿色文字：<font color="#006600">深绿色文字</font><br><br>浅蓝色文字：<font color="#0000dd">浅蓝色文字</font><br><br>深蓝色文字：<font color="#000066">深蓝色文字</font><br><br>浅黄色文字：<font color="#dddd00">浅黄色文字</font><br><br>深黄色文字：<font color="#666600">深黄色文字</font><br><br>浅青色文字：<font color="#00dddd">浅青色文字</font><br><br>深青色文字：<font color="#006666">深青色文字</font><br><br>浅紫色文字：<font color="#dd00dd">浅紫色文字</font><br><br>深紫色文字：<font color="#660066">深紫色文字</font><br></p><h2 id="二、大小"><a href="#二、大小" class="headerlink" title="二、大小"></a>二、大小</h2><pre class="language-html" data-language="html"><code class="language-html">size为1：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>size为1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> size为2：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>size为2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> size为3：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>size为3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> size为4：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>size为4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> size为10：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>size为10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> </code></pre><p>size为1：<font size="1">size为1</font><br></p><p>size为2：<font size="2">size为2</font><br><br>size为3：<font size="3">size为3</font><br><br>size为4：<font size="4">size为4</font><br></p><p>size为10：<font size="10">size为10</font><br> </p><h2 id="三、字体"><a href="#三、字体" class="headerlink" title="三、字体"></a>三、字体</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>黑体<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是黑体字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>宋体<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是宋体字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>微软雅黑<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是微软雅黑字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fantasy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是fantasy字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Helvetica<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是Helvetica字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span></code></pre><p>效果如下：</p><p><font face="黑体">我是黑体字</font><br><font face="宋体">我是宋体字</font><br><font face="微软雅黑">我是微软雅黑字</font><br><font face="fantasy">我是fantasy字</font><br><font face="Helvetica">我是Helvetica字</font></p><h2 id="四、背景色"><a href="#四、背景色" class="headerlink" title="四、背景色"></a>四、背景色</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#FF00FF</span><span class="token punctuation">></span></span>背景色的设置是按照十六进制颜色值：#7FFFD4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#FF83FA</span><span class="token punctuation">></span></span>背景色的设置是按照十六进制颜色值：#FF83FA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#D1EEEE</span><span class="token punctuation">></span></span>背景色的设置是按照十六进制颜色值：#D1EEEE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#C0FF3E</span><span class="token punctuation">></span></span>背景色的设置是按照十六进制颜色值：#C0FF3E<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#54FF9F</span><span class="token punctuation">></span></span>背景色的设置是按照十六进制颜色值：#54FF9F<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><table><tr><td bgcolor="#FF00FF">背景色的设置是按照十六进制颜色值：#7FFFD4</td></tr></table><table><tr><td bgcolor="#FF83FA">背景色的设置是按照十六进制颜色值：#FF83FA</td></tr></table><table><tr><td bgcolor="#D1EEEE">背景色的设置是按照十六进制颜色值：#D1EEEE</td></tr></table><table><tr><td bgcolor="#C0FF3E">背景色的设置是按照十六进制颜色值：#C0FF3E</td></tr></table><table><tr><td bgcolor="#54FF9F">背景色的设置是按照十六进制颜色值：#54FF9F</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASCll对照表</title>
      <link href="/2021/08/02/ASCll%E5%AF%B9%E7%85%A7%E8%A1%A8/"/>
      <url>/2021/08/02/ASCll%E5%AF%B9%E7%85%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="ASCII码大致由三部分组成："><a href="#ASCII码大致由三部分组成：" class="headerlink" title="ASCII码大致由三部分组成："></a>ASCII码大致由三部分组成：</h2><h3 id="ASCII-打印字符："><a href="#ASCII-打印字符：" class="headerlink" title="ASCII 打印字符："></a><strong>ASCII 打印字符：</strong></h3><p>数字 32–126 分配给了能在键盘上找到的字符，当您查看或打印文档时就会出现。注：十进制32代表<strong>空格</strong> ，十进制数字 127 代表 DELETE 命令。下面是ASCII码和相应数字的对照表</p><table><thead><tr><th>ASCII 码</th><th></th><th></th><th>ASCII 码</th><th></th><th></th><th>ASCII 码</th><th></th><th></th><th>ASCII 码</th><th></th><th></th></tr></thead><tbody><tr><td>十进位</td><td>十六进位</td><td>字符</td><td>十进位</td><td>十六进位</td><td>字符</td><td>十进位</td><td>十六进位</td><td>字符</td><td>十进位</td><td>十六进位</td><td>字符</td></tr><tr><td>032</td><td>20</td><td></td><td>056</td><td>38</td><td>8</td><td>080</td><td>50</td><td>P</td><td>104</td><td>68</td><td>h</td></tr><tr><td>033</td><td>21</td><td>!</td><td>057</td><td>39</td><td>9</td><td>081</td><td>51</td><td>Q</td><td>105</td><td>69</td><td>i</td></tr><tr><td>034</td><td>22</td><td>“</td><td>058</td><td>3A</td><td>:</td><td>082</td><td>52</td><td>R</td><td>106</td><td>6A</td><td>j</td></tr><tr><td>035</td><td>23</td><td>#</td><td>059</td><td>3B</td><td>;</td><td>083</td><td>53</td><td>S</td><td>107</td><td>6B</td><td>k</td></tr><tr><td>036</td><td>24</td><td>$</td><td>060</td><td>3C</td><td>&lt;</td><td>084</td><td>54</td><td>T</td><td>108</td><td>6C</td><td>l</td></tr><tr><td>037</td><td>25</td><td>%</td><td>061</td><td>3D</td><td>=</td><td>085</td><td>55</td><td>U</td><td>109</td><td>6D</td><td>m</td></tr><tr><td>038</td><td>26</td><td>&amp;</td><td>062</td><td>3E</td><td>&gt;</td><td>086</td><td>56</td><td>V</td><td>110</td><td>6E</td><td>n</td></tr><tr><td>039</td><td>27</td><td>‘</td><td>063</td><td>3F</td><td>?</td><td>087</td><td>57</td><td>W</td><td>111</td><td>6F</td><td>o</td></tr><tr><td>040</td><td>28</td><td>(</td><td>064</td><td>40</td><td>@</td><td>088</td><td>58</td><td>X</td><td>112</td><td>70</td><td>p</td></tr><tr><td>041</td><td>29</td><td>)</td><td><strong><font color="red">065</font></strong></td><td>41</td><td><strong><font color="red">A</font></strong></td><td>089</td><td>59</td><td>Y</td><td>113</td><td>71</td><td>q</td></tr><tr><td>042</td><td>2A</td><td>*</td><td>066</td><td>42</td><td>B</td><td>090</td><td>5A</td><td>Z</td><td>114</td><td>72</td><td>r</td></tr><tr><td>043</td><td>2B</td><td>+</td><td>067</td><td>43</td><td>C</td><td>091</td><td>5B</td><td>[</td><td>115</td><td>73</td><td>s</td></tr><tr><td>044</td><td>2C</td><td>,</td><td>068</td><td>44</td><td>D</td><td>092</td><td>5C</td><td>\</td><td>116</td><td>74</td><td>t</td></tr><tr><td>045</td><td>2D</td><td>-</td><td>069</td><td>45</td><td>E</td><td>093</td><td>5D</td><td>]</td><td>117</td><td>75</td><td>u</td></tr><tr><td>046</td><td>2E</td><td>.</td><td>070</td><td>46</td><td>F</td><td>094</td><td>5E</td><td>^</td><td>118</td><td>76</td><td>v</td></tr><tr><td>047</td><td>2F</td><td>/</td><td>071</td><td>47</td><td>G</td><td>095</td><td>5F</td><td>_</td><td>119</td><td>77</td><td>w</td></tr><tr><td><strong><font color="red">048</font></strong></td><td>30</td><td><strong><font color="red">0</font></strong></td><td>072</td><td>48</td><td>H</td><td>096</td><td>60</td><td>`</td><td>120</td><td>78</td><td>x</td></tr><tr><td>049</td><td>31</td><td>1</td><td>073</td><td>49</td><td>I</td><td><strong><font color="red">097</font></strong></td><td>61</td><td><strong><font color="red">a</font></strong></td><td>121</td><td>79</td><td>y</td></tr><tr><td>050</td><td>32</td><td>2</td><td>074</td><td>4A</td><td>J</td><td>098</td><td>62</td><td>b</td><td>122</td><td>7A</td><td>z</td></tr><tr><td>051</td><td>33</td><td>3</td><td>075</td><td>4B</td><td>K</td><td>099</td><td>63</td><td>c</td><td>123</td><td>7B</td><td>{</td></tr><tr><td>052</td><td>34</td><td>4</td><td>076</td><td>4C</td><td>L</td><td>100</td><td>64</td><td>d</td><td>124</td><td>7C</td><td>|</td></tr><tr><td>053</td><td>35</td><td>5</td><td>077</td><td>4D</td><td>M</td><td>101</td><td>65</td><td>e</td><td>125</td><td>7D</td><td>}</td></tr><tr><td>054</td><td>36</td><td>6</td><td>078</td><td>4E</td><td>N</td><td>102</td><td>66</td><td>f</td><td>126</td><td>7E</td><td>~</td></tr><tr><td>055</td><td>37</td><td>7</td><td>079</td><td>4F</td><td>O</td><td>103</td><td>67</td><td>g</td><td>127</td><td>7F</td><td>DEL</td></tr></tbody></table><h3 id="ASCII-非打印控制字符："><a href="#ASCII-非打印控制字符：" class="headerlink" title="ASCII 非打印控制字符："></a><strong>ASCII 非打印控制字符：</strong></h3><p>ASCII 表上的数字 0–31 分配给了控制字符，用于控制像打印机等一些外围设备。例如，12 代表换页/新页功能。此命令指示打印机跳到下一页的开头。</p><p><img src="/2021/08/02/ASCll%E5%AF%B9%E7%85%A7%E8%A1%A8/ASCll%E7%A0%81%E9%9D%9E%E6%89%93%E5%8D%B0%E6%8E%A7%E5%88%B6%E5%AD%97%E7%AC%A6.png" loading="lazy"></p><p>​    </p><h3 id="扩展-ASCII-打印字符："><a href="#扩展-ASCII-打印字符：" class="headerlink" title="扩展 ASCII 打印字符："></a><strong>扩展 ASCII 打印字符：</strong></h3><p>扩展的 ASCII 字符满足了对更多字符的需求。扩展的 ASCII 包含 ASCII 中已有的 128 个字符（数字 0–32 显示在下图中），又增加了 128 个字符，总共是 256 个。即使有了这些更多的字符，许多语言还是包含无法压缩到 256 个字符中的符号。因此，出现了一些 ASCII 的变体来囊括地区性字符和符号.</p><p>![](ASCll对照表/扩展 ASCII 打印字符.png)</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08-String常用方法讲解</title>
      <link href="/2021/07/31/08-String%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E8%AE%B2%E8%A7%A3/"/>
      <url>/2021/07/31/08-String%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="String常用方法"><a href="#String常用方法" class="headerlink" title="String常用方法"></a>String常用方法</h2><p><strong><font color="red">equals 和 ==</font></strong> (池的概念还有22-包装类)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*    equals:只能使用与引用类型的"比较",按照指定规则进行比较       如果根据指定规则比较的结果一样则返回true,否则返回false      ==  :用于基本类型的比较,直接比较值         用于引用类型的比较,比较的是地址    */</span>    <span class="token comment">/*    String是一个不可变的字符序列,如果要使String对象的字面值发生改变,则相当于创建了一个新的String对象    Java语言为String类型的对象提供了一个常量池    */</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token comment">//hello是字面值</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//开辟了一个新的对象,不在常量池里</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1.equals(s2)="</span><span class="token operator">+</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1.equals(s3)="</span><span class="token operator">+</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1==s2 =>"</span><span class="token operator">+</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1==s3 =>"</span><span class="token operator">+</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>    <span class="token punctuation">&#125;</span></code></pre><p>一共有几个对象?</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token comment">//1个</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token comment">//同上</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token operator">+</span><span class="token string">"world"</span><span class="token punctuation">;</span> <span class="token comment">//world一个,helloworld一个</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//一个,一共四个</span></code></pre><p><font color="red">字符是无符号的整型</font></p><p><strong><font color="red">字符用<code>&#39;&#39;</code>表示,字符串用<code>&quot;&quot;</code>表示</font></strong></p><hr><h3 id="几个常用String方法"><a href="#几个常用String方法" class="headerlink" title="几个常用String方法"></a>几个常用String方法</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestString</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">"Java is very hard!"</span><span class="token punctuation">;</span>        <span class="token comment">// char charAt(int index):返回指定索引处的 char 值。</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.charAt(5) =>"</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int compareTo(String anotherString):按字典顺序比较两个字符串。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.compareTo(\"Java is very hard!\") =>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"Java is very hard!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int compareToIgnoreCase(String str):按字典顺序比较两个字符串，不考虑大小写。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.compareToIgnoreCase(\"java is very hard!\") =>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">compareToIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"java is very hard!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//boolean contains(CharSequence s):当且仅当此字符串包含指定的 char 值序列时，返回 true。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.contains(\"very\") =>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"very"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//boolean endsWith(String suffix):测试此字符串是否以指定的后缀结束。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.endsWith(\"!\") =>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//boolean equals(Object anObject):将此字符串与指定的对象比较。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.equals(\"Java is very hard!\") =>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Java is very hard!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//boolean equalsIgnoreCase(String anotherString):将此 String 与另一个 String 比较，不考虑大小写。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.equalsIgnoreCase(\"Java is very hard!\") =>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"Java is very hard!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//byte[] getBytes():使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"content.getBytes()==>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>bytes<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//int hashCode():返回此字符串的哈希码</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.hashCode()==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到的是content引用变量指向的String对象的内存空间所表示的地址的数字表现形式经过哈希算法得到的数值</span><span class="token comment">//int indexOf(int ch):返回指定字符在此字符串中第一次出现处的索引。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.indexOf('a') =>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.indexOf(97) =>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int indexOf(String str):返回指定子字符串在此字符串中第一次出现处的索引。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.indexOf(\"is\") =>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"is"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//boolean isEmpty():当且仅当 length() 为 0 时返回 true。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.isEmpty()==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int lastIndexOf(int ch):返回指定字符在此字符串中最后一次出现处的索引。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.lastIndexOf('a')==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int lastIndexOf(String str):返回指定子字符串在此字符串中最右边出现处的索引。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.lastIndexOf(\"is\")==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"is"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int length() :返回此字符串的长度。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.length() =>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String replace(char oldChar, char newChar):返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.replace('a','A')==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String replace(CharSequence target, CharSequence replacement) :使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.replace(\"Java\",\"&lt;-_->\")==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span><span class="token string">"&lt;-_->"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String replaceAll(String regex, String replacement):使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。 </span><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"1a2b3cd.23e"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1.replace(\".\",\"。\") ==>"</span><span class="token operator">+</span>str1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"。"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1.replaceAll(\".\",\"。\") ==>"</span><span class="token operator">+</span>str1<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"。"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//正则表达式.匹配除换行符以外的任意字符</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1.replaceAll(\"\\d\",\"锐\") ==>"</span><span class="token operator">+</span>str1<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\d"</span><span class="token punctuation">,</span><span class="token string">"锐"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\d匹配数字</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1.replace(\"e\",\"哈\") ==>"</span><span class="token operator">+</span>str1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token string">"哈"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//不是regex,所以精确匹配该字符</span><span class="token comment">//String replaceFirst(String regex, String replacement):使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.replaceFirst(\"a\",\"哈\") ==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"哈"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String[] split(String regex):根据给定正则表达式的匹配拆分此字符串。 </span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stringArray <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//空格作为分割符</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"content.split(\" \")==>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>stringArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stringArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>stringArray<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//boolean startsWith(String prefix):测试此字符串是否以指定的前缀开始。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.startsWith(\"Java\")==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String substring(int beginIndex):返回一个新的字符串，它是此字符串的一个子字符串。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.substring(5)==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String substring(int beginIndex, int endIndex):返回一个新字符串，它是此字符串的一个子字符串。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.substring(5,10)==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左包含,右不包含</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.substring(5,content.length())==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>content<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//char[] toCharArray():将此字符串转换为一个新的字符数组 </span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"content.toCharArray()==>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>charArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>charArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>charArray<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//String toLowerCase():使用默认语言环境的规则将此 String 中的所有字符都转换为小写。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.toLowerCase()==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String toUpperCase():使用默认语言环境的规则将此 String 中的所有字符都转换为大写。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.toUpperCase()==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String toString():返回此对象本身(它已经是一个字符串！) </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.toString()==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content==>"</span><span class="token operator">+</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//和上面一样</span><span class="token comment">//String trim():返回字符串的副本，忽略前导空白和尾部空白 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\"  老子 不想学 java  \".trim()==>"</span><span class="token operator">+</span><span class="token string">"  老子 不想学 java  "</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//static String valueOf(xxx b):将xxx类型的b值转成String类型</span><span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">double</span> a2 <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> a3 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">char</span> a4 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"100"  静态方法,不用对象调用,用类名调用</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"3.14"</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"true"</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"A"</span><span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token string">""</span><span class="token operator">+</span>a1<span class="token punctuation">;</span>  <span class="token comment">//推荐这种方式</span><span class="token class-name">String</span> s6 <span class="token operator">=</span> <span class="token string">""</span><span class="token operator">+</span>a2<span class="token punctuation">;</span><span class="token class-name">String</span> s7 <span class="token operator">=</span> <span class="token string">""</span><span class="token operator">+</span>a3<span class="token punctuation">;</span><span class="token class-name">String</span> s8 <span class="token operator">=</span> <span class="token string">""</span><span class="token operator">+</span>a4<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1="</span><span class="token operator">+</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s2="</span><span class="token operator">+</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s3="</span><span class="token operator">+</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s4="</span><span class="token operator">+</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s5="</span><span class="token operator">+</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s6="</span><span class="token operator">+</span>s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s7="</span><span class="token operator">+</span>s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s8="</span><span class="token operator">+</span>s8<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="/2021/07/31/08-String%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E8%AE%B2%E8%A7%A3/image-20210806221740337.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07-数组</title>
      <link href="/2021/07/22/07-%E6%95%B0%E7%BB%84/"/>
      <url>/2021/07/22/07-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数组的基本操作"><a href="#数组的基本操作" class="headerlink" title="数组的基本操作"></a>数组的基本操作</h1><h3 id="常见的数据结构"><a href="#常见的数据结构" class="headerlink" title="常见的数据结构"></a>常见的数据结构</h3><blockquote><ul><li>数组(Array):管理多个数据</li><li>栈(Stack):先进后出(后进先出)</li><li>队列(Queue):先进先出</li><li>链表(Linked List):查询效率低，增加、删除效率高<ul><li>单向链表</li><li>双向链表</li><li>环形链表</li></ul></li><li>二叉数等………..</li></ul></blockquote><hr><h3 id="数组概述"><a href="#数组概述" class="headerlink" title="数组概述"></a>数组概述</h3><blockquote><ul><li>数组也是<strong>对象</strong></li><li>数组中保存着多个相同类型的元素</li><li>数组中的每一个元素都是<strong>变量</strong></li></ul></blockquote><hr><h3 id="定义数组-基本类型的数组"><a href="#定义数组-基本类型的数组" class="headerlink" title="定义数组    (基本类型的数组)"></a>定义数组    (基本类型的数组)</h3><p><strong>创建TestArray1.java</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestArray1</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                <span class="token comment">//数组的定义和赋值</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numberArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//numberArray是引用类型,引用数组对象</span>        <span class="token comment">//数组元素的赋值</span>        numberArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        numberArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        numberArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>        numberArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>        numberArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numberArray<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//数组的遍历:一个一个地看一下</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numberArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"numberArray["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>numberArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>数组本身:System.out.println(numberArray);</p><p><img src="/2021/07/22/07-%E6%95%B0%E7%BB%84/image-20210724155545943.png" loading="lazy"></p></blockquote><p><font color="red">java.lang.ArrayIndexOutOfBoundsException</font>:数组越界异常</p><p><strong>创建TestArray2.java</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestArray2</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numberArray1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        numberArray1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        numberArray1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>        numberArray1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numberArray1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"numberArray1["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>numberArray1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//数组的其他定义方法</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numberArray2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                 <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numberArray2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"numberArray2["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>numberArray2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">//该种方式不建议使用</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numberArray3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><hr><h3 id="数组类型的默认值"><a href="#数组类型的默认值" class="headerlink" title="数组类型的默认值"></a>数组类型的默认值</h3><blockquote><ul><li>byte、short、int、long为0</li><li>float、double为0.0</li><li>char为’\u0000’</li><li>boolean为false</li><li>引用类型为null</li></ul></blockquote><hr><h3 id="引用类型的数组"><a href="#引用类型的数组" class="headerlink" title="引用类型的数组"></a>引用类型的数组</h3><p><strong>创建TestArray3.java    (引用上一个person类)</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestArray3</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> personArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        personArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>personArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>personArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>personArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"personArray["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>personArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token operator">:</span>personArray<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2021/07/22/07-%E6%95%B0%E7%BB%84/image-20210729204356010.png" loading="lazy"></p><p>测试结果:</p><p><img src="/2021/07/22/07-%E6%95%B0%E7%BB%84/image-20210729204758552.png" loading="lazy"></p><hr><h3 id="Java语言注重类型"><a href="#Java语言注重类型" class="headerlink" title="Java语言注重类型"></a>Java语言注重类型</h3><blockquote><ul><li>一旦数组被声明出来,你就只能够装入所声明类型的元素</li><li>数组元素的初始化分为两种<ul><li>基本类型元素的初始化就是直接将数据放入数组元素中</li><li>引用类型的元素的初始化需要去指向另外一个对象</li></ul></li></ul></blockquote><h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><blockquote><ul><li>数组的遍历就是依次访问数组元素的值</li><li>通常情况下使用for循环</li><li>JDK1.5以后，更加便利的for each循环</li><li>数组的length属性</li></ul></blockquote><h4 id="for-each-循环"><a href="#for-each-循环" class="headerlink" title="for each 循环"></a><font color="red"><strong>for each 循环</strong></font></h4><p>好处:简化遍历</p><p>缺点:只能全部遍历</p><blockquote><p>for(类型 元素:被遍历的容器对象){</p><p>}</p></blockquote><pre class="language-java" data-language="java"><code class="language-java">例子<span class="token operator">:</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> xxx<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><hr><h3 id="数组的拷贝-扩容"><a href="#数组的拷贝-扩容" class="headerlink" title="数组的拷贝(扩容)"></a>数组的拷贝(扩容)</h3><blockquote><p><font color="red">System.arraycopy();      </font>        (java.lang下的)</p><p>arraycopy(Object src, int srcPos, Object dest, int  destPos, int length)</p><ul><li>src - 源数组</li><li>srcPos - 源数组中的起始位置</li><li>dest - 目标数组</li><li>destPos - 目标数据中的起始位置</li><li>length - 要复制的数组元素的数量</li></ul></blockquote><p><strong>创建TestArraycopy</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestArraycopy</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>array1<span class="token punctuation">.</span>length<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//一般扩容两倍</span><span class="token comment">/*for(int i=0;i&lt;array1.length;i++)&#123; //拷贝array2[i] = array1[i];&#125;*/</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>array1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>array2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>array1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"array2["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>array2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><hr><h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a><font color="red">数组排序</font></h3><h4 id="冒泡排序-效率最低"><a href="#冒泡排序-效率最低" class="headerlink" title="冒泡排序    (效率最低):"></a>冒泡排序    (效率最低):</h4><ol><li>比较相邻的元素。如果第一个比第二个小，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最小的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><p><strong>创建TestBubbleSort</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//冒泡排序</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span>   <span class="token comment">//随机数</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBubbleSort</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//使用随机数为数组元素赋值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历原始数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"遍历原始数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//排序</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//-i步骤优化了程序,</span><span class="token comment">//冒泡排序一趟下来最后两位不要动了</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历排序后的数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\遍历排序后数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2021/07/22/07-%E6%95%B0%E7%BB%84/image-20210730194407428.png" loading="lazy"></p><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序:"></a>插入排序:</h4><ol><li>从第一个元素开始，该元素可以认为已经被排序 </li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描  </li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置  </li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置  </li><li>将新元素插入到该位置中  </li><li>重复步骤2 </li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInsertSort</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//使用随机数为数组元素赋值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历原始数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"遍历原始数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//排序</span><span class="token keyword">int</span> size <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//找到位置往后挪</span><span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//插入数据</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历排序后的数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n遍历排序后数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序:"></a>选择排序:</h4><ol><li>在未排序序列中找到最小的元素,存放到排序序列的起始位置</li><li>再从剩余未排序元素中继续寻找最小元素,然后放到排序序列起始位置</li><li>以此类推,直到所有元素均排序完毕</li></ol><p><strong>创建TestSelectSort</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSelectSort</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//使用随机数为数组元素赋值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历原始数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"遍历原始数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//排序</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">int</span> size <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">></span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>k <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历排序后的数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n遍历排序后数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序:"></a>快速排序:</h4><ol><li>从数列中挑出一个元素，称为“基准”(pivot)  </li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这 个分割之后，  </li><li>该基准是它的最后位置。这个称为分割（partition）操作。  </li><li>递归地把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestQuickSort</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">L</span><span class="token operator">>=</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">int</span> left<span class="token operator">=</span><span class="token class-name">L</span><span class="token punctuation">,</span>right<span class="token operator">=</span><span class="token class-name">R</span><span class="token punctuation">;</span><span class="token keyword">int</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">&#123;</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">&#123;</span>left<span class="token operator">&lt;</span>right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">>=</span>pivot<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>right<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&lt;=</span>pivot<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>left<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">>=</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token class-name">L</span><span class="token punctuation">,</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="使用Arrays类帮助排序-Arrays-sort"><a href="#使用Arrays类帮助排序-Arrays-sort" class="headerlink" title="使用Arrays类帮助排序 Arrays.sort()"></a><strong><font color="red">使用Arrays类帮助排序</font></strong> Arrays.sort()</h3><p><strong>java.util.Arrays</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span>   <span class="token comment">//随机数</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBubbleSort</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//使用随机数为数组元素赋值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历原始数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"遍历原始数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用Arrays类排序</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历排序后的数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n遍历排序后数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aplayer播放器</title>
      <link href="/2021/07/19/Aplayer%E6%92%AD%E6%94%BE%E5%99%A8/"/>
      <url>/2021/07/19/Aplayer%E6%92%AD%E6%94%BE%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h2>    <div id="aplayer-JrnfBWpG" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1344440225" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div>    <div id="aplayer-TpLKpekH" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="228891614" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div><blockquote><p>安装 <a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a></p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-tag-aplayer</code></pre><blockquote><p>可参见<a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md">官方文档</a>。</p></blockquote><p>推荐的配置（在 Hexo 的根目录下的 <code>_config.yml</code> 中）：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">aplayer</span><span class="token punctuation">:</span>  <span class="token key atrule">cdn</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js  <span class="token key atrule">style_cdn</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css  <span class="token key atrule">meting</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#MetingJS 功能</span>  <span class="token key atrule">meting_cdn</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js</code></pre><blockquote><p>TIP</p><p>如果你发现 Aplayer 有时会在无关紧要的文件里也重复引入头文件。记得关闭自动脚本插入。</p><p>MeingJS 支持 (3.0 新功能)<br>MetingJS 是基于Meting API 的 APlayer 衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。</p><p>如果想在本插件中使用 MetingJS，请在 Hexo 配置文件 _config.yml 中设置：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">aplayer</span><span class="token punctuation">:</span>  <span class="token key atrule">meting</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>接着就可以 在文章中使用 MetingJS 播放器了。</p></blockquote><blockquote><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md#%E9%87%8D%E5%A4%8D%E8%BD%BD%E5%85%A5-aplayerjs-%E8%B5%84%E6%BA%90%E8%84%9A%E6%9C%AC%E9%97%AE%E9%A2%98">重复载入 Aplayer.js 资源脚本问题</a></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">aplayer</span><span class="token punctuation">:</span>  <span class="token key atrule">asset_inject</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre></blockquote><h3 id="然后在文章头部决定是否开启-aplayer"><a href="#然后在文章头部决定是否开启-aplayer" class="headerlink" title="然后在文章头部决定是否开启 aplayer:"></a>然后在文章头部决定是否开启 <code>aplayer</code>:</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> xxx<span class="token key atrule">aplayer</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">---</span></code></pre><p>插入某首网易云音乐的歌</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">&#123;% meting "497572729" "netease" "song" "theme:#C20C0C" %&#125;</code></pre><p>其中的netease为公司名，也就是音乐平台，如: <code>netease</code>(网易云), <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code>；</p><p>有关选项列表如下:</p><table><thead><tr><th>选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td><strong>必须值</strong></td><td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td></tr><tr><td>server</td><td><strong>必须值</strong></td><td>音乐平台:<code> netease, tencent, kugou, xiami, baidu</code></td></tr><tr><td>type</td><td><strong>必须值</strong></td><td><code>song, playlist, album, search, artist</code></td></tr><tr><td>fixed</td><td><code>false</code></td><td>开启固定模式</td></tr><tr><td>mini</td><td><code>false</code></td><td>开启迷你模式</td></tr><tr><td>loop</td><td><code>all</code></td><td>列表循环模式：<code>all, one,none</code></td></tr><tr><td>order</td><td><code>list</code></td><td>列表播放模式：<code> list, random</code></td></tr><tr><td>volume</td><td>0.7</td><td>播放器音量</td></tr><tr><td>lrctype</td><td>0</td><td>歌词格式类型</td></tr><tr><td>listfolded</td><td><code>false</code></td><td>指定音乐播放列表是否折叠</td></tr><tr><td>storagename</td><td><code>metingjs</code></td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr><td>autoplay</td><td><code>true</code></td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td>mutex</td><td><code>true</code></td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td>listmaxheight</td><td><code>340px</code></td><td>播放列表的最大长度</td></tr><tr><td>preload</td><td><code>auto</code></td><td>音乐文件预载入模式，可选项:<code>none,metadata, auto</code></td></tr><tr><td>theme</td><td><code>#ad7a86</code></td><td>播放器风格色彩设置</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06-自定义类和对象的创建</title>
      <link href="/2021/07/19/06-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
      <url>/2021/07/19/06-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="创建Person类"><a href="#创建Person类" class="headerlink" title="创建Person类"></a>创建Person类</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token comment">//成员变量 属性 域(field)</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">boolean</span> gender<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">//方法</span><span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">String</span> food<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人在吃"</span><span class="token operator">+</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",gender="</span><span class="token operator">+</span>gender<span class="token operator">+</span><span class="token string">",age="</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><p><font color="red">成员变量有默认值,局部变量没有</font></p><h3 id="创建TestPerson类"><a href="#创建TestPerson类" class="headerlink" title="创建TestPerson类"></a>创建TestPerson类</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPerson</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token comment">//hello是字面值</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        Person p : 在栈内存中定义一个类型为Person的变量p        new Person() : 通过new关键字在堆内存中开辟适当空间         Person()是一个对象,将该对象放进刚刚开辟的空间中        = : 让p变量指向放进刚刚那个空间中的对象,即p就是该对象的一个引用        */</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"朱锐"</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1="</span><span class="token operator">+</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str2="</span><span class="token operator">+</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p="</span><span class="token operator">+</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre><p><img src="/2021/07/19/06-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/image-20210722134349407.png" alt="image-20210722134349407" loading="lazy"></p><p><font color="red">变量都存在栈内存中</font></p><p><font color="red">基本类型的值可以直接放进变量中</font> 类似容器,可以存放基本类型的值</p><p><font color="red">引用类型从堆内存中引用 </font>类似指向对象的指针</p><hr><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>进入测试文件目录:</p><pre class="language-java" data-language="java"><code class="language-java">javac <span class="token class-name">TestPerson</span><span class="token punctuation">.</span>java    <span class="token comment">//生成.class文件</span>java <span class="token class-name">TestPerson</span></code></pre><img src="/2021/07/19/06-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/01.png" alt style="zoom:50%;" loading="lazy"><p><strong>空间的地址符号</strong>    –计算–&gt;    <strong>一串数字</strong>    –哈希算法–&gt;    <strong>得到的值</strong></p><p><code>p=Person@15db9742</code></p><p>等于：<font color="red">getClass().getName() + ‘@’ + Integer.toHexString(hashCode())</font></p><p>固定写法:<strong>类名@得到的值</strong></p><hr><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><ul><li>在订单系统中，一般有如下的一些名词 <ul><li>账户（Account） </li><li>付款（Payment） </li><li>送货地址（ShoppingAddress） </li><li>订单（Order） </li><li>订单项（Item） </li></ul></li><li>可能还有如下一些动词 <ul><li>添加（add） </li><li>发送（send） </li><li>取消（cancle） </li><li>支付（pay）</li></ul></li></ul><p><font color="red">名词一般设计为<font color="green">类或属性</font>,动词一般设计为<font color="green">方法.</font></font></p><p><em><strong>几个重要的关系:</strong></em></p><p>依赖（“uses-a”）</p><img src="/2021/07/19/06-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/image-20210811132033982.png" style="zoom:33%;" loading="lazy"><p>聚合（“has-a”）</p><img src="/2021/07/19/06-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/image-20210811132057495.png" style="zoom:33%;" loading="lazy"><p>继承（“is-a”）</p><img src="/2021/07/19/06-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/image-20210811132110060.png" style="zoom:33%;" loading="lazy"><p><strong>表示符号上的区别:</strong></p><img src="/2021/07/19/06-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/image-20210811132331899.png" style="zoom:60%;" loading="lazy">]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05-面向对象的概述</title>
      <link href="/2021/07/19/05-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A6%82%E8%BF%B0/"/>
      <url>/2021/07/19/05-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象的概述"><a href="#面向对象的概述" class="headerlink" title="面向对象的概述"></a>面向对象的概述</h2><h3 id="Java的小门槛"><a href="#Java的小门槛" class="headerlink" title="Java的小门槛"></a>Java的小门槛</h3><ul><li>判断循环 - 逻辑思维</li><li>面向对象的思想</li><li>反射</li></ul><h3 id="Java的面向对象术语"><a href="#Java的面向对象术语" class="headerlink" title="Java的面向对象术语"></a>Java的面向对象术语</h3><ul><li><p>OOA:Object Oriented Analysis,面向对象程序的分析</p></li><li><p>OOD:Object Oriented Design,面向对象程序的设计</p><p>面向对象程序设计是当今主流的程序设计泛型,它已经取代(夸张)了70年代早期的”结构化”过程式程序设计开发技术。</p></li><li><p>OOP:Object Oriented Programing,面向对象程序的编码</p><ul><li>程序是由对象组成的,这些对象有自己的属性和能够执行的操作</li><li>程序只关心对象能够满足的要求，并不需要去关心其功能 的具体实现的过程 </li><li>OOP的关键是让每一个对象负责执行一组相关的任务</li><li>如果一个对象依赖于另一个对象负责处理的任务，那么它 就去访问那个包括该任务的对象（方法调用）</li><li>一个对象既不能直接访问另一个对象内部的数据，也不能让其他对象直接访问自己内部的数据</li></ul></li><li><p>API:Application Programming Interface,应用程序编程接口</p></li></ul><h3 id="Java面向对象的三大特性"><a href="#Java面向对象的三大特性" class="headerlink" title="Java面向对象的三大特性"></a>Java面向对象的<font color="red"><strong>三大特性</strong></font></h3><ul><li><h4 id="封装-encapsulation"><a href="#封装-encapsulation" class="headerlink" title="封装(encapsulation):"></a><font color="blue">封装(encapsulation):</font></h4><p>将数据和行为结合在一个包中,并对对象的使用者隐藏了数据的实现方式。</p><p><strong>数据</strong>:实例域(属性)</p><p><strong>行为</strong>:方法</p><p><strong><font color="red">访问控制级别表:</font></strong></p><table><thead><tr><th align="center"></th><th align="center">private</th><th align="center">default</th><th align="center">protected</th><th align="center">public</th></tr></thead><tbody><tr><td align="center">同一个类中</td><td align="center">&#x2714;</td><td align="center">&#x2714;</td><td align="center">&#x2714;</td><td align="center">&#x2714;</td></tr><tr><td align="center">同一个包中</td><td align="center"></td><td align="center">&#x2714;</td><td align="center">&#x2714;</td><td align="center">&#x2714;</td></tr><tr><td align="center">子类中</td><td align="center"></td><td align="center"></td><td align="center">&#x2714;</td><td align="center">&#x2714;</td></tr><tr><td align="center">全局范围内</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">&#x2714;</td></tr></tbody></table></li><li><h4 id="继承-inheritance"><a href="#继承-inheritance" class="headerlink" title="继承(inheritance):"></a><font color="blue">继承(inheritance):</font></h4><p>利用继承,可以基于已存在的<strong>类</strong>构造的一个新类。</p><p>继承已存在的类就是__复用(继承)__这些类的方法和域,;以满足新的业务需求。</p></li><li><h4 id="多态-polymorphism-："><a href="#多态-polymorphism-：" class="headerlink" title="多态(polymorphism)："></a><font color="blue">多态(polymorphism)：</font></h4><ul><li>Java引用变量有两个类型：**<font color="red">编译时类型</font><strong>和</strong><font color="red">运行时类型</font>**</li><li>编译时类型由声明该变量时使用的类型决定，运行时类型由实际赋值给变量的对象的类型决定。</li><li>如果<font color="red">编译时类型和运行时类型不一致</font>，就会出现所谓的<font color="grenn">多态</font>。</li></ul><blockquote><p>编译时类型:就是在编译期间看的类型</p><p>运行时类型:就是在运行期间看的类型</p><p>Person&#x1f697; p1 = new Person&#x1f699;();</p><p>Person&#x1f697;:编译时类型</p><p>Person&#x1f699;:运行时类型</p></blockquote></li></ul><ul><li><h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a><strong>抽象</strong></h4><ul><li>是封装、继承、多态的基础</li><li>提取各个个体的共性，形成一个通用的形式</li><li>只关心当前目标有关的信息，忽略其他的信息</li><li>某些书籍也将抽象纳入Java的特性之一</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04-Java表达式</title>
      <link href="/2021/07/19/04-Java%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2021/07/19/04-Java%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="操作数"><a href="#操作数" class="headerlink" title="操作数"></a>操作数</h2><ul><li><p>操作数的概念是建立在具体的操作之上的</p></li><li><p>具体的操作应该是一条语句</p></li><li><p>表达式是语句的一种特殊表现形式</p></li><li><p>表达式也可以视为特殊的操作数</p><p>1 + 2;</p><p>a &gt; 5;</p><p>3 != 5;</p><p>(a-6) &gt; 9;</p><p>…</p></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li><p>常用运算符</p><table><thead><tr><th align="center">序号</th><th align="center">描述</th><th>运算符</th><th align="center">结合性</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">括号和引用</td><td><strong>()     []    .</strong></td><td align="center">左→右</td></tr><tr><td align="center">2</td><td align="center">单目运算符</td><td><strong>++   –    !    ~</strong></td><td align="center">右→左</td></tr><tr><td align="center">3</td><td align="center">算术运算符</td><td>***   /    %    +   -**</td><td align="center">左→右</td></tr><tr><td align="center">4</td><td align="center">关系运算符</td><td><strong>&gt;   &gt;=   &lt;   &lt;=   ==    !=   instanceof</strong></td><td align="center">左→右</td></tr><tr><td align="center">5</td><td align="center">逻辑运算符</td><td><strong>&amp;&amp;  ||  &amp;   |</strong></td><td align="center">左→右</td></tr><tr><td align="center">6</td><td align="center">位运算符</td><td><strong>&lt;&lt;  &gt;&gt;  &gt;&gt;&gt;  &amp;  |  ^</strong></td><td align="center">左→右</td></tr><tr><td align="center">7</td><td align="center">条件运算符</td><td><strong>?  :</strong></td><td align="center">/</td></tr><tr><td align="center">8</td><td align="center">赋值运算符</td><td>**=  +=  -=  <em>=  /=  %=  &gt;&gt;=  &gt;&gt;&gt;=  &lt;&lt;=  &amp;=  |=  ^=</em>*</td><td align="center">右→左</td></tr></tbody></table></li></ul><h3 id="运算符详解"><a href="#运算符详解" class="headerlink" title="运算符详解"></a>运算符详解</h3><h4 id="括号和引用"><a href="#括号和引用" class="headerlink" title="括号和引用"></a>括号和引用</h4><ul><li>()    []    .</li><li>()<ul><li>强制类型转换</li><li>提升运算符优先级</li></ul></li><li>[]<ul><li>数组的声明语法</li><li>数组下标访问符</li></ul></li><li>.<ul><li>访问运算符</li></ul></li></ul><h4 id="单目运算符"><a href="#单目运算符" class="headerlink" title="单目运算符"></a>单目运算符</h4><ul><li>++    –    !    ~</li><li>++<ul><li>自涨1</li><li>++i,在使用i前,先使i的值加1</li><li>i++,在使用i后,再使i的值加1</li></ul></li></ul><hr><ul><li>自减1</li><li>–i,在使用i前,先使i的值减1</li><li>i–,在使用i后,再使i的值减1</li><li>!<ul><li>逻辑反</li></ul></li><li>~<ul><li>按位取反</li></ul></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token operator">++</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span>  <span class="token comment">//先执行a+6,再将a加1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">",b="</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token operator">++</span>c <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span>  <span class="token comment">//先将c+1,再执行c+6</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c="</span><span class="token operator">+</span>c<span class="token operator">+</span><span class="token string">",d="</span><span class="token operator">+</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><pre class="language-markdown" data-language="markdown"><code class="language-markdown">算术运算符/%+-*<span class="token code keyword">*:乘/:除%:模        2 * 3 = 6        9 / 3 = 3        9 % 3 = 0+:    算术意义上面的加    java对"+"运算符进行了扩展,使它能够进行字符串的连接,如"abc" + "de",得到串"abcde"-:算术意义上的减</span></code></pre><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><pre class="language-markdown" data-language="markdown"><code class="language-markdown">关系运算符> >= &lt; &lt;= == != instanceof>:大于>=:大于等于,不小于&lt;:小于&lt;=:小于等于,不大于==:等于!=:不等于instanceof: 左操作数是否是右操作数的子类 左操作数是否是右操作数的子接口 左操作数是否是右操作数的实现类</code></pre><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><ul><li>&amp;&amp;  ||  &amp;  |<ul><li>&amp;&amp;:    短路与</li><li>||:     短路或</li><li>&amp;:      不短路与</li><li>|:       不短路或</li></ul></li><li>短路与不短路之间的区别?<ul><li>短路:只要第一个操作数的结果能决定最终的结果,则后续的操作数不再执行</li><li>不短路:只要第一个操作数的结果能决定最终的结果,则后续的操作数继续执行</li></ul></li></ul><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><table><thead><tr><th align="center">运算符</th><th align="center">用法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">~</td><td align="center">~op</td><td align="center">按位取反</td></tr><tr><td align="center">&amp;</td><td align="center">op1 &amp; op2</td><td align="center">按位与</td></tr><tr><td align="center">|</td><td align="center">op1 |op2</td><td align="center">按位或</td></tr><tr><td align="center">^</td><td align="center">op1 ^ op2</td><td align="center">按位异或</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">op1 &gt;&gt; op2</td><td align="center">op1右移op2位</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">op1 &lt;&lt; op2</td><td align="center">op1左移op2位</td></tr><tr><td align="center">&gt;&gt;&gt;</td><td align="center">op1 &gt;&gt;&gt; op2</td><td align="center">op1无符号右移op2位</td></tr></tbody></table><ul><li><p>位运算符的运算结果表</p><table><thead><tr><th align="center">第一个运算数</th><th align="center">第二个运算数</th><th align="center">按位与(&amp;)</th><th align="center">按位或(|)</th><th align="center">按位异或(^)</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">0</td></tr></tbody></table></li></ul><p><img src="/2021/07/19/04-Java%E8%A1%A8%E8%BE%BE%E5%BC%8F/01.png" loading="lazy"></p><h4 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h4><ul><li>?   :</li><li>条件表达式   ?结果1 :  结果2<ul><li>如果条件表达式为真,返回结果1</li><li>如果条件表达式为假,返回结果2</li></ul></li></ul><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><ul><li><strong>=</strong></li><li>**+=  -=  <em>=  /=  %=</em>*</li><li><strong>&gt;&gt;=  &gt;&gt;&gt;=  &lt;&lt;=  &amp;=  |=  ^=</strong></li></ul><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><h4 id="运算符的默认优先级"><a href="#运算符的默认优先级" class="headerlink" title="运算符的默认优先级"></a>运算符的默认优先级</h4><ul><li>分隔符： . [] （）{} , ;</li><li>单目运算符：++ – ~ !</li><li>强制类型转换：（)</li><li>乘除模：* / %</li><li>移位：&lt;&lt; &gt;&gt; &gt;&gt;&gt;</li><li>关系：&lt; &lt;= &gt; &gt;= instanceof</li><li>相等：== !=</li><li>按位与：&amp;</li><li>按位异或：^</li><li>按位或：^</li><li>条件并且：&amp;&amp;</li><li>条件或者：||</li><li>三目运算符：？:</li><li>赋值运算符：= += -= *= /= %= &gt;&gt;= &gt;&gt;&gt;= &lt;&lt;= &amp;= |=  ^=</li></ul><p><em><strong>无需记忆</strong></em></p><p><em><strong>提升运算符的优先级:   ()</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-Java基本数据类型</title>
      <link href="/2021/07/19/03-Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2021/07/19/03-Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基本数据类型"><a href="#Java基本数据类型" class="headerlink" title="Java基本数据类型"></a>Java基本数据类型</h1><blockquote><p>byte              8bit整型值</p><p>short            16bit整型值</p><p>int                 32bit整型值</p><p>long              64bit整型值</p><p>float             32bit浮点数值</p><p>double         64bit浮点数值</p><p>char             16bit  unicode编码</p><p>boolean       布尔值(true或false)</p></blockquote><h2 id="1、整型数据类型：byte、short、int、long"><a href="#1、整型数据类型：byte、short、int、long" class="headerlink" title="1、整型数据类型：byte、short、int、long"></a>1、整型数据类型：byte、short、int、long</h2><ul><li>三种形式给一个整型变量直接赋值：十进制、 八进制、十六进制</li><li><font color="red">直接给出的整型值默认是int类型</font></li><li>长整型值应该在数字后面跟上  ‘l’ 或  ‘L’ 标识</li></ul><h4 id="整型数据在计算机内的存储方式"><a href="#整型数据在计算机内的存储方式" class="headerlink" title="整型数据在计算机内的存储方式"></a>整型数据在计算机内的存储方式</h4><ul><li>计算机以补码的形式保存所有的整数</li><li>补码计算规则:<ul><li>正数的补码和原码完全相同</li><li>负数的补码是其反码加1</li><li>反码是对其原码按位取反,符号位保持不变</li></ul></li></ul><h2 id="2、浮点数据类型-float和double"><a href="#2、浮点数据类型-float和double" class="headerlink" title="2、浮点数据类型:float和double"></a>2、浮点数据类型:float和double</h2><ul><li><font color="red">直接在程序中书写的浮点数默认认为double类型</font></li><li>float类型的数据占32位长度(4 Bytes)</li><li>double类型的数据占64位长度(8 Bytes)</li><li>直接表示一个float类型的值必须在数字后跟  ‘f’  或  ‘F’</li><li>直接表示一个double类型的值可以在数字后跟  ‘d’  或  ‘D’</li><li>可以用科学计数法表示,如:123.456e3  或  123.456E3</li></ul><h2 id="3、字符类型-char"><a href="#3、字符类型-char" class="headerlink" title="3、字符类型:char"></a>3、字符类型:char</h2><ul><li><p>其实就是一个无符号的16位整型,其范围为<strong>0~65535</strong>,用来存储该字符的Unicode编码值,因为Unicode编码中包含汉字的编码,所以一个char类型的变量也可以存储一个汉字字符.(<strong>一个汉字字符=两个字节</strong>)</p></li><li><p>在代码中直接给出的一个字符值必须用单引号括起来</p><p>char zhChar = ‘中’;</p><p>char enChar = ‘a’;</p><p>char ucChar = ‘\u0060’;</p></li><li><p>对某些不方便直接书写或直接书写有歧义的字符,Java语言规定用<strong>转义字符</strong>给出</p></li><li><p>可以把char类型数据当作整数数据来操作</p></li></ul><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><ul><li><p>Java语言中转义字符都以  <strong>‘\‘</strong>  给出</p></li><li><p>常用转义字符</p><blockquote><p>\uxxxx  :1到4位16进制数所表示的字符(xxxx)</p><p>\‘  :单引号字符</p><p>\“  :双引号字符</p><p>\\  :反斜杠字符</p><p>\r  :回车</p><p>\n  :换行</p><p>\t  :制表符</p></blockquote></li></ul><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td>\ddd</td><td>1到3位8进制数所表示的字符(ddd)</td></tr><tr><td>\uxxxx</td><td>1到4位16进制数所表示的字符(xxxx)</td></tr><tr><td>\‘</td><td>单引号字符</td></tr><tr><td>\’’</td><td>双引号字符</td></tr><tr><td>\\</td><td>反斜杠字符</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\f</td><td>走纸换页</td></tr><tr><td>\t</td><td>横向跳格</td></tr><tr><td>\b</td><td>退格</td></tr></tbody></table><h4 id="char类型数据当作整数数据"><a href="#char类型数据当作整数数据" class="headerlink" title="char类型数据当作整数数据"></a>char类型数据当作整数数据</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token string">'中'</span><span class="token punctuation">,</span>c2 <span class="token operator">=</span> <span class="token number">54</span><span class="token punctuation">,</span>c3 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">,</span>c4 <span class="token operator">=</span> <span class="token string">'Z'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c5 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">,</span>c6 <span class="token operator">=</span> <span class="token string">'z'</span><span class="token punctuation">,</span>c7 <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">,</span>c8 <span class="token operator">=</span> <span class="token string">'9'</span><span class="token punctuation">;</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>i2 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">,</span>i3 <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="4、布尔类型-boolean"><a href="#4、布尔类型-boolean" class="headerlink" title="4、布尔类型:boolean"></a>4、布尔类型:boolean</h2><ul><li>一个boolean类型的变量用来表示一个<strong>或真或假</strong>的关系</li><li>一个boolean类型的变量的值必须是<strong>true</strong>或<strong>false</strong>二者之一</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> isCorrect <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><table><thead><tr><th align="center">类型</th><th align="center">位数</th><th align="center">字节</th><th align="center">最小值</th><th align="center">最大值</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">8</td><td align="center">1</td><td align="center">true或false</td><td align="center">true或false</td></tr><tr><td align="center">byte</td><td align="center">8</td><td align="center">1</td><td align="center">-2<sup>7</sup></td><td align="center">2<sup>7</sup>-1</td></tr><tr><td align="center">short</td><td align="center">16</td><td align="center">2</td><td align="center">-2<sup>15</sup></td><td align="center">2<sup>15</sup>-1</td></tr><tr><td align="center">char</td><td align="center">16</td><td align="center">2</td><td align="center">0</td><td align="center">2<sup>16</sup>-1</td></tr><tr><td align="center">int</td><td align="center">32</td><td align="center">4</td><td align="center">-2<sup>31</sup></td><td align="center">2<sup>31</sup>-1</td></tr><tr><td align="center">long</td><td align="center">64</td><td align="center">8</td><td align="center">-2<sup>63</sup></td><td align="center">2<sup>63</sup>-1</td></tr><tr><td align="center">float</td><td align="center">32</td><td align="center">4</td><td align="center">Not needed</td><td align="center">Not needed</td></tr><tr><td align="center">double</td><td align="center">64</td><td align="center">8</td><td align="center">Not needed</td><td align="center">Not needed</td></tr></tbody></table><hr><h2 id="5、String类型以及API文档查询"><a href="#5、String类型以及API文档查询" class="headerlink" title="5、String类型以及API文档查询"></a>5、String类型以及API文档查询</h2><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><ul><li><p>String不是Java中的基本类型</p></li><li><p>String类型是引用类型</p></li><li><p>String类型常用方法 (详情见String常用方法讲解)</p><blockquote><p>char charAt(int index)</p><p>boolean equals(Object anObject)</p><p>int indexOf(String str)</p><p>int length()</p><p>String replace(char oldChar, char newChar)</p><p>String replaceAll(String regex, String replacement)</p><p>String replaceFirst(String regex, String replacement)</p><p>String[] split(String regex)</p><p>String substring(int beginIndex)</p><p>String substring(int beginIndex, int endIndex)</p><p>char[] toCharArray()</p><p>String toLowerCase()</p><p>String toUpperCase()</p><p>String trim()</p><p>static String valueOf(一些基本类型 b)</p></blockquote></li></ul><h2 id="6、自动类型转换"><a href="#6、自动类型转换" class="headerlink" title="6、自动类型转换"></a>6、自动类型转换</h2><h4 id="基本数据类型转换序列"><a href="#基本数据类型转换序列" class="headerlink" title="基本数据类型转换序列"></a>基本数据类型转换序列</h4><ul><li>顺着箭头方向的类型转换可以自动进行,逆箭头方向的转换或无箭头类型之间的转换必须强制转换</li><li>能将A类型变量自动转换成B类型变量的前提条件是这种转换不会造成数据和精度的丢失,即A类型的取值范围是B类型的取值范围的子集</li></ul><p><img src="/2021/07/19/03-Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/01.png" loading="lazy"></p><p>例子:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">implictCasting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ia <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token keyword">long</span> d <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token keyword">long</span> e <span class="token operator">=</span> <span class="token number">100000000L</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> f <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">double</span> g <span class="token operator">=</span> f<span class="token punctuation">;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="自动类型转换的规则"><a href="#自动类型转换的规则" class="headerlink" title="自动类型转换的规则"></a>自动类型转换的规则</h4><ul><li><p>所有的byte类型、short类型、char类型被升级到int类型</p></li><li><p>在算术过程中，会自动提升到最高等级的类型</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> b1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//错误,自动升级到int类型</span><span class="token keyword">long</span> value1 <span class="token operator">=</span> b1<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">long</span> value2 <span class="token operator">=</span> b1<span class="token operator">+</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">120L</span><span class="token punctuation">;</span>  <span class="token comment">//最高级是long类型</span><span class="token keyword">int</span> value3 <span class="token operator">=</span> b1<span class="token operator">+</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">120L</span><span class="token punctuation">;</span>  <span class="token comment">//错误</span></code></pre></li></ul><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><ul><li>使用场景<ul><li>高类型往低类型转换</li><li>父类型往子类型转换</li><li>强制类型转换操作符:<strong>()</strong></li></ul></li><li>注意事项<ul><li>基本类型的强制类型转换,可能丢失精度</li><li>引用类型的强制类型转换,可能转换失败</li></ul></li></ul><h2 id="7、变量"><a href="#7、变量" class="headerlink" title="7、变量"></a>7、变量</h2><h3 id="变量的类型"><a href="#变量的类型" class="headerlink" title="变量的类型"></a>变量的类型</h3><h4 id="基本类型的变量"><a href="#基本类型的变量" class="headerlink" title="基本类型的变量"></a>基本类型的变量</h4><ul><li>int age = 25;</li><li>char c = ‘A’;</li><li>boolean gender = true;</li><li>double d = 3.14;</li></ul><h4 id="引用类型的变量"><a href="#引用类型的变量" class="headerlink" title="引用类型的变量"></a>引用类型的变量</h4><ul><li>String name = “张三丰”;</li><li>String degree = “本科”;</li></ul><h3 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h3><h4 id="变量的声明-也可以称为变量的定义"><a href="#变量的声明-也可以称为变量的定义" class="headerlink" title="变量的声明,也可以称为变量的定义"></a>变量的声明,也可以称为变量的定义</h4><ul><li>int age;</li><li>boolean degree;</li><li>String name;</li></ul><h4 id="声明变量的规则"><a href="#声明变量的规则" class="headerlink" title="声明变量的规则"></a>声明变量的规则</h4><ul><li>变量必须有一个类型</li><li>变量必须有一个名字</li><li>int(类型) age(名字);</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-基本语法单位</title>
      <link href="/2021/07/19/02-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%8D%95%E4%BD%8D/"/>
      <url>/2021/07/19/02-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%8D%95%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-基本语法单位"><a href="#Java-基本语法单位" class="headerlink" title="Java 基本语法单位"></a>Java 基本语法单位</h1><h2 id="注释及语句"><a href="#注释及语句" class="headerlink" title="注释及语句"></a>注释及语句</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><blockquote><p>使用最多的注释</p><p>其注释内容从**//** 开始,到本行结束</p><p>如:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//向控制台输出信息</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向控制台输出信息</span></code></pre></blockquote><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><blockquote><p>其注释内容从**/*** 开始,到***/**结束</p><p>如:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*这是我写的第一个Java程序...*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main<span class="token comment">/*这是main方法*/</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre></blockquote><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><ul><li><p>方法调用语句</p><ul><li>System.out.println(“Hello World”);</li></ul></li><li><p>表达式语句(赋值语句)</p><ul><li>a = b+23;</li></ul></li><li><p>复合语句</p><ul><li><p>{</p><p>​    a = b+23;</p><p>​    System.out.println(“a=” +a);</p><p>}</p></li></ul></li><li><p>package语句和import语句</p></li><li><p>流程控制语句</p></li></ul><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul><li><p><strong>abstract boolean break byte case catch char class  continue default do double else extends enum false  final finally float for if implements import instanceof int interface long native new null package private  protected public return short static super switch  synchronized this throw throws transient true try  void volatile while</strong></p></li><li><p>__true false__不是关键字,而是boolean类型的字面量(值)</p></li><li><p>保留字</p><ul><li>const</li><li>goto</li></ul></li></ul><h2 id="标识符-identifie"><a href="#标识符-identifie" class="headerlink" title="标识符(identifie)"></a>标识符(identifie)</h2><p>在Java中用来给一个类、变量或者方法命名的符号</p><h4 id="标识符的命名规则"><a href="#标识符的命名规则" class="headerlink" title="标识符的命名规则"></a><font color="red">标识符的命名规则</font></h4><blockquote><p>以    <strong>字母</strong>    <strong>“_”</strong>     或    <strong>“$”</strong>    符号开头</p><p>可以包含    <strong>字母</strong>    <strong>“_”</strong>    <strong>“$”</strong>    和    <strong>数字</strong>    符号</p><p>大小写敏感(区分大小写)</p><p>不能与关键字、boolean字面值、保留字冲突</p><p>没有长度限制</p></blockquote><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><ul><li>identifier、_sys_var1、$char、userName、user_name</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-Java语言介绍及环境搭建</title>
      <link href="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Java语言介绍"><a href="#一、Java语言介绍" class="headerlink" title="一、Java语言介绍"></a>一、Java语言介绍</h1><h3 id="1-程序语言发展的历史"><a href="#1-程序语言发展的历史" class="headerlink" title="1.程序语言发展的历史"></a>1.程序语言发展的历史</h3><h5 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h5><ul><li>二进制机器代码，不便理解，不好记忆，与硬件平台相关， <strong>不具有可移植性</strong></li></ul><h5 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h5><ul><li>用助记符号来描述，与机器代码一一对应，能够理解，但同样<strong>不可移植</strong></li></ul><h5 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h5><ul><li><p>按自然语言的语法风格书写程序，方便理解，在原代码的层次上可以实现<strong>跨平台移植</strong></p><p><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/01.png" loading="lazy"></p></li></ul><h3 id="2-Java各种版本"><a href="#2-Java各种版本" class="headerlink" title="2.Java各种版本"></a>2.Java各种版本</h3><ul><li>J2ME (Java 2 Micro Edition) 微型版</li><li>J2SE (Java 2 Standard Edition) 标准版</li><li>J2EE (Java 2 Enterprise Edition) 企业版</li><li>JavaME (Java Micro Edition) 微型版</li><li>JavaSE (Java Standard Edition) 标准版</li><li>JavaEE (Java Enterprise Edition) 企业版</li></ul><h3 id="3-Java语言的特点"><a href="#3-Java语言的特点" class="headerlink" title="3.Java语言的特点"></a>3.Java语言的特点</h3><h5 id="简单性"><a href="#简单性" class="headerlink" title="简单性"></a>简单性</h5><ul><li>Java语法是C++语法的一个“纯净”版本。这里没有头文件、指针运算、结构、联合、操作符重载、虚基类等等。</li><li>简单性的另一层意思就是小。Java既然能够在那么苛刻的条件下诞生，代码少而小也是必须的</li></ul><h5 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h5><ul><li>Java语言是一个纯面向对象的语言</li><li>Java语言的面向对象与C++里面的面向对象几乎是一样的， 只是C++是既支持面向过程式开发，也支持面向对象式开发；而Java是纯净的面向对象的</li></ul><h5 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h5><ul><li>Java的网络能力强大而且易于使用</li><li>Java将网络开发纷繁复杂的步骤变得极其简单</li><li>远程方法调用机制为分布式应用提供了基础</li><li>JavaEE领域支持大规模的分布式应用</li></ul><h5 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h5><ul><li>在程序的编译期，就能检测出其他语言在运行期才能检测 出来的bug</li><li>Java中虽然说没有指针，但是也可以说是到处是指针，只 是这个指针Java语言本身不允许程序员自己进行指针运算， 也不可能让程序员使用一个“坏指针”</li></ul><h5 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h5><ul><li>禁止运行时堆栈溢出</li><li>禁止在自己的处理空间之外破坏内存</li><li>未经授权禁止读写文件</li></ul><h5 id="体系结构中立"><a href="#体系结构中立" class="headerlink" title="体系结构中立"></a>体系结构中立</h5><ul><li>编译器编译生成一个体系结构中立的目标文件格式</li><li>这种格式的文件，可以在任何的、有Java运行环境的机器上执行</li></ul><h5 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h5><ul><li>Java中的数据类型所占的空间是一定的，并不会因为目标机器的不同而有所改变（C++就不一样，int型可能是16位整数，也有可能是32位整数），这样就为跨平台开发提供了可能</li></ul><h5 id="解释型"><a href="#解释型" class="headerlink" title="解释型"></a>解释型</h5><ul><li>Java解释器可以在任何移植了解释器的机器上执行Java字节码</li></ul><h5 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h5><ul><li>即时编译：一次把字节码编译为本地代码，并将结果缓存起来，在需要的时候重新调用。由于这种方式只需要进行一次解释，从而极大地提高了常用代码的运行速度</li></ul><h5 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h5><ul><li>该特点是相对于其他语言而言的，Java语言处理多线程要 比其他语言要简单得多，而且Java直接线程的实现交给 底层的操作系统或者是线程库来完成</li></ul><hr><h3 id="4-Java虚拟机"><a href="#4-Java虚拟机" class="headerlink" title="4.Java虚拟机"></a>4.Java虚拟机</h3><ul><li><p><em><strong>JVM</strong></em>是<strong>Java Virtual Machine</strong>（Java虚拟机）的缩写， JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。Java虚拟机包括一套<strong>字节码指令集</strong>、一组<strong>寄存器</strong>、一个<strong>栈</strong>、一个<strong>垃圾回收堆</strong>和一个<strong>存储方法域</strong>。JVM屏 蔽了与具体操作系统平台相关的信息，使Java程序只需生成在Java虚拟机上运行的目标代码（<strong>字节码</strong>）,就可以在多种平台上不加修改地运行。JVM在执行字节码时，实际上最终还是把字节码解释成具体平台上的<strong>机器指令</strong>执行。编译虚拟机的指令集与编译微处理器的指令集非常类似</p><p><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02.png" loading="lazy"></p></li></ul><hr><h3 id="5-Java开发环境"><a href="#5-Java开发环境" class="headerlink" title="5.Java开发环境"></a>5.Java开发环境</h3><h5 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h5><blockquote><ul><li>Java Development Kit（Java开发工具包）</li><li>工具箱1.2-1.4版本也称为SDK（SoftwareDevelopment Kit）</li><li>包含Java运行的基本类库和开发命令，安装JDK可以进行 完整的Java开发</li></ul></blockquote><h5 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h5><blockquote><ul><li>Java Runtime Environment (Java运行环境)</li><li>包含Java运行的基本类库和一些运行命令,安装JRE可以运行编译好的Java程序</li></ul></blockquote><h5 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h5><blockquote><ul><li>Java Virtual Machine (Java虚拟机)</li><li>Java语言内部运行的核心</li></ul></blockquote><h5 id="图示"><a href="#图示" class="headerlink" title="图示:"></a>图示:</h5><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/03.png" alt style="zoom:50%;" loading="lazy"><hr><h1 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h1><h3 id="6-Windows下环境搭建"><a href="#6-Windows下环境搭建" class="headerlink" title="6.Windows下环境搭建"></a>6.Windows下环境搭建</h3><ul><li><p>从以下网站中可以下载JDK</p><ul><li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></li><li>根据开发机器的不同,请下载相应平台下的JDK</li></ul></li><li><p>安装JDK</p><ul><li>run the executable</li></ul></li><li><p>JDK1.7(7.0)下载地址</p><ul><li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</a></li><li><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/04.png" loading="lazy"></li></ul></li><li><p><strong>配置Java环境变量</strong></p><ul><li>我的电脑-&gt;属性</li><li><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/05.png" style="zoom:50%;" loading="lazy"></li><li>高级系统设置-&gt;环境变量</li><li>在用户变量中新建一个新的环境变量,变量名为JAVA_HOME,其值为JDK安装的主目录</li><li><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/06.png" style="zoom:50%;" loading="lazy"></li><li>继续定位到Path - 编辑 - 新建</li></ul><pre class="language-cmd" data-language="cmd"><code class="language-cmd">%JAVA_HOME%\bin</code></pre><ul><li>确定 - 关闭所有窗口即可</li></ul></li></ul><ul><li><strong>验证ok</strong><ul><li>重新打开终端输入  java -version</li></ul></li></ul><hr><h3 id="7-Java的程序结构"><a href="#7-Java的程序结构" class="headerlink" title="7.Java的程序结构"></a>7.Java的程序结构</h3><blockquote><ul><li>类(接口、枚举等)存在于源文件中</li><li>属性、方法存在于类中</li><li>局部变量、语句存在于代码块中</li></ul><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/07.png" style="zoom:50%;" loading="lazy"></blockquote><h5 id="Java源文件"><a href="#Java源文件" class="headerlink" title="Java源文件"></a>Java源文件</h5><ul><li>保存Java代码的文件，以**.java**结尾</li></ul><h5 id="Java类"><a href="#Java类" class="headerlink" title="Java类"></a>Java类</h5><ul><li><p>表示程序的一个组件,也是Java程序最基本的组成单位,小的程序也许只会有一个类,累的内容必须包括在<strong>花括号</strong>内</p><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/08.png" style="zoom:50%;" loading="lazy"></li></ul><h5 id="Java方法"><a href="#Java方法" class="headerlink" title="Java方法"></a>Java方法</h5><ul><li><p>类中可以定义一个或者多个方法</p></li><li><p>Student类中,定义了一个study方法,里面有学生如何学习的指令代码</p></li><li><p>方法必须在类的内部定义、实现</p><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/09.png" style="zoom:50%;" loading="lazy"></li></ul><h5 id="Java属性"><a href="#Java属性" class="headerlink" title="Java属性"></a>Java属性</h5><ul><li><p>类中可以定义一个或者多个属性</p></li><li><p>暂时可以将属性理解成类的一个成员变量</p></li><li><p>Student类中,定义了一个name属性,表示学生有姓名</p><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/10.png" style="zoom:50%;" loading="lazy"></li></ul><h5 id="Java局部变量和语句"><a href="#Java局部变量和语句" class="headerlink" title="Java局部变量和语句"></a>Java局部变量和语句</h5><ul><li><p>在代码块中定义的变量即为局部变量</p></li><li><p>语句必须出现在代码块中,一个语句必须由一个分号表示结束,多个语句形成一个逻辑的表达</p><p><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/11.png" loading="lazy"></p></li></ul><h5 id="解析HelloWorld程序"><a href="#解析HelloWorld程序" class="headerlink" title="解析HelloWorld程序"></a>解析HelloWorld程序</h5><p><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220310125023461.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mermaid流程图快速入门</title>
      <link href="/2021/07/19/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2021/07/19/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="typora画流程图、时序图-顺序图-、甘特图"><a href="#typora画流程图、时序图-顺序图-、甘特图" class="headerlink" title="typora画流程图、时序图(顺序图)、甘特图"></a>typora画流程图、时序图(顺序图)、甘特图</h1><p>Mermaid流程图快速入门</p><h2 id="布局方向"><a href="#布局方向" class="headerlink" title="布局方向"></a>布局方向</h2><p><strong>关键词</strong></p><p><strong>+TB+BT+LR+RL</strong></p><p><img src="/2021/07/19/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/01.png" loading="lazy"></p><p>流程图布局方向,由四种基本方向组成,分别是英文单词:</p><p> top(上), bottom(下),left(左)和 right(右).</p><p>其中可选值:TB (从上到下),BT (从下到上),LR (从左往右)和 RL (从右往左)四种.</p><p><strong>核心</strong>: 仅支持上下左右四个垂直方向,是英文单词首字母大写缩写.</p><blockquote><p>TB</p><p>从上到下:from Top to Bottom</p></blockquote><blockquote><p>源码:</p><p>graph LR </p><p>​    Start –&gt; Stop</p></blockquote><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LR Start --&gt; Stop</code></pre><blockquote><p>BT</p><p>从下到上:from Bottom to Top</p></blockquote><blockquote><p>源码:</p><p>graph BT </p><p>​    Start –&gt; Stop</p></blockquote><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid">graph BTStart --&gt; Stop</code></pre><p>TB  RL 同上</p><h2 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h2><p><strong>关键词</strong></p><p><img src="/2021/07/19/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/02.jpeg" loading="lazy"></p><p>流程图节点形状,默认支持矩形和圆两种基本形状,包括基本形状的简单变体,支持嵌套组合形式,</p><p>其中 [] 表示矩形,() 表示圆弧,{} 表示尖角(窃以为 &lt;&gt; 更适合)等等.</p><p><strong>核心</strong>: 最外层代表主形状,内层辅助修饰.</p><p><strong>一次性节点</strong>,默认表现为矩形节点,其文本内容直接显示 id 的值,适合后续不会出现多次引用的情况.</p><p>id 建议直接写成有意义的文本描述而不是当成唯一标识.</p><blockquote><p>源码:</p><p>graph TD</p><p>​     id</p></blockquote><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid">graph TD id</code></pre><p><strong>可重复节点</strong>,指定节点形状,其文本内容不再是 id 的值而是 <node shape> 的值,适合后续出现多次引用相同节点的情况.</node></p><p>id 代表节点的唯一标识,当前节点的文本描述由 <node shape> 的值指定,建议 id 写成有意义的唯一标识.</node></p><h6 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h6><p>一般格式: [node description] ,[] 中括号表示节点是<strong>矩形</strong>形状,node description 是节点的描述文本.</p><blockquote><p>源码:</p><p>graph LR </p><p>​    id1[矩形]</p></blockquote><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LR id1[矩形]</code></pre><h3 id="1-横向流程图源码格式"><a href="#1-横向流程图源码格式" class="headerlink" title="1.横向流程图源码格式:"></a>1.横向流程图源码格式:</h3><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LRA[方形] --&gt; B(圆角)B --&gt; C&#123;条件a&#125;C --&gt; |a&#x3D;1| D[结果1]C --&gt; |a&#x3D;2| E[结果2]F[横向流程图]</code></pre><h3 id="竖向流程图源码格式"><a href="#竖向流程图源码格式" class="headerlink" title="竖向流程图源码格式:"></a>竖向流程图源码格式:</h3><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid">graph TDA[方形] --&gt; B(圆角)    B --&gt; C&#123;条件a&#125;    C --&gt; |a&#x3D;1| D[结果1]    C --&gt; |a&#x3D;2| E[结果2]    F[竖向流程图]</code></pre><h3 id="3-标准流程图源码格式"><a href="#3-标准流程图源码格式" class="headerlink" title="3.标准流程图源码格式:"></a>3.标准流程图源码格式:</h3><pre class="language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=></span>start<span class="token operator">:</span> 开始框op<span class="token operator">=></span>operation<span class="token operator">:</span> 处理框cond<span class="token operator">=></span>condition<span class="token operator">:</span> <span class="token function">判断框</span><span class="token punctuation">(</span>是或否<span class="token operator">?</span><span class="token punctuation">)</span>sub1<span class="token operator">=></span>subroutine<span class="token operator">:</span> 子流程io<span class="token operator">=></span>inputoutput<span class="token operator">:</span> 输入输出框e<span class="token operator">=></span>end<span class="token operator">:</span> 结束框st<span class="token operator">-</span><span class="token operator">></span>op<span class="token operator">-</span><span class="token operator">></span>cond<span class="token function">cond</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>io<span class="token operator">-</span><span class="token operator">></span>e<span class="token function">cond</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sub1</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>op</code></pre><h3 id="4-标准流程图源码格式-横向"><a href="#4-标准流程图源码格式-横向" class="headerlink" title="4.标准流程图源码格式(横向):"></a>4.标准流程图源码格式(横向):</h3><pre class="language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=></span>start<span class="token operator">:</span> 开始框op<span class="token operator">=></span>operation<span class="token operator">:</span> 处理框cond<span class="token operator">=></span>condition<span class="token operator">:</span> <span class="token function">判断框</span><span class="token punctuation">(</span>是或否<span class="token operator">?</span><span class="token punctuation">)</span>sub1<span class="token operator">=></span>subroutine<span class="token operator">:</span> 子流程io<span class="token operator">=></span>inputoutput<span class="token operator">:</span> 输入输出框e<span class="token operator">=></span>end<span class="token operator">:</span> 结束框<span class="token function">st</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">op</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>cond<span class="token function">cond</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">io</span><span class="token punctuation">(</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>e<span class="token function">cond</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sub1</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>op</code></pre><h3 id="5-UML时序图源码样例"><a href="#5-UML时序图源码样例" class="headerlink" title="5.UML时序图源码样例:"></a>5.UML时序图源码样例:</h3><pre class="language-sequence" data-language="sequence"><code class="language-sequence">对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象A-&gt;对象B: 你真的好吗？</code></pre><h3 id="6-UML时序图源码复杂样例"><a href="#6-UML时序图源码复杂样例" class="headerlink" title="6.UML时序图源码复杂样例:"></a>6.UML时序图源码复杂样例:</h3><pre class="language-sequence" data-language="sequence"><code class="language-sequence">Title: 标题：复杂使用对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象B-&gt;小三: 你好吗小三--&gt;&gt;对象A: 对象B找我了对象A-&gt;对象B: 你真的好吗？Note over 小三,对象B: 我们是朋友participant CNote right of C: 没人陪我玩</code></pre><h3 id="7-UML标准时序图样例"><a href="#7-UML标准时序图样例" class="headerlink" title="7.UML标准时序图样例:"></a>7.UML标准时序图样例:</h3><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头  sequenceDiagram    participant 张三    participant 李四    张三-&gt;王五: 王五你好吗？    loop 健康检查        王五-&gt;王五: 与疾病战斗    end    Note right of 王五: 合理 食物 &lt;br&#x2F;&gt;看医生...    李四--&gt;&gt;张三: 很好!    王五-&gt;李四: 你怎么样?    李四--&gt;王五: 很好!</code></pre><h3 id="8-甘特L图样例"><a href="#8-甘特L图样例" class="headerlink" title="8.甘特L图样例:"></a>8.甘特L图样例:</h3><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid">%% 语法示例        gantt        dateFormat  YYYY-MM-DD        title 软件开发甘特图        section 设计        需求                      :done,    des1, 2014-01-06,2014-01-08        原型                      :active,  des2, 2014-01-09, 3d        UI设计                     :         des3, after des2, 5d    未来任务                     :         des4, after des3, 5d        section 开发        学习准备理解需求                      :crit, done, 2014-01-06,24h        设计框架                             :crit, done, after des2, 2d        开发                                 :crit, active, 3d        未来任务                              :crit, 5d        耍                                   :2d        section 测试        功能测试                              :active, a1, after des3, 3d        压力测试                               :after a1  , 20h        测试报告                               : 48h</code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown菜鸟笔记</title>
      <link href="/2021/07/19/Markdown%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/07/19/Markdown%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-列表"><a href="#Markdown-列表" class="headerlink" title="Markdown 列表"></a><font color="#669933">Markdown 列表</font></h1><p>Markdown 标题有两种格式。</p><h3 id="1、使用-和-标记一级和二级标题"><a href="#1、使用-和-标记一级和二级标题" class="headerlink" title="1、使用=和-标记一级和二级标题"></a>1、使用=和-标记一级和二级标题</h3><p><font color="red">快捷键：Ctrl+数字键</font></p><p>=和-标记语法格式如下：</p><p>我展示的是一级标题</p><p>==</p><p>我展示的是二级标题</p><p>–</p><h3 id="使用-号标记"><a href="#使用-号标记" class="headerlink" title="使用#号标记"></a>使用#号标记</h3><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="Markdown-段落"><a href="#Markdown-段落" class="headerlink" title="Markdown 段落"></a><font color="#669933">Markdown 段落</font></h1><p>Markdown段落没有特殊的格式,直接编写文字就好,<strong>段落的换行是使用两个以上 <em>空格</em> 加上回车</strong></p><p>runoob.com</p><p>google.com</p><p>当然也可以在段落后面使用一个空行来表示重新开始一个段落。</p><p>runoob.com</p><p>google.com</p><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><p>Markdown可以使用以下几种字体</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span><span class="token content">斜体文本</span><span class="token punctuation">*</span></span><span class="token italic"><span class="token punctuation">_</span><span class="token content">斜体文本</span><span class="token punctuation">_</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">粗体文本</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">__</span><span class="token content">粗体文本</span><span class="token punctuation">__</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">粗斜体文本</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">__</span><span class="token content"><span class="token italic"><span class="token punctuation">_</span><span class="token content">粗斜体文本</span><span class="token punctuation">_</span></span></span><span class="token punctuation">__</span></span></code></pre><p><em>斜体文本</em></p><p><em>斜体文本</em></p><p><strong>粗体文本</strong></p><p><strong>粗体文本</strong></p><p><em><strong>粗斜体文本</strong></em></p><p><em><strong>粗斜体文本</strong></em></p><hr><h1 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h1><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西.你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token hr punctuation">***</span><span class="token hr punctuation">* * *</span><span class="token hr punctuation">*****</span><span class="token hr punctuation">- - -</span><span class="token hr punctuation">----------</span></code></pre><hr><hr><hr><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>如果段落上的文字要添加删除线,只需要在文字的两端加上两个波浪线~~即可,实例如下:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">RUNOOB.COMGOOGLE.COM<span class="token strike"><span class="token punctuation">~~</span><span class="token content">BAIDU.COM</span><span class="token punctuation">~~</span></span></code></pre><p><del>baidu.com</del></p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>下划线可以通过HTML的<u>标签来实现:</u></p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span>带下划线文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span></code></pre><p><u>带下划线文本</u></p><h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><p>脚注是对文本的补充说明</p><p>Markdown脚注的格式如下:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">[^要注明的文本][]</code></pre><p>以下实例演示了脚注的用法：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">创建脚注格式类似这样 [^RUNOOB]。<span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">^RUNOOB</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 菜鸟教程</span> -- 学的不仅是技术，更是梦想！！！</code></pre><p>创建脚注格式类似这样[^runoob].</p><p>[^runoob]: 菜鸟教程 – 学的不仅是技术,更是梦想!!!</p><h1 id="Markdown-列表-1"><a href="#Markdown-列表-1" class="headerlink" title="Markdown 列表"></a><font color="#669933">Markdown 列表</font></h1><p>markdown支持有序列表和无序列表</p><p>无序列表使用(*)、加号(+)或是减号(-)作为列表标记,这些标记后面要添加一个空格,然后再填写内容:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 第一项<span class="token list punctuation">*</span> 第二项<span class="token list punctuation">*</span> 第三项<span class="token list punctuation">+</span> 第一项<span class="token list punctuation">+</span> 第二项<span class="token list punctuation">+</span> 第三项<span class="token list punctuation">-</span> 第一项<span class="token list punctuation">-</span> 第二项<span class="token list punctuation">-</span> 第三项</code></pre><p>显示结果:</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><p><strong>有序列表</strong>使用数字并加上**.** 号来表示,如:</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项前面添加四个空格(没用,用”-加空格”,即无序列表)即可:</p><ol><li>第一项<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素<ul><li><em><strong>写完直接Tab键就嵌套</strong></em></li></ul></li></ul></li><li>第二项<ul><li>同上</li><li>同上</li></ul></li></ol><h1 id="Markdow区块"><a href="#Markdow区块" class="headerlink" title="Markdow区块"></a><font color="#669933">Markdow区块</font></h1><p>Markdown 区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 区块引用<span class="token blockquote punctuation">></span> 菜鸟教程<span class="token blockquote punctuation">></span> 学的不仅是技术更是梦想</code></pre><blockquote><p>区块引用</p><p>菜鸟教程</p><p>学的不仅是技术更是梦想</p></blockquote><p>另外区块是可以嵌套的,一个**&gt;<strong>符号是最外层的,两个</strong>&gt;**符号是第一层嵌套,以此类推:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 最外层<span class="token blockquote punctuation">> ></span> 第一层嵌套<span class="token blockquote punctuation">> > ></span> 第二层嵌套</code></pre><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><h3 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h3><p>实例如下:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 区块中使用列表<span class="token blockquote punctuation">></span> <span class="token list punctuation">1.</span> 第一项<span class="token blockquote punctuation">></span> <span class="token list punctuation">2.</span> 第二项<span class="token blockquote punctuation">></span> <span class="token list punctuation">+</span> 第一项<span class="token blockquote punctuation">></span> <span class="token list punctuation">-</span> 第二项<span class="token blockquote punctuation">></span> <span class="token list punctuation">*</span> 第三项</code></pre><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>无序,用的+</li></ul><ul><li>用的-</li></ul><ul><li>用的*</li></ul></blockquote><h3 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h3><p>如果要在列表项目内放入区块,那么就需要在**&gt;**前添加四个空格的缩进。(按一下删除键)</p><p>实例如下:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 第一项> 菜鸟教程    > 学的不仅是技术更是梦想   <span class="token list punctuation">*</span> 第二项</code></pre><ul><li><p>第一项</p><blockquote><p>菜鸟教程</p><p>学的啥也不是</p></blockquote></li><li><p>第二项</p></li></ul><h1 id="Markdown代码"><a href="#Markdown代码" class="headerlink" title="Markdown代码"></a><font color="#669933">Markdown代码</font></h1><p>如果是段落上的一个函数或者片段的代码可以用<strong>反引号</strong>把它包起来（**`**），例如：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token code-snippet code keyword">`printf()`</span> 函数</code></pre><p><code>printf()</code>函数</p><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>代码区块使用4个<strong>空格</strong>或者一个<strong>制表符(Tab键)</strong>    不知道咋搞</p><p>实例如下:</p><p>​    &lt;?php</p><p>​    echo ‘RUNOOB’;</p><p>​    function test(){</p><p>​        echo ‘test’;</p><p>​    }</p><p>你也可以用 <strong>```</strong> 包裹一段代码，并指定一种语言（也可以不指定）：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">```javascript$(document).ready(function () &#123;    alert('RUNOOB');&#125;);```</code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'RUNOOB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="Markdown链接"><a href="#Markdown链接" class="headerlink" title="Markdown链接"></a><font color="#669933">Markdown链接</font></h1><p>链接使用方法如下:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">链接名称</span>](<span class="token url">链接地址</span>)</span>或者<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>链接地址</span><span class="token punctuation">></span></span></code></pre><p>例如:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">这是一个链接<span class="token url">[<span class="token content">菜鸟教程</span>](<span class="token url">https://www.runoob.com</span>)</span></code></pre><p>显示结果如下:</p><p>这是一个链接<a href="https://www.runoob.com/">菜鸟教程</a></p><p><em>直接使用链接地址</em>:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">&lt;https://www.runoob.com></code></pre><p><a href="https://www.runoob.com/">https://www.runoob.com</a></p><p><strong>高级链接</strong></p><p>我们可以通过<strong>变量</strong>来设置一个链接,变量赋值在文档的末尾进行:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">这个链接用 1 作为网址变量 <span class="token url">[<span class="token content">Google</span>][<span class="token variable">1</span>]</span>这个链接用 runoob 作为网址变量 <span class="token url">[<span class="token content">Runoob</span>][<span class="token variable">runoob</span>]</span>然后在文档的结尾为变量赋值（网址）  <span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> http://www.google.com/</span>  <span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">runoob</span><span class="token punctuation">]</span><span class="token punctuation">:</span> http://www.runoob.com/</span></code></pre><p>这个链接用<strong>1</strong>作为网址变量<a href="http://www.google.com/">Google</a></p><p>这个链接用<strong>runoob</strong>作为网址变量<a href="http://www.runoob.com/">Runoob</a></p><p>然后再文档的结尾为变量赋值(网址)</p><h1 id="Markdown图片"><a href="#Markdown图片" class="headerlink" title="Markdown图片"></a><font color="#669933">Markdown图片</font></h1><p>Markdown图片语法格式如下:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">alt 属性文本</span>](<span class="token url">图片地址</span>)</span><span class="token url"><span class="token operator">!</span>[<span class="token content">alt 属性文本</span>](<span class="token url">图片地址</span> <span class="token string">"可选标题"</span>)</span></code></pre><ul><li>开头一个感叹号!</li></ul><ul><li>接着一个方括号,里面放上图片的替代文字</li><li>接着一个普通括号,里面放上图片的网址,最后还可以用引号包住并加上选择性的’title’属性的文字。</li></ul><p>使用实例:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">RUNOOB 图标</span>](<span class="token url">http://static.runoob.com/images/runoob-logo.png</span>)</span></code></pre><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" loading="lazy"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB替代标题" loading="lazy"></p><p>当然,你也可以像网址那样对图片地址使用 变量:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">这个链接用 1 作为网址变量 <span class="token url">[<span class="token content">RUNOOB</span>][<span class="token variable">1</span>]</span>.然后在文档的结尾为变量赋值（网址）<span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> http://static.runoob.com/images/runoob-logo.png</span></code></pre><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">RUNOOB</a></p><p>然后在文档的结尾为变量赋值（网址）</p><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p loading="lazy"><img src="http://static.runoob.com/images/runoob-logo.png" width="50%" loading="lazy"><h1 id="Markdown表格"><a href="#Markdown表格" class="headerlink" title="Markdown表格"></a><font color="#669933">Markdown表格</font></h1><p>Markdown制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p><p>语法格式如下：会自动构成表</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important">  表头   </span><span class="token punctuation">|</span><span class="token table-header important"> 表头  </span><span class="token punctuation">|</span></span><span class="token table-line"><span class="token punctuation">|</span>  <span class="token punctuation">----</span>  <span class="token punctuation">|</span> <span class="token punctuation">----</span>  <span class="token punctuation">|</span></span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"> 单元格  </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token punctuation">|</span><span class="token table-data"> 单元格  </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span></span></span></code></pre><table><thead><tr><th align="center">表头</th><th align="center">表头</th></tr></thead><tbody><tr><td align="center">单元格</td><td align="center">单元格</td></tr><tr><td align="center">单元格</td><td align="center">单元格</td></tr></tbody></table><p>对齐方式:</p><p><strong>我们可以设置表格的对齐方式：</strong></p><ul><li><strong>-:</strong> 设置内容和标题栏居右对齐。</li><li><strong>:-</strong> 设置内容和标题栏居左对齐。</li><li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li></ul><p>实例如下：</p><table><thead><tr><th>左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td>:—-</td><td align="right">—-:</td><td align="center">:-:</td></tr></tbody></table><h1 id="Markdown高级技巧"><a href="#Markdown高级技巧" class="headerlink" title="Markdown高级技巧"></a><font color="#669933">Markdown高级技巧</font></h1><p><strong>支持的HTML元素</strong></p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">使用 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kbd</span><span class="token punctuation">></span></span>Ctrl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kbd</span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kbd</span><span class="token punctuation">></span></span>Alt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kbd</span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kbd</span><span class="token punctuation">></span></span>Del<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kbd</span><span class="token punctuation">></span></span> 重启电脑</code></pre><p>使用<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd>重启电脑</p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content">文本加粗</span><span class="token punctuation">**</span></span> \*\* 正常显示星号 \*\*</code></pre><p><strong>文本加粗</strong></p><p>**正常显示星号**</p><hr><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre class="language-none"><code class="language-none">\   反斜线&#96;   反引号*   星号_   下划线&#123;&#125;  花括号[]  方括号()  小括号#   井字号+   加号-   减号.   英文句点!   感叹号</code></pre><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">$$\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 =  \begin&#123;vmatrix&#125; \mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\\end&#123;vmatrix&#125;$&#123;$tep1&#125;&#123;\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;$$</code></pre><p>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}<br>$$</p><h1 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a><font color="#669933">其他功能</font></h1><h3 id="添加待办事项"><a href="#添加待办事项" class="headerlink" title="添加待办事项"></a>添加待办事项</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">三只青蛙<span class="token list punctuation">*</span> [x] 第一只青蛙<span class="token list punctuation">-</span> [ ] 第二只青蛙<span class="token list punctuation">+</span> [ ] 第三只青蛙</code></pre><p>三只青蛙<img src="/2021/07/19/Markdown%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/frog.png" loading="lazy"></p><ul><li><input disabled type="checkbox"> 第一只青蛙</li><li><input disabled type="checkbox"> 第二只青蛙</li><li><input disabled type="checkbox"> 第三只青蛙</li></ul><h3 id="插入图表"><a href="#插入图表" class="headerlink" title="插入图表"></a>插入图表</h3><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid">pie    title Pie Chart    &quot;Dogs&quot; : 386    &quot;Cats&quot; : 85    &quot;Rats&quot; : 150 </code></pre><h2 id="markdown使用上标、下标"><a href="#markdown使用上标、下标" class="headerlink" title="markdown使用上标、下标"></a>markdown使用上标、下标</h2><pre class="language-markdown" data-language="markdown"><code class="language-markdown">X<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>i<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span>H<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span>O  CO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span>益达<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span>TM<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span></code></pre><p>X<sub>i</sub> </p><p>H<sub>2</sub>O  CO<sub>2</sub> </p><p>益达<sup>TM</sup></p><h3 id="插入emoji表情符号"><a href="#插入emoji表情符号" class="headerlink" title="插入emoji表情符号"></a>插入emoji表情符号</h3><p><font color="red">代码<code>:star:</code>:star:     或者     <code>&amp;#x2714;</code>&#x2714;</font></p><p>&#x3299;</p><p>hexo中<code>:star:</code>代码没有用</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-theme-pure</title>
      <link href="/2021/07/19/hexo-theme-pure/"/>
      <url>/2021/07/19/hexo-theme-pure/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-github搭建博客服务器"><a href="#hexo-github搭建博客服务器" class="headerlink" title="hexo+github搭建博客服务器"></a>hexo+github搭建博客服务器</h1><blockquote><ol><li>csdn,简书,有道笔记 - <strong>广告比较多</strong></li><li>hexo+github[比较慢,翻墙]/gitee[Git pages服务器 - 维护]/<strong>阿里云服务器</strong></li></ol></blockquote><h1 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h1><blockquote><ol><li>非中文的非特殊字符的目录中[目录中不要出现空格或者带有特殊符号的]</li><li>D:/node-v14.17.3-win-x64</li></ol></blockquote><h2 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h2><blockquote><ol><li><p>桌面计算机 - 右击 - 属性 - 高级系统设置 - 环境变量(N)</p></li><li><p>定位到下方的系统变量</p></li><li><p>定位到变量名 - Path - 编辑 - 新建</p></li><li><p>D:/node-v14.17.3-win-x64</p></li><li><p>一定要关闭所有的环境变量配置的窗口 - 确定</p></li><li><p>打开终端[如果终端已经打开了,关闭 - 重新打开]</p><p>win[微软图标]+r - 输入cmd - 输入如下指令检测nodejs是否配置成功</p><pre class="language-none"><code class="language-none">npm -v6.14.5 出现版本号,则说明配置成功            如果出现了不是内部或者外部的命令的同学,请检查自己的nodejs解压缩之后的路径是否成功配置到了path中</code></pre></li></ol></blockquote><h2 id="简单认识npm"><a href="#简单认识npm" class="headerlink" title="简单认识npm"></a>简单认识npm</h2><blockquote><p>npm是javascript的一个**包[前端框架]**管理工具,并且是nodejs平台默认的包管理工具.</p><p>通过npm可以安装,共享,分发代码,管理项目依赖关系.</p><p>类似于java中的maven或者gradle[强大的项目构建工具以及项目依赖管理工具]</p></blockquote><h2 id="npm简单使用"><a href="#npm简单使用" class="headerlink" title="npm简单使用"></a>npm简单使用</h2><h3 id="修改镜像"><a href="#修改镜像" class="headerlink" title="修改镜像"></a>修改镜像</h3><blockquote><p>为了下载速度变快,修改npm的镜像</p><pre class="language-none"><code class="language-none">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</code></pre><p>验证一下,镜像是否成功修改了</p><pre class="language-none"><code class="language-none">npm config get registryhttps:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</code></pre></blockquote><h2 id="简单使用-不需要操作"><a href="#简单使用-不需要操作" class="headerlink" title="简单使用 - 不需要操作"></a>简单使用 - 不需要操作</h2><blockquote><ol><li><p>下载bootstrap</p><p>npm install 框架名称 - 默认下载的是最新的版本</p><pre class="language-none"><code class="language-none">npm install bootstrap@3</code></pre></li></ol></blockquote><h1 id="Hexo官网"><a href="#Hexo官网" class="headerlink" title="Hexo官网"></a>Hexo官网</h1><blockquote><p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><ol><li><p>假设你在D盘根目录下新建了一个文件夹hello-hexo[博客项目的根目录]</p></li><li><p>win+r - 打开终端</p></li><li><p>通过dos命令进入到hello-hexo目录中</p><pre class="language-none"><code class="language-none">C:&#x2F;User&#x2F;admin&gt;d:D:&gt;cd hello-hexoD:&#x2F;hello-hexo&gt;npm install hexo-cli -g</code></pre></li></ol></blockquote><h2 id="创建真正的博客目录"><a href="#创建真正的博客目录" class="headerlink" title="创建真正的博客目录"></a>创建真正的博客目录</h2><pre class="language-none"><code class="language-none">D:&#x2F;hello-hexo&gt;hexo init hello-blogcd hello-blogD:&#x2F;hello-hexo&#x2F;hello-blog&gt;npm install</code></pre><h2 id="测试-启动博客服务器"><a href="#测试-启动博客服务器" class="headerlink" title="测试 - 启动博客服务器"></a>测试 - 启动博客服务器</h2><pre class="language-none"><code class="language-none">D:&#x2F;hello-hexo&#x2F;hello-blog&gt;hexo s关闭服务器ctrl+c</code></pre><p><em><strong>打开浏览器输入:localhost:4000</strong></em></p><h2 id="常用主题模板"><a href="#常用主题模板" class="headerlink" title="常用主题模板"></a>常用主题模板</h2><blockquote><p><a href="https://blog.csdn.net/zgd826237710/article/details/99671027">https://blog.csdn.net/zgd826237710/article/details/99671027</a></p><p>使用git命令来进行克隆,需要提前安装好git,检测git是否安装成功,<strong>重新打开终端</strong></p><pre class="language-none"><code class="language-none">git --version</code></pre></blockquote><h2 id="注册码云账号"><a href="#注册码云账号" class="headerlink" title="注册码云账号"></a>注册码云账号</h2><blockquote><p>推荐用QQ注册一下</p><p>本地配置码云账号信息 - 配置文件 - 位置windows的用户主目录下</p><p>C:/User/计算机用户名 - 观察是否存在**.gitconfig**文件,添加如下内容</p><pre class="language-none"><code class="language-none">[user]email &#x3D; 码云的QQ邮箱name &#x3D; 用户名</code></pre></blockquote><h2 id="安装模板"><a href="#安装模板" class="headerlink" title="安装模板"></a>安装模板</h2><blockquote><p>通过cmd进入到hello-blog目录中的themes目录中</p><pre class="language-none"><code class="language-none">D:&#x2F;hello-hexo&#x2F;hello-blog&gt;cd themesD:&#x2F;&#x2F;hello-hexo&#x2F;hello-blog&#x2F;themes&gt;git clone https:&#x2F;&#x2F;gitee.com&#x2F;guancg&#x2F;hexo-theme-pure.git</code></pre></blockquote><p>或者直接从github上直接clone</p><pre class="language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;cofess&#x2F;hexo-theme-pure.git</code></pre><h1 id="更新主题配置"><a href="#更新主题配置" class="headerlink" title="更新主题配置"></a>更新主题配置</h1><blockquote><ol><li><p>指定新的主题</p><p>hello-blog目录下的_config.yml文件</p><pre class="language-none"><code class="language-none">theme: hexo-theme-pure</code></pre></li></ol></blockquote><blockquote><ol><li>重启服务器hexo s</li></ol></blockquote><h1 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h1><p>hexo-theme-pure/_config.yml文件</p><pre class="language-none"><code class="language-none">overriden  author: 亲爱的  author_title: 高级打字员  author_description: 个人简介。  location: SuZhou, China</code></pre><h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><blockquote><p>语法的编辑器 - <a href="https://typora.io/">https://typora.io/</a></p><p>文件的后缀是md</p><pre class="language-none"><code class="language-none">常用语法如下:1. 标题的语法:1~6标题 - # 一级标题    ## 二级标题   2. 代码块 - java,js,mysql...~~~java 敲enter键3. 列表3-1. 无序列表     * 列表名称     有序列表     1. 列表名称4. 高亮显示   &#96;高亮显示内容&#96;5. 加粗字体   **粗体**6. 斜体   *斜体*7. 粗+斜   ***粗斜***8. 段落   &gt; 空格9. 引入外部图片   ![](xx.png)10. 表格</code></pre></blockquote><h1 id="新建博文"><a href="#新建博文" class="headerlink" title="新建博文"></a>新建博文</h1><pre class="language-none"><code class="language-none">D:&#x2F;&#x2F;hello-hexo&#x2F;hello-blog&gt;hexo n java</code></pre><p>效果:hello-blog目录下的source/_ports/自动生成一个java.md文件</p><p>重启blog服务器</p><pre class="language-none"><code class="language-none">D:&#x2F;&#x2F;hello-hexo&#x2F;hello-blog&gt;hexo s</code></pre><h1 id="主题的侧边栏"><a href="#主题的侧边栏" class="headerlink" title="主题的侧边栏"></a>主题的侧边栏</h1><blockquote><p>侧边栏的链接生效</p><p>将/hello-blog/themes/hexo-theme-pure/_source/下的除了_data文件夹,其余文件夹</p><p>拷贝一份放入到hello-blog目录下的source目录中即可</p></blockquote><h1 id="文章的分类和标签"><a href="#文章的分类和标签" class="headerlink" title="文章的分类和标签"></a>文章的分类和标签</h1><blockquote><p>只需要在文章的.md文件的自动生成的头部添加</p><pre class="language-none"><code class="language-none">title: javadate: 2021-07-13 08:44:42categories: javatags: java</code></pre></blockquote><h1 id="博客的语言环境设置"><a href="#博客的语言环境设置" class="headerlink" title="博客的语言环境设置"></a>博客的语言环境设置</h1><blockquote><p>设置中文</p><p>hello-blog下的_config.yml文件中</p><p>language: zh-CN</p></blockquote><h1 id="图片显示问题"><a href="#图片显示问题" class="headerlink" title="图片显示问题"></a>图片显示问题</h1><blockquote><ol><li><p>安装插件 - npm install <a href="https://gitee.com/guancg/hexo-asset-image.git">https://gitee.com/guancg/hexo-asset-image.git</a> –save 或者 </p><p>npm install <a href="https://github.com/CodeFalling/hexo-asset-image">https://github.com/CodeFalling/hexo-asset-image</a> –save  </p></li><li><p>需要到hello-blog/_config.yml文件中进行配置</p><pre class="language-none"><code class="language-none">post_asset_folder: true</code></pre></li><li><p>hexo n 机器学习</p><p><code>效果就是除了生成了机器学习.md还有一个机器学习文件夹,那么这篇文章的所有的图片就可以存储在机器学习文件夹中</code></p></li><li><p>hexo s</p></li><li><p>设置typora图像路径</p><p><img src="/2021/07/19/hexo-theme-pure/01.png" loading="lazy"></p><p>以后直接粘贴图片就可以自动保存到 hexo 配置的 post_asset_folder 文件夹里,自动渲染了</p><p><strong>注意修改图片路径中的 \ 为 / ,并且不带 <code>.</code>或者<code>./</code> 直接写<code>目录/图片</code></strong></p></li></ol></blockquote><h1 id="内置搜索的功能"><a href="#内置搜索的功能" class="headerlink" title="内置搜索的功能"></a>内置搜索的功能</h1><blockquote><pre class="language-none"><code class="language-none"># Searchsearch:insight: true # you need to install &#96;hexo-generator-json-content&#96; before using Insight Searchbaidu: false # you need to disable other search engines to use Baidu search</code></pre><p>安装内置搜索插件</p><p>npm i -S hexo-generator-json-content</p></blockquote><h1 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h1><blockquote><p>不需要本地数据库进行存储的,用的是第三方的.</p><p>LeanCloud - 官网地址 - <a href="https://www.leancloud.cn/">https://www.leancloud.cn/</a></p><p>注册 - 登录 - 控制台 - 创建应用 - 右下设置 - 应用凭证</p><p>appId - sljUq97vUAdLAo7XQdf13aFR-gzGzoHsz</p><p>appKey - 3hn4ijEgSzJeRV4nkmXThmGV</p></blockquote><pre class="language-none"><code class="language-none">在hexo-theme-pure\_config.yml文件中配置</code></pre><blockquote><pre class="language-none"><code class="language-none">valine: # Valine. https:&#x2F;&#x2F;valine.js.orgappid: sljUq97vUAdLAo7XQdf13aFR-gzGzoHsz  # your leancloud application appidappkey: 3hn4ijEgSzJeRV4nkmXThmGV# your leancloud application appkeynotify: false # mail notifier , https:&#x2F;&#x2F;github.com&#x2F;xCss&#x2F;Valine&#x2F;wikiverify: false # Verification codeplaceholder: Just go go # comment box placeholderavatar: mm # gravatar stylemeta: nick,mail,link # custom comment headerpageSize: 10 # pagination sizevisitor: true # Article reading statistic https:&#x2F;&#x2F;valine.js.org&#x2F;visitor.html</code></pre></blockquote><p>#字数统计&amp;阅读时长</p><blockquote><ol><li><p>npm i -S hexo-wordcount</p></li><li><p>hexo-theme-pure_config.yml文件中配置</p><pre class="language-none"><code class="language-none">postCount:  enable: true  wordcount: true  # 文章字数统计  min2read: true  # 阅读时长预计 </code></pre></li></ol></blockquote><h1 id="附件-优秀插件"><a href="#附件-优秀插件" class="headerlink" title="附件-优秀插件"></a>附件-优秀插件</h1><blockquote><ol><li><p>显示图片</p><pre class="language-none"><code class="language-none">npm install https:&#x2F;&#x2F;gitee.com&#x2F;guancg&#x2F;hexo-asset-image.git --save</code></pre></li><li><p>内置搜索</p><pre class="language-none"><code class="language-none">npm i -S hexo-generator-json-content</code></pre></li><li><p>字数统计&amp;阅读时长</p><pre class="language-none"><code class="language-none">npm i -S hexo-wordcount</code></pre></li></ol></blockquote><blockquote><ol><li><p>github部署</p><pre class="language-none"><code class="language-none">npm install hexo-deployer-git --save</code></pre></li></ol></blockquote><h1 id="github注册一下"><a href="#github注册一下" class="headerlink" title="github注册一下"></a>github注册一下</h1><blockquote><p>github.com</p></blockquote><blockquote><p>chrome浏览器 + iguge - <a href="https://iguge.app/">https://iguge.app/</a></p></blockquote><blockquote><p>新建的仓库的名称必须是<strong>zr-java.github.io</strong></p><p>仓库地址 - <a href="https://github.com/ZR-java/zr-java.github.io.git">https://github.com/ZR-java/zr-java.github.io.git</a></p></blockquote><blockquote><p>安装github部署插件</p><p>npm install hexo-deployer-git –save</p></blockquote><blockquote><p>hello-blog/_config.yml文件</p><pre class="language-none"><code class="language-none">deploy:type: &#39;git&#39;repo: &#39;https:&#x2F;&#x2F;github.com&#x2F;ZR-java&#x2F;zr-java.github.io.git&#39;branch: &#39;master&#39;</code></pre></blockquote><pre class="language-none"><code class="language-none">hexo三连操作hexo clean：清除本地缓存hexo g：生成新的静态文件hexo s：本地查看效果（如果正常，使用 hexo d 重新部署）</code></pre><p>浏览器输入 - zr-java.github.io</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
