<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>17-package</title>
      <link href="/2021/09/25/17-package/"/>
      <url>/2021/09/25/17-package/</url>
      
        <content type="html"><![CDATA[<h2 id="package"><a href="#package" class="headerlink" title="package"></a>package</h2><ul><li>包的作用是防止同名的类有分歧</li><li>类名: 包名+类的简单名  (java.util.Date)</li><li>Java类的正确使用:包名.类的简单名</li><li>import导入,出现在package语法之后</li><li>JDK1.5新特性:静态导入import static</li></ul>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16-关键字</title>
      <link href="/2021/09/24/16-%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2021/09/24/16-%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><h4 id="this关键字是一个对象的默认引用-总是指向-调用该方法的对象"><a href="#this关键字是一个对象的默认引用-总是指向-调用该方法的对象" class="headerlink" title="this关键字是一个对象的默认引用,总是指向 调用该方法的对象"></a>this关键字是一个对象的默认引用,总是指向 调用该方法的对象</h4><p>两种使用情形:</p><ul><li><p><font color="grenn">构造器</font>中引用 该构造器执行初始化对象</p><p><font color="red">注意:在构造器中,如果调用其他的构造器,<font color="blue">一定要放在第一行</font></font></p></li><li><p>在<font color="grenn">方法</font>中引用 调用该方法的对象</p></li></ul><hr><p>Person.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> gender<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person(String)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">boolean</span> gender<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//this.Person(name);构造器可以简写</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person(String,boolean)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">boolean</span> gender<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//this.Person(name,gender);</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person(String,boolean,int)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> gender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> gender<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>TestPerson.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPerson</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2021/09/24/16-%E5%85%B3%E9%94%AE%E5%AD%97/image-20210924232320706.png" loading="lazy"></p><p>调用了好几个构造器,其实只构造了一个对象。</p><blockquote><p>小判断:</p><p>构造器的执行,一定是构造了新对象吗?  ;  &#x274c;</p><p>对象的构造,一定是执行了构造器吗?  ;  &#x2714;</p></blockquote><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><p>仅仅看static单词来理解，完全不能体现出它的作用</p><p>可以修饰:</p><ul><li>域 (属性)<ul><li>静态域，被类的所有实例共享，可以直接通过<font color="red">类名.静态域</font>的方式来调用</li></ul></li><li>方法<ul><li>静态方法,属于类级别的方法,可以直接通过<font color="red">类名.静态方法</font>的方式调用</li></ul></li><li>代码块<ul><li>静态代码块,语法类似于<font color="blue">对象代码块</font>,只是该静态代码块是<font color="red">属于类级别</font>的</li></ul></li></ul><hr><p>Student.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> gender<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//静态代码块</span><span class="token keyword">static</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//对象代码块</span><span class="token punctuation">&#123;</span><span class="token comment">//将对象的一些初始化的工作放在对象代码块中</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Student()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">boolean</span> gender<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Student(String,boolean,int)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//静态方法不能访问对象的属性和方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"staticMethod()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        this.generalMehtod();//错误,无法从静态上下文中引用非静态方法。这里的this相当于引用->调用该方法的对象,但是静态方法属于类级别,此时对象还未创建。        System.out.println(name);//错误,无法从静态上下文中引用非静态变量        */</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generalMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"generalMethod()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> gender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> gender<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15-方法的重载和递归</title>
      <link href="/2021/09/23/15-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD%E5%92%8C%E9%80%92%E5%BD%92/"/>
      <url>/2021/09/23/15-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD%E5%92%8C%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载:"></a>方法的重载:</h3><h4 id="方法名相同-功能是一致的"><a href="#方法名相同-功能是一致的" class="headerlink" title="方法名相同 (功能是一致的)"></a>方法名相同 (功能是一致的)</h4><h4 id="参数列表不同-功能实现的环境不一样-能更加地适应环境"><a href="#参数列表不同-功能实现的环境不一样-能更加地适应环境" class="headerlink" title="参数列表不同 (功能实现的环境不一样,能更加地适应环境)"></a>参数列表不同 (功能实现的环境不一样,能更加地适应环境)</h4><ul><li>参数数量的不同</li><li>相同数量，但是对应位置的变量类型的不同</li></ul><h4 id="不要将返回值类型的不同看作是方法的重载"><a href="#不要将返回值类型的不同看作是方法的重载" class="headerlink" title="不要将返回值类型的不同看作是方法的重载"></a><font color="red">不要将返回值类型的不同看作是方法的重载</font></h4><h4 id="方法的重载可以解决做同样性质的事情（方法名相同），-由于情况的不同（参数列表不同）而得到不同的结果"><a href="#方法的重载可以解决做同样性质的事情（方法名相同），-由于情况的不同（参数列表不同）而得到不同的结果" class="headerlink" title="方法的重载可以解决做同样性质的事情（方法名相同）， 由于情况的不同（参数列表不同）而得到不同的结果"></a><font color="blue">方法的重载可以解决做同样性质的事情（方法名相同）， 由于情况的不同（参数列表不同）而得到不同的结果</font></h4><hr><p>MethodOverload.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodOverload</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span><span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*不能够形成方法重载:重载不参考形参的名称public double add(int c,int d)&#123;return c+d;&#125;*/</span><span class="token comment">/*不能够形成方法重载:重载不参考返回值类型public int add(int a,int b)&#123;return a+b;&#125;*/</span><span class="token punctuation">&#125;</span></code></pre><hr><h3 id="方法的递归"><a href="#方法的递归" class="headerlink" title="方法的递归"></a>方法的递归</h3><h4 id="一个方法内部调用它自身-被称为递归方法"><a href="#一个方法内部调用它自身-被称为递归方法" class="headerlink" title="一个方法内部调用它自身,被称为递归方法"></a>一个方法内部调用它自身,被称为递归方法</h4><p>MethodRecursion.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodRecursion</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//斐波那契数列</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14-方法的可变长参数</title>
      <link href="/2021/09/07/14-%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%AF%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0/"/>
      <url>/2021/09/07/14-%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%AF%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是方法"><a href="#什么是方法" class="headerlink" title="什么是方法"></a>什么是方法</h3><ul><li>方法就是表明一个对象它能干什么事情</li><li>方法从属于<font color="red">类或者对象</font>，不能单独存在</li><li>方法的执行<font color="red">需要调用者</font>，而这个调用者就是该方法所属于的类或者对象</li></ul><h3 id="方法定义的结构"><a href="#方法定义的结构" class="headerlink" title="方法定义的结构"></a>方法定义的结构</h3><ul><li><p>最简单的结构 </p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">返回值类型 方法名(形参列表)&#123;<span class="token code keyword">...//方法体</span>&#125; </code></pre><p>如： </p><p>String getName(){ </p><p>​    return name; </p><p>}</p></li><li><p>最全的结构</p><pre class="language-none"><code class="language-none">访问修饰符 普通修饰符 返回值类型 方法名(形参列表) 抛出的异常&#123;...&#x2F;&#x2F;方法体&#125;</code></pre><p>如:</p><p>public static double division(double num1,double num2)  throws IllegalArgumentException{ </p><p>​    return num1/num2; </p><p>}</p></li></ul><h3 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h3><h5 id="普通方法调用"><a href="#普通方法调用" class="headerlink" title="普通方法调用"></a>普通方法调用</h5><ul><li>对象.方法名(参数列表);</li></ul><h5 id="静态方法调用"><a href="#静态方法调用" class="headerlink" title="静态方法调用"></a>静态方法调用</h5><ul><li>类名.方法名(参数列表);</li></ul><h3 id="可变参数方法-jdk1-5之后"><a href="#可变参数方法-jdk1-5之后" class="headerlink" title="可变参数方法 (jdk1.5之后)"></a><font color="red">可变参数方法 (jdk1.5之后)</font></h3><h5 id="如果方法的参数不确定，可以使用JDK1-5的新特性：方法的可变参数"><a href="#如果方法的参数不确定，可以使用JDK1-5的新特性：方法的可变参数" class="headerlink" title="如果方法的参数不确定，可以使用JDK1.5的新特性：方法的可变参数"></a>如果方法的参数不确定，可以使用JDK1.5的新特性：方法的可变参数</h5><ul><li>int sum(int a,int b);</li><li>int sum(int a,int b,int c);</li><li>int sum(int a,int b,int … c);</li><li>int sum(int a,int b,int[] c); </li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>一个方法只能最多<font color="red">只有一个</font>是可变长参数</li><li>可变长参数一定要放在方法形参的<font color="red">最后一个</font></li><li>可变长参数在本质上就是一个参数数组</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestArgs</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">,</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>str2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//...类似于数组</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> element<span class="token operator">:</span>str2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>str1 <span class="token operator">+=</span> element<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> str1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="jdk1-5之前-废弃"><a href="#jdk1-5之前-废弃" class="headerlink" title="(jdk1.5之前) (废弃)"></a>(jdk1.5之前) (废弃)</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestArgs</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"world"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"world"</span><span class="token punctuation">,</span><span class="token string">"!"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> element<span class="token operator">:</span>str2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>str1 <span class="token operator">+=</span> element<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> str1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13-对象构造和成员变量、局部变量</title>
      <link href="/2021/08/28/13-%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E5%92%8C%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E3%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/"/>
      <url>/2021/08/28/13-%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E5%92%8C%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E3%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="对象的构造"><a href="#对象的构造" class="headerlink" title="对象的构造"></a>对象的构造</h3><ul><li>构造器与类同名</li><li>每一个类可以有一个以上的构造器</li><li>构造器可以有0个、1个或者1个以上的参数</li><li>构造器没有返回值类型，连void也没有</li><li>构造器总是伴随着new操作符一同使用，让你有机会介入new的过程</li></ul><h4 id="一个对象的创建过程"><a href="#一个对象的创建过程" class="headerlink" title="一个对象的创建过程"></a>一个对象的创建过程</h4><ul><li>为对象分配内存空间</li><li>调用构造方法</li><li>为实例变量赋初始值</li></ul><h4 id="把初始化代码放到构造方法中-并且把构造方法设定成需要参数的"><a href="#把初始化代码放到构造方法中-并且把构造方法设定成需要参数的" class="headerlink" title="把初始化代码放到构造方法中,并且把构造方法设定成需要参数的"></a>把初始化代码放到构造方法中,并且把构造方法设定成需要参数的</h4><p>TestEmployee.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEmployee</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Employee</span> e1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e1<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e1<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e1<span class="token punctuation">.</span><span class="token function">setWorkNumber</span><span class="token punctuation">(</span><span class="token string">"zr-001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e1<span class="token punctuation">.</span><span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Employee</span> e2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"NO-001"</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e1="</span><span class="token operator">+</span>e1<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e2="</span><span class="token operator">+</span>e2<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="编译器一定会帮你写出没有参数的构造方法吗-不会"><a href="#编译器一定会帮你写出没有参数的构造方法吗-不会" class="headerlink" title="编译器一定会帮你写出没有参数的构造方法吗?不会"></a>编译器一定会帮你写出没有参数的构造方法吗?<font color="red">不会</font></h5><blockquote><ul><li>如果你已经写了一个有参数的构造方法,并且你需要一个没有参数的构造方法,则你必须自己动手写</li><li>如果类有一个以上的构造方法,则参数一定要不一样,我们可以认为这几个构造方法形成重载关系</li></ul></blockquote><h3 id="成员变量、局部变量"><a href="#成员变量、局部变量" class="headerlink" title="成员变量、局部变量"></a>成员变量、局部变量</h3><h4 id="变量按其类型分类"><a href="#变量按其类型分类" class="headerlink" title="变量按其类型分类"></a>变量按其类型分类</h4><ul><li>基本类型变量</li><li>引用类型变量</li></ul><h4 id="变量按其作用域分类"><a href="#变量按其作用域分类" class="headerlink" title="变量按其作用域分类"></a>变量按其作用域分类</h4><ul><li><p>成员变量</p><ul><li><p>类级别的成员变量(<font color="red">被static修饰符修饰</font>)</p></li><li><p>实例级别的成员变量(<font color="red">没有被static修饰符修饰</font>)</p></li><li><p>在一个类定义的内部,跟方法属于同一个级别   如:</p><p>class Employee{</p><p>​    public static int count;</p><p>​    private String name;</p><p>​    public String getName(){</p><p>​        return name;    </p><p>​    }</p><p>}</p></li></ul></li><li><p>局部变量</p><ul><li>代码块定义的变量</li><li>方法内部定义的变量</li><li>方法的形参</li><li>成员变量、局部变量同名，优先使用局部变量</li><li>成员变量的作用域大于局部变量</li><li>各个方法、代码块的内部的局部变量没有任何影响</li></ul></li></ul><h4 id="成员变量与局部变量之间的差别"><a href="#成员变量与局部变量之间的差别" class="headerlink" title="成员变量与局部变量之间的差别"></a>成员变量与局部变量之间的差别</h4><blockquote><p>成员变量是声明在类内部而不是方法内</p><p>局部变量是声明在方法内部的</p><p>局部变量在使用前必需初始化</p><p>局部变量没有默认值!如果在变量被初始化前就是用,编译会报错</p><p>方法的参数基本上与局部变量相同,但你不需要直接初始化它,编译器会确保方法调用时会有与声明相符的参数传进来,且参数会自动被赋值</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github_token</title>
      <link href="/2021/08/19/Github-token/"/>
      <url>/2021/08/19/Github-token/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/08/19/Github-token/image-20210819101058984.png" loading="lazy"></p><pre class="language-markdo" data-language="markdo"><code class="language-markdo">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</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组作业</title>
      <link href="/2021/08/16/%E6%95%B0%E7%BB%84%E4%BD%9C%E4%B8%9A/"/>
      <url>/2021/08/16/%E6%95%B0%E7%BB%84%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<ol><li><p>定义一个int型的一维数组，包含10个元素，分别赋一 些随机整数（随机数参考Random类），然后求出所有元素的最大值，最小值，平均值，和值，并输出出来</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*定义一个int型的一维数组，包含10个元素，分别赋一些随机整数（随机数参考Random类），然后求出所有元素的最大值，最小值，平均值，和值，并输出出来*/</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework1</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//使用随机数赋值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"数组遍历:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>element<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大值:"</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最小值:"</span><span class="token operator">+</span><span class="token function">min</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"和值:"</span><span class="token operator">+</span><span class="token function">sum</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均值:"</span><span class="token operator">+</span><span class="token function">avg</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//最大值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> max <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>max <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//最小值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> min <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>min<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>min <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> min<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//和值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//平均值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">avg</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> avg <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token operator">/</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">return</span> avg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>定义一个int型的一维数组，包含10个元素，分别赋值 为1~10， 然后将数组中的元素都向前移一个位置，即， a[0]=a[1],a[1]=a[2],…最后一个元素的值是原来第一个元素的值，然后输出这个数组作业 </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*定义一个int型的一维数组，包含10个元素，分别赋值为1~10，然后将数组中的元素都向前移一个位置，即，a[0]=a[1],a[1]=a[2],…最后一个元素的值是原来第一个元素的值，然后输出这个数组作业 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework2</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"原始数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//将数组中的元素都向前移一个位置</span><span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>array<span class="token punctuation">[</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"移位后数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>定义一个int型的一维数组，包含40个元素，用来存储每个学员的成绩，循环产生40个0~100之间的随机整数， 将它们存储到一维数组中，然后统计成绩低于平均分的学员的人数，并输出出来 </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*定义一个int型的一维数组，包含40个元素，用来存储每个学员的成绩，循环产生40个0~100之间的随机整数， 将它们存储到一维数组中，然后统计成绩低于平均分的学员的人数，并输出出来 */</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework3</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机赋值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//平均分</span><span class="token keyword">int</span> avg <span class="token operator">=</span> <span class="token function">avg</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均分:"</span><span class="token operator">+</span><span class="token function">avg</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//成绩低于平均分的学员的人数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>avg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>avg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//排序后,这一行才有意义(大于平均分就退出循环)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"低于平均分的人数:"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//和值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//平均值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">avg</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> avg <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token operator">/</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">return</span> avg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>承上题，将这40个成绩按照从高到低的顺序输出出来 </p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*承上题，将这40个成绩按照从高到低的顺序输出出来 */</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework4</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机赋值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"原始数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//降序排序</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//-i步骤优化了程序,</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//冒泡排序一趟下来最后两位不要动了</span>temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历排序后的数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"遍历排序后数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不排序,反过来输出</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"不排序方法:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>编写程序，将一个数组中的元素倒排过来。例如原数 组为1，2，3，4，5；则倒排后数组中的值为5，4，3，2， 1</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*编写程序，将一个数组中的元素倒排过来。例如原数 组为1，2，3，4，5；则倒排后数组中的值为5，4，3，2， 1*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework5</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"倒排后数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Homework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12-使用现有类和自定义类</title>
      <link href="/2021/08/11/12-%E4%BD%BF%E7%94%A8%E7%8E%B0%E6%9C%89%E7%B1%BB%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB/"/>
      <url>/2021/08/11/12-%E4%BD%BF%E7%94%A8%E7%8E%B0%E6%9C%89%E7%B1%BB%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h4 id="使用现有类"><a href="#使用现有类" class="headerlink" title="使用现有类"></a>使用现有类</h4><p>TestDate1.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDate1</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">365</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d1="</span><span class="token operator">+</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d2="</span><span class="token operator">+</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//过时的API尽量不要用,但是不是不可以用</span><span class="token class-name">Date</span> d3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">1900</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> d4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">1900</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> d5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">1900</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> d6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2019-12-12 12:12:12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//java.lang.IllegalArgumentException:无效参数异常</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d3="</span><span class="token operator">+</span>d3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d4="</span><span class="token operator">+</span>d4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d5="</span><span class="token operator">+</span>d5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d6="</span><span class="token operator">+</span>d6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><font color="red">java.lang.IllegalArgumentException:无效参数异常</font></p><h4 id="用户自定义类"><a href="#用户自定义类" class="headerlink" title="用户自定义类"></a>用户自定义类</h4><p>最简单类的定义形式</p><blockquote><p>class ClassName{</p><p>​    field1;        //域,属性</p><p>​    field2;</p><p>​    constructor1;        //构造器</p><p>​    constructor2;</p><p>​    method1;        //方法</p><p>​    method2;</p><p>​    ……</p><p>}</p></blockquote><p><strong><font color="red">JavaBean的语法规则:</font></strong></p><ul><li><p>属性私有化</p></li><li><p>提供读写方法(get/set)</p><ul><li>(一般情况下,读写方法是公开的,可以根据业务需求做更改)</li></ul></li><li><p>业务方法公开化</p></li></ul><p>Employee.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">&#123;</span><span class="token comment">//属性(成员变量,域)</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> gender<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> workNumber<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span><span class="token comment">//构造方法(构造器)</span><span class="token comment">//构造方法没有返回值类型</span><span class="token comment">//构造方法的方法名与类同名</span><span class="token comment">//此构造方法没有参数,即此构造方法为无参构造方法(无参构造器)</span><span class="token comment">//无参构造器在开发人员不写任何构造器的前提下是默认提供的</span><span class="token comment">//如果开发人员提供了一个任意非无参(有参)构造器,JDK不在提供无参构造器</span><span class="token comment">//结论:建议无参构造器显示地写出来</span><span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">boolean</span> gender<span class="token punctuation">,</span><span class="token class-name">Date</span> birthday<span class="token punctuation">,</span><span class="token class-name">String</span> workNumber<span class="token punctuation">,</span><span class="token keyword">double</span> salary<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>workNumber <span class="token operator">=</span> workNumber<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"在工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"name="</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",gender="</span><span class="token operator">+</span>gender<span class="token operator">+</span><span class="token string">",birthday="</span><span class="token operator">+</span>birthday<span class="token operator">+</span><span class="token string">",workNumber="</span><span class="token operator">+</span>workNumber<span class="token operator">+</span><span class="token string">",salary="</span><span class="token operator">+</span>salary<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//读方法:get</span><span class="token comment">//写方法、设置方法:set</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//boolean类型的读方法是isXXX</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> gender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> gender<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> birthday<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBirthday</span><span class="token punctuation">(</span><span class="token class-name">Date</span> birthday<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getWorkNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> workNumber<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWorkNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> workNumber<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>workNumber <span class="token operator">=</span> workNumber<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> salary<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token keyword">double</span> salary<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11-PowerDesigner画类图</title>
      <link href="/2021/08/11/11-PowerDesigner%E7%94%BB%E7%B1%BB%E5%9B%BE/"/>
      <url>/2021/08/11/11-PowerDesigner%E7%94%BB%E7%B1%BB%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>类图实例:</p><img src="/2021/08/11/11-PowerDesigner%E7%94%BB%E7%B1%BB%E5%9B%BE/image-20210811132957783.png" style="zoom:50%;" loading="lazy"><p>类名的编辑:</p><p><img src="/2021/08/11/11-PowerDesigner%E7%94%BB%E7%B1%BB%E5%9B%BE/image-20210811133649268.png" loading="lazy"></p><p>属性编辑:</p><p><img src="/2021/08/11/11-PowerDesigner%E7%94%BB%E7%B1%BB%E5%9B%BE/image-20210811134213175.png" loading="lazy"></p><p>方法编辑:</p><p><img src="/2021/08/11/11-PowerDesigner%E7%94%BB%E7%B1%BB%E5%9B%BE/image-20210811134409025.png" loading="lazy"></p><p><em><strong>几个重要的关系:</strong></em></p><p>依赖(Dependency)（“uses-a”）</p><img src="/2021/08/11/11-PowerDesigner%E7%94%BB%E7%B1%BB%E5%9B%BE/image-20210811132033982.png" style="zoom:33%;" loading="lazy"><p>聚合(Aggregation)（“has-a”）</p><img src="/2021/08/11/11-PowerDesigner%E7%94%BB%E7%B1%BB%E5%9B%BE/image-20210811132057495.png" style="zoom:33%;" loading="lazy"><p>继承(Generalization)（“is-a”）</p><img src="/2021/08/11/11-PowerDesigner%E7%94%BB%E7%B1%BB%E5%9B%BE/image-20210811132110060.png" style="zoom:33%;" loading="lazy"><p><strong>表示符号上的区别:</strong></p><img src="/2021/08/11/11-PowerDesigner%E7%94%BB%E7%B1%BB%E5%9B%BE/image-20210811132331899.png" style="zoom:60%;" loading="lazy"><p>实现(Realization)</p><p>关联(Association)</p><p>组合(Composition)</p>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-对象的生命周期</title>
      <link href="/2021/08/08/10-%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2021/08/08/10-%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="对象声明-变量赋值"><a href="#对象声明-变量赋值" class="headerlink" title="对象声明,变量赋值"></a>对象声明,变量赋值</h2><blockquote><p>现实世界,先有<font color="red">客观存在</font>,再有抽象</p><p>​                        对象                类</p><p>java程序中,先有<font color="red">类</font>,再有<font color="red">对象</font> (编程思想中)</p><p>类:宏观抽象的集合体</p><p>对象:是类的具体表现形式 (客观体表现形式)</p></blockquote><h4 id="对象-客观世界的存在体-始终存在与计算机的堆内存中"><a href="#对象-客观世界的存在体-始终存在与计算机的堆内存中" class="headerlink" title="对象:客观世界的存在体,始终存在与计算机的堆内存中"></a>对象:客观世界的存在体,始终存在与计算机的<font color="red">堆内存</font>中</h4><h4 id="对象的引用"><a href="#对象的引用" class="headerlink" title="对象的引用:"></a>对象的引用:</h4><ul><li>是一个变量   <font color="red">存在栈内存中</font></li><li>本身没有任何意义</li><li>可以称为引用变量  (对象变量是一个误区)</li><li>只有明确指向的引用变量才有真正的意义,否则即为null</li></ul><h3 id="声明对象引用"><a href="#声明对象引用" class="headerlink" title="声明对象引用"></a>声明对象引用</h3><blockquote><p>引用类型的声明</p><ul><li>声明对象引用的方式和基本数据类型的方式很类似</li><li>Dog dog;</li></ul><p>基本数据类型的声明</p><ul><li>int age;</li></ul></blockquote><h3 id="引用变量的赋值"><a href="#引用变量的赋值" class="headerlink" title="引用变量的赋值"></a>引用变量的赋值</h3><blockquote><ul><li>事实上没有对象变量这样的东西存在</li><li>只有引用 (reference) 到对象的变量 (一般把这个变量直接叫做引用)</li><li>引用并不是对象的容器,而是类似指向对象的指针</li><li>引用变量的赋值,就是让该引用变量指向哪一个对象</li></ul></blockquote><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><blockquote><ul><li><p>java中的引用变量的目的就是要指向一个java对象</p></li><li><p>java对象的创建,需要使用new关键字</p><p>Dog dog = new Dog();</p><ul><li>在堆内存中开辟内存空间,该空间中放置一个Dog对象</li><li>在栈内存中定义一个引用变量dog</li><li>将dog引用变量指向Dog()对象</li></ul></li></ul></blockquote><p>Person.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token comment">//成员变量 属性 域(field)</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">boolean</span> gender<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">//方法</span><span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">String</span> food<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人在吃"</span><span class="token operator">+</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",gender="</span><span class="token operator">+</span>gender<span class="token operator">+</span><span class="token string">",age="</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><p>TestPerson1.java (都是不正规的写法,属性应该private等)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPerson1</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"蔬菜泥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当只需要使用一次的时候使用</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"lisi"</span><span class="token punctuation">;</span><span class="token comment">//new Person().age = 26;已经new了一个新的对象,这是另一个对象的age属性</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//此时的p2没有指向任何的对象,为空指针</span>p2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"wangwu"</span><span class="token punctuation">;</span> <span class="token comment">//为什么空引用能够访问对象的属性?编译时不出错,运行时却出错(java.lang.NullPointerException)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><font color="red">java.lang.NullPointerException</font> : 空指针异常:使用了没有指向任何对象的引用</p><h2 id="对象的生命周期"><a href="#对象的生命周期" class="headerlink" title="对象的生命周期"></a>对象的生命周期</h2><p><strong>生命周期:组件的创建到销毁的整个过程</strong></p><p>GC机制:垃圾回收机制,自行处理内存的回收释放</p><p>TestPerson2.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPerson2</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"lisi"</span><span class="token punctuation">;</span><span class="token comment">//引用变量之间的赋值,其意义是将被赋值的引用指向同一个对象</span><span class="token class-name">Person</span> p3 <span class="token operator">=</span> p1<span class="token punctuation">;</span>p3<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span><span class="token comment">/*此时第8行的对象已经没有了任何引用,将被垃圾回收机制所回收*/</span>p1<span class="token punctuation">.</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p3<span class="token punctuation">.</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>当声明完一个变量之后，我们需要为其赋值，这个过程称为变量的初始化</p><h3 id="自动初始化"><a href="#自动初始化" class="headerlink" title="自动初始化"></a>自动初始化</h3><blockquote><p>仅仅声明，不再为其赋值 </p><p>基本数据类型变量的自动初始化有默认值 </p><ul><li>byte short int long 为 0 </li><li>float double 为 0.0 </li><li>char 为 ‘\u0000’ </li><li>boolean 为 false</li></ul><p>引用变量的自动初始化有默认值</p><ul><li>null</li></ul></blockquote><p>基本是<font color="red">成员变量</font></p><h3 id="显式初始化"><a href="#显式初始化" class="headerlink" title="显式初始化"></a>显式初始化</h3><blockquote><p>改变基本数据类型的默认值 </p><p>为引用变量赋值，使其有明确的指向</p><p>如 </p><ul><li>int age = 25; </li><li>double d = 3.14; </li><li>boolean gender = true; </li><li>Student stu = new Student(“zhangsan”,25); </li><li>Dog dog = new Dog(“旺财”,5);</li></ul></blockquote><p>基本是<font color="red">局部变量</font></p><h3 id="null值的引用"><a href="#null值的引用" class="headerlink" title="null值的引用"></a>null值的引用</h3><blockquote><p>特殊的引用变量值 </p><p>明确该引用变量不指向任何的对象 </p><p>该引用变量只有编译时类型，没有运行时类型</p></blockquote><hr><p>编译时类型:就是在编译期间看的类型</p><p>运行时类型:就是在运行期间看的类型</p><p>Person&#x1f697; p1 = new Person&#x1f699;();</p><p>Person&#x1f697;:编译时类型</p><p>Person&#x1f699;:运行时类型</p>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09-二维数组</title>
      <link href="/2021/08/08/09-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
      <url>/2021/08/08/09-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>TestArray.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestArray</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//一维数组</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//一维引用数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token comment">//二维数组</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token comment">//三维数组</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//5</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//4</span><span class="token comment">//两个小数组,每个里面三个元素,用于规范的二维数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> array5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>array5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>array5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>array5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>array5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>array5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array5<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>array5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"array5["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]["</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>array5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//for each循环</span><span class="token comment">/*for(int[] e:array5)&#123;for(int i:e)&#123;System.out.println(i);&#125;&#125;*/</span><span class="token comment">//不规范的二维数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array6<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>array6<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>array6<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>array6<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> e<span class="token operator">:</span>array6<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>小测试,横竖打印古诗</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Poetry</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"千"</span><span class="token punctuation">,</span><span class="token string">"山"</span><span class="token punctuation">,</span><span class="token string">"鸟"</span><span class="token punctuation">,</span><span class="token string">"飞"</span><span class="token punctuation">,</span><span class="token string">"绝"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"万"</span><span class="token punctuation">,</span><span class="token string">"径"</span><span class="token punctuation">,</span><span class="token string">"人"</span><span class="token punctuation">,</span><span class="token string">"踪"</span><span class="token punctuation">,</span><span class="token string">"灭"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"孤"</span><span class="token punctuation">,</span><span class="token string">"舟"</span><span class="token punctuation">,</span><span class="token string">"蓑"</span><span class="token punctuation">,</span><span class="token string">"笠"</span><span class="token punctuation">,</span><span class="token string">"翁"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"独"</span><span class="token punctuation">,</span><span class="token string">"钓"</span><span class="token punctuation">,</span><span class="token string">"寒"</span><span class="token punctuation">,</span><span class="token string">"江"</span><span class="token punctuation">,</span><span class="token string">"雪"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"   江雪   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  柳宗元   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">3</span> <span class="token operator">||</span> i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"，"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"   江雪   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  柳宗元   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"。，。，"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><img src="/2021/08/08/09-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/image-20210808201517049.png" alt="image-20210808201517049" style="zoom:50%;" loading="lazy">]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断循环作业</title>
      <link href="/2021/08/05/%E5%88%A4%E6%96%AD%E5%BE%AA%E7%8E%AF%E4%BD%9C%E4%B8%9A/"/>
      <url>/2021/08/05/%E5%88%A4%E6%96%AD%E5%BE%AA%E7%8E%AF%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<h3 id="1-是否闰年"><a href="#1-是否闰年" class="headerlink" title="1.是否闰年"></a>1.是否闰年</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*1、编写程序，判断给定的某个年份是否是闰年，给定的年份通过用户输入的方式动态给定，输入的方式如：Scanner scan = new Scanner(System.in);int year = scan.nextInt();闰年的判断规则如下： 若某个年份能被4整除但不能被100整除，则是闰年 若某个年份能被400整除，则也是闰年*/</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework1</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个有效年份"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> input <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>input<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年份错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>input<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;</span>input<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> input<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>input<span class="token operator">+</span><span class="token string">"是闰年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>input<span class="token operator">+</span><span class="token string">"是平年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-编写程序求-1-3-5-7-……-99-的和值"><a href="#2-编写程序求-1-3-5-7-……-99-的和值" class="headerlink" title="2.编写程序求 1+3+5+7+……+99 的和值"></a>2.编写程序求 1+3+5+7+……+99 的和值</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework2</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1+3+5+7+...+99="</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3-利用三种循环循环打印-9-9-乘法表"><a href="#3-利用三种循环循环打印-9-9-乘法表" class="headerlink" title="3.利用三种循环循环打印 9*9 乘法表"></a>3.利用三种循环循环打印 9*9 乘法表</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*利用三种循环循环打印 9*9 乘法表1*1=1       相当于j*i=1*2=2 2*2=4 1*3=3 2*3=6 3*3=9 1*4=4 2*4=8 3*4=12 4*4=16*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework3</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=== for 9*9 ==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//列</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//行</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>j<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=== while 9*9 ==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>j<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=== do while 9*9 ==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>j<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="4-给定一个百分制的分数，输出相应的等级"><a href="#4-给定一个百分制的分数，输出相应的等级" class="headerlink" title="4.给定一个百分制的分数，输出相应的等级"></a>4.给定一个百分制的分数，输出相应的等级</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*给定一个百分制的分数，输出相应的等级90分以上 A级80~89 B级70~79 C级60~69 D级60分以下 E级*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework4</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//String -> int</span><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>score<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"E级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><font color="red">(String[] args)</font></p><p>在cmd中编译好的java文件后</p><p>输入<font color="red">java Homework4 20 30</font></p><p>代表第一个和第二个参数args是20 30(但是String数组类型的)</p><p><img src="/2021/08/05/%E5%88%A4%E6%96%AD%E5%BE%AA%E7%8E%AF%E4%BD%9C%E4%B8%9A/image-20210806213759462.png" loading="lazy"></p><h3 id="5-水仙花数"><a href="#5-水仙花数" class="headerlink" title="5.水仙花数"></a>5.水仙花数</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*输出水仙花数所谓水仙花数是指一个数3位数，其各位数字立方和等于其本身例如： 153 = 1*1*1 + 3*3*3 + 5*5*5*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework5</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> baiwei <span class="token operator">=</span> i<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> shiwei <span class="token operator">=</span> i<span class="token operator">%</span><span class="token number">100</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> gewei <span class="token operator">=</span> i<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">/*if(baiwei*baiwei*baiwei+shiwei*shiwei*shiwei+gewei*gewei*gewei==i)&#123;System.out.println(+i);&#125;*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>baiwei<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>shiwei<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>gewei<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="6-求-a-aa-aaa-……-aaaaaaaaa"><a href="#6-求-a-aa-aaa-……-aaaaaaaaa" class="headerlink" title="6.求 a+aa+aaa+…….+aaaaaaaaa=?"></a>6.求 a+aa+aaa+…….+aaaaaaaaa=?</h3><p>其中a为1至9之中的一个数，项数也可以指定<br>版本1：1<br>              2+22<br>              5+55+555+5555+55555<br>版本2：1+11+111+…+111111111<br>              2+22+222+…+222222222<br>              5+55+555+5555+…+555555555</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*6、求 a+aa+aaa+.......+aaaaaaaaa=?其中a为1至9之中的一个数，项数也可以指定版本1：1   2+22   5+55+555+5555+55555版本2：1+11+111+…+111111111   2+22+222+…+222222222   5+55+555+5555+…+555555555*/</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework6</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入1-9的数: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> number <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===版本1==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//版本1</span><span class="token keyword">int</span> sum1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>number<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum1 <span class="token operator">+=</span> number<span class="token operator">*</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum1= "</span><span class="token operator">+</span>sum1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//没看懂这个方法,这算下来的不是只有项吗?</span>sum1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>number<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>sum1 <span class="token operator">+=</span> number<span class="token operator">*</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>sum1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>number<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp <span class="token operator">=</span> temp<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>number<span class="token punctuation">;</span>sum1 <span class="token operator">+=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum1= "</span><span class="token operator">+</span>sum1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===版本2==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//版本2</span><span class="token keyword">int</span> sum2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp <span class="token operator">=</span> temp<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>number<span class="token punctuation">;</span>sum2 <span class="token operator">+=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum2= "</span><span class="token operator">+</span>sum2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="7-求-2-1-3-2-5-3-8-5-13-8…-前20项之和（结果的值是一个浮点类型）"><a href="#7-求-2-1-3-2-5-3-8-5-13-8…-前20项之和（结果的值是一个浮点类型）" class="headerlink" title="7.求 2/1+3/2+5/3+8/5+13/8…..前20项之和（结果的值是一个浮点类型）"></a>7.求 2/1+3/2+5/3+8/5+13/8…..前20项之和（结果的值是一个浮点类型）</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*7、求 2/1+3/2+5/3+8/5+13/8.....前20项之和（结果的值是一个浮点类型）*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework7</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token keyword">double</span> fenZi <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">double</span> fenMu <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>result <span class="token operator">+=</span> fenZi<span class="token operator">/</span>fenMu<span class="token punctuation">;</span><span class="token keyword">double</span> temp <span class="token operator">=</span> fenZi<span class="token operator">+</span>fenMu<span class="token punctuation">;</span>fenMu <span class="token operator">=</span> fenZi<span class="token punctuation">;</span>fenZi <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2021/08/05/%E5%88%A4%E6%96%AD%E5%BE%AA%E7%8E%AF%E4%BD%9C%E4%B8%9A/image-20210815190644646.png" loading="lazy"></p><h3 id="8-打印实心等边三角形（底边-号的数量是斜边的2n-1倍）"><a href="#8-打印实心等边三角形（底边-号的数量是斜边的2n-1倍）" class="headerlink" title="8.打印实心等边三角形（底边*号的数量是斜边的2n-1倍）"></a>8.打印实心等边三角形（底边*号的数量是斜边的2n-1倍）</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*8、打印实心等边三角形（底边*号的数量是斜边的2n-1倍）*/</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework8</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入打印星号的高度: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> height <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>height<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打印空格</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>height<span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印星号</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印换行</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><img src="/2021/08/05/%E5%88%A4%E6%96%AD%E5%BE%AA%E7%8E%AF%E4%BD%9C%E4%B8%9A/image-20210815220405187.png" style="zoom:50%;" loading="lazy"><h3 id="9-打印实心和空心菱形"><a href="#9-打印实心和空心菱形" class="headerlink" title="9.打印实心和空心菱形"></a>9.打印实心和空心菱形</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*9、打印实心和空心菱形*   * *  *   * *     **       * *     *  *   *   * *    **/</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework9</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入打印星号的上半部分高度: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> height <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实心菱形</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>height<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打印空格</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>height<span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印星号</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//反过来打印下半部分*</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>height<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打印空格</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>height<span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印星号</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//空心菱形</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>height<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打印空格</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>height<span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印原本实心的星号</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//仅在一行开始和末尾打印*</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">||</span> j<span class="token operator">==</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//反过来打印下半部分*</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>height<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打印空格</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>height<span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印原本实心的星号</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">||</span> j<span class="token operator">==</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><img src="/2021/08/05/%E5%88%A4%E6%96%AD%E5%BE%AA%E7%8E%AF%E4%BD%9C%E4%B8%9A/image-20210815220528896.png" style="zoom:50%;" loading="lazy">]]></content>
      
      
      <categories>
          
          <category> Homework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown颜色字体</title>
      <link href="/2021/08/02/Markdown%E9%A2%9C%E8%89%B2%E5%AD%97%E4%BD%93/"/>
      <url>/2021/08/02/Markdown%E9%A2%9C%E8%89%B2%E5%AD%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、颜色"><a href="#一、颜色" class="headerlink" title="一、颜色"></a>一、颜色</h2><p>在markdown中采用如下方式能够控制文字的颜色：</p><pre class="language-html" data-language="html"><code class="language-html">浅红色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#dd0000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>浅红色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 深红色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#660000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>深红色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 浅绿色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#00dd00<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>浅绿色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 深绿色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#006600<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>深绿色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 浅蓝色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0000dd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>浅蓝色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 深蓝色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000066<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>深蓝色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 浅黄色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#dddd00<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>浅黄色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 深黄色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#666600<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>深黄色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 浅青色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#00dddd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>浅青色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 深青色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#006666<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>深青色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 浅紫色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#dd00dd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>浅紫色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 深紫色文字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#660066<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>深紫色文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> </code></pre><p>效果如下：</p><p>浅红色文字：<font color="#dd0000">浅红色文字：</font><br><br>深红色文字：<font color="#660000">深红色文字</font><br><br>浅绿色文字：<font color="#00dd00">浅绿色文字</font><br><br>深绿色文字：<font color="#006600">深绿色文字</font><br><br>浅蓝色文字：<font color="#0000dd">浅蓝色文字</font><br><br>深蓝色文字：<font color="#000066">深蓝色文字</font><br><br>浅黄色文字：<font color="#dddd00">浅黄色文字</font><br><br>深黄色文字：<font color="#666600">深黄色文字</font><br><br>浅青色文字：<font color="#00dddd">浅青色文字</font><br><br>深青色文字：<font color="#006666">深青色文字</font><br><br>浅紫色文字：<font color="#dd00dd">浅紫色文字</font><br><br>深紫色文字：<font color="#660066">深紫色文字</font><br></p><h2 id="二、大小"><a href="#二、大小" class="headerlink" title="二、大小"></a>二、大小</h2><pre class="language-html" data-language="html"><code class="language-html">size为1：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>size为1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> size为2：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>size为2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> size为3：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>size为3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> size为4：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>size为4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> size为10：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>size为10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> </code></pre><p>size为1：<font size="1">size为1</font><br></p><p>size为2：<font size="2">size为2</font><br><br>size为3：<font size="3">size为3</font><br><br>size为4：<font size="4">size为4</font><br></p><p>size为10：<font size="10">size为10</font><br> </p><h2 id="三、字体"><a href="#三、字体" class="headerlink" title="三、字体"></a>三、字体</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>黑体<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是黑体字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>宋体<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是宋体字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>微软雅黑<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是微软雅黑字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fantasy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是fantasy字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Helvetica<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是Helvetica字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span></code></pre><p>效果如下：</p><p><font face="黑体">我是黑体字</font><br><font face="宋体">我是宋体字</font><br><font face="微软雅黑">我是微软雅黑字</font><br><font face="fantasy">我是fantasy字</font><br><font face="Helvetica">我是Helvetica字</font></p><h2 id="四、背景色"><a href="#四、背景色" class="headerlink" title="四、背景色"></a>四、背景色</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#FF00FF</span><span class="token punctuation">></span></span>背景色的设置是按照十六进制颜色值：#7FFFD4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#FF83FA</span><span class="token punctuation">></span></span>背景色的设置是按照十六进制颜色值：#FF83FA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#D1EEEE</span><span class="token punctuation">></span></span>背景色的设置是按照十六进制颜色值：#D1EEEE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#C0FF3E</span><span class="token punctuation">></span></span>背景色的设置是按照十六进制颜色值：#C0FF3E<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#54FF9F</span><span class="token punctuation">></span></span>背景色的设置是按照十六进制颜色值：#54FF9F<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><table><tr><td bgcolor="#FF00FF">背景色的设置是按照十六进制颜色值：#7FFFD4</td></tr></table><table><tr><td bgcolor="#FF83FA">背景色的设置是按照十六进制颜色值：#FF83FA</td></tr></table><table><tr><td bgcolor="#D1EEEE">背景色的设置是按照十六进制颜色值：#D1EEEE</td></tr></table><table><tr><td bgcolor="#C0FF3E">背景色的设置是按照十六进制颜色值：#C0FF3E</td></tr></table><table><tr><td bgcolor="#54FF9F">背景色的设置是按照十六进制颜色值：#54FF9F</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASCll对照表</title>
      <link href="/2021/08/02/ASCll%E5%AF%B9%E7%85%A7%E8%A1%A8/"/>
      <url>/2021/08/02/ASCll%E5%AF%B9%E7%85%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="ASCII码大致由三部分组成："><a href="#ASCII码大致由三部分组成：" class="headerlink" title="ASCII码大致由三部分组成："></a>ASCII码大致由三部分组成：</h2><h3 id="ASCII-打印字符："><a href="#ASCII-打印字符：" class="headerlink" title="ASCII 打印字符："></a><strong>ASCII 打印字符：</strong></h3><p>数字 32–126 分配给了能在键盘上找到的字符，当您查看或打印文档时就会出现。注：十进制32代表<strong>空格</strong> ，十进制数字 127 代表 DELETE 命令。下面是ASCII码和相应数字的对照表</p><table><thead><tr><th>ASCII 码</th><th></th><th></th><th>ASCII 码</th><th></th><th></th><th>ASCII 码</th><th></th><th></th><th>ASCII 码</th><th></th><th></th></tr></thead><tbody><tr><td>十进位</td><td>十六进位</td><td>字符</td><td>十进位</td><td>十六进位</td><td>字符</td><td>十进位</td><td>十六进位</td><td>字符</td><td>十进位</td><td>十六进位</td><td>字符</td></tr><tr><td>032</td><td>20</td><td></td><td>056</td><td>38</td><td>8</td><td>080</td><td>50</td><td>P</td><td>104</td><td>68</td><td>h</td></tr><tr><td>033</td><td>21</td><td>!</td><td>057</td><td>39</td><td>9</td><td>081</td><td>51</td><td>Q</td><td>105</td><td>69</td><td>i</td></tr><tr><td>034</td><td>22</td><td>“</td><td>058</td><td>3A</td><td>:</td><td>082</td><td>52</td><td>R</td><td>106</td><td>6A</td><td>j</td></tr><tr><td>035</td><td>23</td><td>#</td><td>059</td><td>3B</td><td>;</td><td>083</td><td>53</td><td>S</td><td>107</td><td>6B</td><td>k</td></tr><tr><td>036</td><td>24</td><td>$</td><td>060</td><td>3C</td><td>&lt;</td><td>084</td><td>54</td><td>T</td><td>108</td><td>6C</td><td>l</td></tr><tr><td>037</td><td>25</td><td>%</td><td>061</td><td>3D</td><td>=</td><td>085</td><td>55</td><td>U</td><td>109</td><td>6D</td><td>m</td></tr><tr><td>038</td><td>26</td><td>&amp;</td><td>062</td><td>3E</td><td>&gt;</td><td>086</td><td>56</td><td>V</td><td>110</td><td>6E</td><td>n</td></tr><tr><td>039</td><td>27</td><td>‘</td><td>063</td><td>3F</td><td>?</td><td>087</td><td>57</td><td>W</td><td>111</td><td>6F</td><td>o</td></tr><tr><td>040</td><td>28</td><td>(</td><td>064</td><td>40</td><td>@</td><td>088</td><td>58</td><td>X</td><td>112</td><td>70</td><td>p</td></tr><tr><td>041</td><td>29</td><td>)</td><td><strong><font color="red">065</font></strong></td><td>41</td><td><strong><font color="red">A</font></strong></td><td>089</td><td>59</td><td>Y</td><td>113</td><td>71</td><td>q</td></tr><tr><td>042</td><td>2A</td><td>*</td><td>066</td><td>42</td><td>B</td><td>090</td><td>5A</td><td>Z</td><td>114</td><td>72</td><td>r</td></tr><tr><td>043</td><td>2B</td><td>+</td><td>067</td><td>43</td><td>C</td><td>091</td><td>5B</td><td>[</td><td>115</td><td>73</td><td>s</td></tr><tr><td>044</td><td>2C</td><td>,</td><td>068</td><td>44</td><td>D</td><td>092</td><td>5C</td><td>\</td><td>116</td><td>74</td><td>t</td></tr><tr><td>045</td><td>2D</td><td>-</td><td>069</td><td>45</td><td>E</td><td>093</td><td>5D</td><td>]</td><td>117</td><td>75</td><td>u</td></tr><tr><td>046</td><td>2E</td><td>.</td><td>070</td><td>46</td><td>F</td><td>094</td><td>5E</td><td>^</td><td>118</td><td>76</td><td>v</td></tr><tr><td>047</td><td>2F</td><td>/</td><td>071</td><td>47</td><td>G</td><td>095</td><td>5F</td><td>_</td><td>119</td><td>77</td><td>w</td></tr><tr><td><strong><font color="red">048</font></strong></td><td>30</td><td><strong><font color="red">0</font></strong></td><td>072</td><td>48</td><td>H</td><td>096</td><td>60</td><td>`</td><td>120</td><td>78</td><td>x</td></tr><tr><td>049</td><td>31</td><td>1</td><td>073</td><td>49</td><td>I</td><td><strong><font color="red">097</font></strong></td><td>61</td><td><strong><font color="red">a</font></strong></td><td>121</td><td>79</td><td>y</td></tr><tr><td>050</td><td>32</td><td>2</td><td>074</td><td>4A</td><td>J</td><td>098</td><td>62</td><td>b</td><td>122</td><td>7A</td><td>z</td></tr><tr><td>051</td><td>33</td><td>3</td><td>075</td><td>4B</td><td>K</td><td>099</td><td>63</td><td>c</td><td>123</td><td>7B</td><td>{</td></tr><tr><td>052</td><td>34</td><td>4</td><td>076</td><td>4C</td><td>L</td><td>100</td><td>64</td><td>d</td><td>124</td><td>7C</td><td>|</td></tr><tr><td>053</td><td>35</td><td>5</td><td>077</td><td>4D</td><td>M</td><td>101</td><td>65</td><td>e</td><td>125</td><td>7D</td><td>}</td></tr><tr><td>054</td><td>36</td><td>6</td><td>078</td><td>4E</td><td>N</td><td>102</td><td>66</td><td>f</td><td>126</td><td>7E</td><td>~</td></tr><tr><td>055</td><td>37</td><td>7</td><td>079</td><td>4F</td><td>O</td><td>103</td><td>67</td><td>g</td><td>127</td><td>7F</td><td>DEL</td></tr></tbody></table><h3 id="ASCII-非打印控制字符："><a href="#ASCII-非打印控制字符：" class="headerlink" title="ASCII 非打印控制字符："></a><strong>ASCII 非打印控制字符：</strong></h3><p>ASCII 表上的数字 0–31 分配给了控制字符，用于控制像打印机等一些外围设备。例如，12 代表换页/新页功能。此命令指示打印机跳到下一页的开头。</p><p><img src="/2021/08/02/ASCll%E5%AF%B9%E7%85%A7%E8%A1%A8/ASCll%E7%A0%81%E9%9D%9E%E6%89%93%E5%8D%B0%E6%8E%A7%E5%88%B6%E5%AD%97%E7%AC%A6.png" loading="lazy"></p><p>​    </p><h3 id="扩展-ASCII-打印字符："><a href="#扩展-ASCII-打印字符：" class="headerlink" title="扩展 ASCII 打印字符："></a><strong>扩展 ASCII 打印字符：</strong></h3><p>扩展的 ASCII 字符满足了对更多字符的需求。扩展的 ASCII 包含 ASCII 中已有的 128 个字符（数字 0–32 显示在下图中），又增加了 128 个字符，总共是 256 个。即使有了这些更多的字符，许多语言还是包含无法压缩到 256 个字符中的符号。因此，出现了一些 ASCII 的变体来囊括地区性字符和符号.</p><p>![](ASCll对照表/扩展 ASCII 打印字符.png)</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08-String常用方法讲解</title>
      <link href="/2021/07/31/08-String%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E8%AE%B2%E8%A7%A3/"/>
      <url>/2021/07/31/08-String%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="String常用方法"><a href="#String常用方法" class="headerlink" title="String常用方法"></a>String常用方法</h2><p><strong><font color="red">equals 和 ==</font></strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*    equals:只能使用与引用类型的"比较",按照指定规则进行比较       如果根据指定规则比较的结果一样则返回true,否则返回false      ==  :用于基本类型的比较,直接比较值        用于引用类型的比较,比较的是地址    */</span>    <span class="token comment">/*    String是一个不可变的字符序列,如果要使String对象的字面值发生改变,则相当于创建了一个新的String对象    Java语言为String类型的对象提供了一个常量池    */</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token comment">//hello是字面值</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//开辟了一个新的对象,不在常量池里</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1.equals(s2)="</span><span class="token operator">+</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1.equals(s3)="</span><span class="token operator">+</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1==s2 =>"</span><span class="token operator">+</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1==s3 =>"</span><span class="token operator">+</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>    <span class="token punctuation">&#125;</span></code></pre><p>一共有几个对象?</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token comment">//1个</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token comment">//同上</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token operator">+</span><span class="token string">"world"</span><span class="token punctuation">;</span> <span class="token comment">//world一个,helloworld一个</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//一个,一共四个</span></code></pre><p><font color="red">字符是无符号的整型</font></p><p><strong><font color="red">字符用<code>&#39;&#39;</code>表示,字符串用<code>&quot;&quot;</code>表示</font></strong></p><hr><h3 id="几个常用String方法"><a href="#几个常用String方法" class="headerlink" title="几个常用String方法"></a>几个常用String方法</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestString</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">"Java is very hard!"</span><span class="token punctuation">;</span>        <span class="token comment">// char charAt(int index):返回指定索引处的 char 值。</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.charAt(5) =>"</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int compareTo(String anotherString):按字典顺序比较两个字符串。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.compareTo(\"Java is very hard!\") =>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"Java is very hard!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int compareToIgnoreCase(String str):按字典顺序比较两个字符串，不考虑大小写。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.compareToIgnoreCase(\"java is very hard!\") =>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">compareToIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"java is very hard!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//boolean contains(CharSequence s):当且仅当此字符串包含指定的 char 值序列时，返回 true。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.contains(\"very\") =>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"very"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//boolean endsWith(String suffix):测试此字符串是否以指定的后缀结束。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.endsWith(\"!\") =>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//boolean equals(Object anObject):将此字符串与指定的对象比较。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.equals(\"Java is very hard!\") =>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Java is very hard!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//boolean equalsIgnoreCase(String anotherString):将此 String 与另一个 String 比较，不考虑大小写。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.equalsIgnoreCase(\"Java is very hard!\") =>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"Java is very hard!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//byte[] getBytes():使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"content.getBytes()==>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>bytes<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//int hashCode():返回此字符串的哈希码</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.hashCode()==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到的是content引用变量指向的String对象的内存空间所表示的地址的数字表现形式经过哈希算法得到的数值</span><span class="token comment">//int indexOf(int ch):返回指定字符在此字符串中第一次出现处的索引。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.indexOf('a') =>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.indexOf(97) =>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int indexOf(String str):返回指定子字符串在此字符串中第一次出现处的索引。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.indexOf(\"is\") =>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"is"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//boolean isEmpty():当且仅当 length() 为 0 时返回 true。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.isEmpty()==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int lastIndexOf(int ch):返回指定字符在此字符串中最后一次出现处的索引。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.lastIndexOf('a')==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int lastIndexOf(String str):返回指定子字符串在此字符串中最右边出现处的索引。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.lastIndexOf(\"is\")==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"is"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int length() :返回此字符串的长度。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.length() =>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String replace(char oldChar, char newChar):返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.replace('a','A')==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String replace(CharSequence target, CharSequence replacement) :使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.replace(\"Java\",\"&lt;-_->\")==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span><span class="token string">"&lt;-_->"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String replaceAll(String regex, String replacement):使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。 </span><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"1a2b3cd.23e"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1.replace(\".\",\"。\") ==>"</span><span class="token operator">+</span>str1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"。"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1.replaceAll(\".\",\"。\") ==>"</span><span class="token operator">+</span>str1<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"。"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//正则表达式.匹配除换行符以外的任意字符</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1.replaceAll(\"\\d\",\"锐\") ==>"</span><span class="token operator">+</span>str1<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\d"</span><span class="token punctuation">,</span><span class="token string">"锐"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\d匹配数字</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1.replace(\"e\",\"哈\") ==>"</span><span class="token operator">+</span>str1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token string">"哈"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//不是regex,所以精确匹配该字符</span><span class="token comment">//String replaceFirst(String regex, String replacement):使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.replaceFirst(\"a\",\"哈\") ==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"哈"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String[] split(String regex):根据给定正则表达式的匹配拆分此字符串。 </span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stringArray <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//空格作为分割符</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"content.split(\" \")==>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>stringArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stringArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>stringArray<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//boolean startsWith(String prefix):测试此字符串是否以指定的前缀开始。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.startsWith(\"Java\")==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String substring(int beginIndex):返回一个新的字符串，它是此字符串的一个子字符串。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.substring(5)==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String substring(int beginIndex, int endIndex):返回一个新字符串，它是此字符串的一个子字符串。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.substring(5,10)==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左包含,右不包含</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.substring(5,content.length())==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>content<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//char[] toCharArray():将此字符串转换为一个新的字符数组 </span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"content.toCharArray()==>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>charArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>charArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>charArray<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//String toLowerCase():使用默认语言环境的规则将此 String 中的所有字符都转换为小写。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.toLowerCase()==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String toUpperCase():使用默认语言环境的规则将此 String 中的所有字符都转换为大写。 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.toUpperCase()==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String toString():返回此对象本身(它已经是一个字符串！) </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content.toString()==>"</span><span class="token operator">+</span>content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"content==>"</span><span class="token operator">+</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//和上面一样</span><span class="token comment">//String trim():返回字符串的副本，忽略前导空白和尾部空白 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\"  老子 不想学 java  \".trim()==>"</span><span class="token operator">+</span><span class="token string">"  老子 不想学 java  "</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//static String valueOf(xxx b):将xxx类型的b值转成String类型</span><span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">double</span> a2 <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> a3 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">char</span> a4 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"100"  静态方法,不用对象调用,用类名调用</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"3.14"</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"true"</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"A"</span><span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token string">""</span><span class="token operator">+</span>a1<span class="token punctuation">;</span>  <span class="token comment">//推荐这种方式</span><span class="token class-name">String</span> s6 <span class="token operator">=</span> <span class="token string">""</span><span class="token operator">+</span>a2<span class="token punctuation">;</span><span class="token class-name">String</span> s7 <span class="token operator">=</span> <span class="token string">""</span><span class="token operator">+</span>a3<span class="token punctuation">;</span><span class="token class-name">String</span> s8 <span class="token operator">=</span> <span class="token string">""</span><span class="token operator">+</span>a4<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1="</span><span class="token operator">+</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s2="</span><span class="token operator">+</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s3="</span><span class="token operator">+</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s4="</span><span class="token operator">+</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s5="</span><span class="token operator">+</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s6="</span><span class="token operator">+</span>s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s7="</span><span class="token operator">+</span>s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s8="</span><span class="token operator">+</span>s8<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="/2021/07/31/08-String%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E8%AE%B2%E8%A7%A3/image-20210806221740337.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07-数组</title>
      <link href="/2021/07/22/07-%E6%95%B0%E7%BB%84/"/>
      <url>/2021/07/22/07-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数组的基本操作"><a href="#数组的基本操作" class="headerlink" title="数组的基本操作"></a>数组的基本操作</h1><h3 id="常见的数据结构"><a href="#常见的数据结构" class="headerlink" title="常见的数据结构"></a>常见的数据结构</h3><blockquote><ul><li>数组(Array):管理多个数据</li><li>栈(Stack):先进后出(后进先出)</li><li>队列(Queue):先进先出</li><li>链表(Linked List):查询效率低，增加、删除效率高<ul><li>单向链表</li><li>双向链表</li><li>环形链表</li></ul></li><li>二叉数等………..</li></ul></blockquote><hr><h3 id="数组概述"><a href="#数组概述" class="headerlink" title="数组概述"></a>数组概述</h3><blockquote><ul><li>数组也是<strong>对象</strong></li><li>数组中保存着多个相同类型的元素</li><li>数组中的每一个元素都是<strong>变量</strong></li></ul></blockquote><hr><h3 id="定义数组-基本类型的数组"><a href="#定义数组-基本类型的数组" class="headerlink" title="定义数组    (基本类型的数组)"></a>定义数组    (基本类型的数组)</h3><p><strong>创建TestArray1.java</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestArray1</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                <span class="token comment">//数组的定义和赋值</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numberArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//numberArray是引用类型,引用数组对象</span>        <span class="token comment">//数组元素的赋值</span>        numberArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        numberArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        numberArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>        numberArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>        numberArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numberArray<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//数组的遍历:一个一个地看一下</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numberArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"numberArray["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>numberArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>数组本身:System.out.println(numberArray);</p><p><img src="/2021/07/22/07-%E6%95%B0%E7%BB%84/image-20210724155545943.png" loading="lazy"></p></blockquote><p><font color="red">java.lang.ArrayIndexOutOfBoundsException</font>:数组越界异常</p><p><strong>创建TestArray2.java</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestArray2</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numberArray1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        numberArray1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        numberArray1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>        numberArray1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numberArray1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"numberArray1["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>numberArray1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//数组的其他定义方法</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numberArray2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                 <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numberArray2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"numberArray2["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>numberArray2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">//该种方式不建议使用</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numberArray3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><hr><h3 id="数组类型的默认值"><a href="#数组类型的默认值" class="headerlink" title="数组类型的默认值"></a>数组类型的默认值</h3><blockquote><ul><li>byte、short、int、long为0</li><li>float、double为0.0</li><li>char为’\u0000’</li><li>boolean为false</li><li>引用类型为null</li></ul></blockquote><hr><h3 id="引用类型的数组"><a href="#引用类型的数组" class="headerlink" title="引用类型的数组"></a>引用类型的数组</h3><p><strong>创建TestArray3.java    (引用上一个person类)</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestArray3</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> personArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        personArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>personArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>personArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>personArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"personArray["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>personArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token operator">:</span>personArray<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2021/07/22/07-%E6%95%B0%E7%BB%84/image-20210729204356010.png" loading="lazy"></p><p>测试结果:</p><p><img src="/2021/07/22/07-%E6%95%B0%E7%BB%84/image-20210729204758552.png" loading="lazy"></p><hr><h3 id="Java语言注重类型"><a href="#Java语言注重类型" class="headerlink" title="Java语言注重类型"></a>Java语言注重类型</h3><blockquote><ul><li>一旦数组被声明出来,你就只能够装入所声明类型的元素</li><li>数组元素的初始化分为两种<ul><li>基本类型元素的初始化就是直接将数据放入数组元素中</li><li>引用类型的元素的初始化需要去指向另外一个对象</li></ul></li></ul></blockquote><h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><blockquote><ul><li>数组的遍历就是依次访问数组元素的值</li><li>通常情况下使用for循环</li><li>JDK1.5以后，更加便利的for each循环</li><li>数组的length属性</li></ul></blockquote><h4 id="for-each-循环"><a href="#for-each-循环" class="headerlink" title="for each 循环"></a><strong>for each 循环</strong></h4><p>好处:简化遍历</p><p>缺点:只能全部遍历</p><blockquote><p>for(类型 元素:被遍历的容器对象){</p><p>}</p></blockquote><pre class="language-java" data-language="java"><code class="language-java">例子<span class="token operator">:</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> xxx<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><hr><h3 id="数组的拷贝-扩容"><a href="#数组的拷贝-扩容" class="headerlink" title="数组的拷贝(扩容)"></a>数组的拷贝(扩容)</h3><blockquote><p>System.arraycopy();              (java.lang下的)</p><p>arraycopy(Object src, int srcPos, Object dest, int  destPos, int length)</p><ul><li>src - 源数组</li><li>srcPos - 源数组中的起始位置</li><li>dest - 目标数组</li><li>destPos - 目标数据中的起始位置</li><li>length - 要复制的数组元素的数量</li></ul></blockquote><p><strong>创建TestArraycopy</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestArraycopy</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>array1<span class="token punctuation">.</span>length<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//一般扩容两倍</span><span class="token comment">/*for(int i=0;i&lt;array1.length;i++)&#123; //拷贝array2[i] = array1[i];&#125;*/</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>array1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>array2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>array1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"array2["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>array2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><hr><h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a><font color="red">数组排序</font></h3><h4 id="冒泡排序-效率最低"><a href="#冒泡排序-效率最低" class="headerlink" title="冒泡排序    (效率最低):"></a>冒泡排序    (效率最低):</h4><ol><li>比较相邻的元素。如果第一个比第二个小，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最小的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><p><strong>创建TestBubbleSort</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//冒泡排序</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span>   <span class="token comment">//随机数</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBubbleSort</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//使用随机数为数组元素赋值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历原始数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"遍历原始数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//排序</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//-i步骤优化了程序,</span><span class="token comment">//冒泡排序一趟下来最后两位不要动了</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历排序后的数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\遍历排序后数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2021/07/22/07-%E6%95%B0%E7%BB%84/image-20210730194407428.png" loading="lazy"></p><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序:"></a>插入排序:</h4><ol><li>从第一个元素开始，该元素可以认为已经被排序 </li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描  </li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置  </li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置  </li><li>将新元素插入到该位置中  </li><li>重复步骤2 </li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInsertSort</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//使用随机数为数组元素赋值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历原始数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"遍历原始数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//排序</span><span class="token keyword">int</span> size <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//找到位置往后挪</span><span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//插入数据</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历排序后的数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n遍历排序后数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序:"></a>选择排序:</h4><ol><li>在未排序序列中找到最小的元素,存放到排序序列的起始位置</li><li>再从剩余未排序元素中继续寻找最小元素,然后放到排序序列起始位置</li><li>以此类推,直到所有元素均排序完毕</li></ol><p><strong>创建TestSelectSort</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSelectSort</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//使用随机数为数组元素赋值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历原始数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"遍历原始数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//排序</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">int</span> size <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">></span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>k <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历排序后的数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n遍历排序后数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序:"></a>快速排序:</h4><ol><li>从数列中挑出一个元素，称为“基准”(pivot)  </li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这 个分割之后，  </li><li>该基准是它的最后位置。这个称为分割（partition）操作。  </li><li>递归地把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestQuickSort</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">L</span><span class="token operator">>=</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">int</span> left<span class="token operator">=</span><span class="token class-name">L</span><span class="token punctuation">,</span>right<span class="token operator">=</span><span class="token class-name">R</span><span class="token punctuation">;</span><span class="token keyword">int</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">&#123;</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">&#123;</span>left<span class="token operator">&lt;</span>right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">>=</span>pivot<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>right<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&lt;=</span>pivot<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>left<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">>=</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token class-name">L</span><span class="token punctuation">,</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="使用Arrays类帮助排序"><a href="#使用Arrays类帮助排序" class="headerlink" title="使用Arrays类帮助排序"></a><strong><font color="red">使用Arrays类帮助排序</font></strong></h3><p><strong>java.util.Arrays</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span>   <span class="token comment">//随机数</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBubbleSort</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//使用随机数为数组元素赋值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历原始数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"遍历原始数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用Arrays类排序</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历排序后的数组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r\n遍历排序后数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span>array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aplayer播放器</title>
      <link href="/2021/07/19/Aplayer%E6%92%AD%E6%94%BE%E5%99%A8/"/>
      <url>/2021/07/19/Aplayer%E6%92%AD%E6%94%BE%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h2>    <div id="aplayer-npFUibNN" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1344440225" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div>    <div id="aplayer-dZQQzxKX" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="228891614" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div><blockquote><p>安装 <a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a></p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-tag-aplayer</code></pre><blockquote><p>可参见<a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md">官方文档</a>。</p></blockquote><p>推荐的配置（在 Hexo 的根目录下的 <code>_config.yml</code> 中）：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">aplayer</span><span class="token punctuation">:</span>  <span class="token key atrule">cdn</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js  <span class="token key atrule">style_cdn</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css  <span class="token key atrule">meting</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#MetingJS 功能</span>  <span class="token key atrule">meting_cdn</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js</code></pre><blockquote><p>TIP</p><p>如果你发现 Aplayer 有时会在无关紧要的文件里也重复引入头文件。记得关闭自动脚本插入。</p><p>MeingJS 支持 (3.0 新功能)<br>MetingJS 是基于Meting API 的 APlayer 衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。</p><p>如果想在本插件中使用 MetingJS，请在 Hexo 配置文件 _config.yml 中设置：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">aplayer</span><span class="token punctuation">:</span>  <span class="token key atrule">meting</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>接着就可以 在文章中使用 MetingJS 播放器了。</p></blockquote><blockquote><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md#%E9%87%8D%E5%A4%8D%E8%BD%BD%E5%85%A5-aplayerjs-%E8%B5%84%E6%BA%90%E8%84%9A%E6%9C%AC%E9%97%AE%E9%A2%98">重复载入 Aplayer.js 资源脚本问题</a></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">aplayer</span><span class="token punctuation">:</span>  <span class="token key atrule">asset_inject</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre></blockquote><h3 id="然后在文章头部决定是否开启-aplayer"><a href="#然后在文章头部决定是否开启-aplayer" class="headerlink" title="然后在文章头部决定是否开启 aplayer:"></a>然后在文章头部决定是否开启 <code>aplayer</code>:</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> xxx<span class="token key atrule">aplayer</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">---</span></code></pre><p>插入某首网易云音乐的歌</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">&#123;% meting "497572729" "netease" "song" "theme:#C20C0C" %&#125;</code></pre><p>其中的netease为公司名，也就是音乐平台，如: <code>netease</code>(网易云), <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code>；</p><p>有关选项列表如下:</p><table><thead><tr><th>选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td><strong>必须值</strong></td><td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td></tr><tr><td>server</td><td><strong>必须值</strong></td><td>音乐平台:<code> netease, tencent, kugou, xiami, baidu</code></td></tr><tr><td>type</td><td><strong>必须值</strong></td><td><code>song, playlist, album, search, artist</code></td></tr><tr><td>fixed</td><td><code>false</code></td><td>开启固定模式</td></tr><tr><td>mini</td><td><code>false</code></td><td>开启迷你模式</td></tr><tr><td>loop</td><td><code>all</code></td><td>列表循环模式：<code>all, one,none</code></td></tr><tr><td>order</td><td><code>list</code></td><td>列表播放模式：<code> list, random</code></td></tr><tr><td>volume</td><td>0.7</td><td>播放器音量</td></tr><tr><td>lrctype</td><td>0</td><td>歌词格式类型</td></tr><tr><td>listfolded</td><td><code>false</code></td><td>指定音乐播放列表是否折叠</td></tr><tr><td>storagename</td><td><code>metingjs</code></td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr><td>autoplay</td><td><code>true</code></td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td>mutex</td><td><code>true</code></td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td>listmaxheight</td><td><code>340px</code></td><td>播放列表的最大长度</td></tr><tr><td>preload</td><td><code>auto</code></td><td>音乐文件预载入模式，可选项:<code>none,metadata, auto</code></td></tr><tr><td>theme</td><td><code>#ad7a86</code></td><td>播放器风格色彩设置</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06-自定义类和对象的创建</title>
      <link href="/2021/07/19/06-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
      <url>/2021/07/19/06-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="创建Person类"><a href="#创建Person类" class="headerlink" title="创建Person类"></a>创建Person类</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token comment">//成员变量 属性 域(field)</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">boolean</span> gender<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">//方法</span><span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">String</span> food<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人在吃"</span><span class="token operator">+</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",gender="</span><span class="token operator">+</span>gender<span class="token operator">+</span><span class="token string">",age="</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><p><font color="red">成员变量有默认值,局部变量没有</font></p><h3 id="创建TestPerson类"><a href="#创建TestPerson类" class="headerlink" title="创建TestPerson类"></a>创建TestPerson类</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPerson</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token comment">//hello是字面值</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        Person p : 在栈内存中定义一个类型为Person的变量p        new Person() : 通过new关键字在堆内存中开辟适当空间         Person()是一个对象,将该对象放进刚刚开辟的空间中        = : 让p变量指向放进刚刚那个空间中的对象,即p就是该对象的一个引用        */</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"朱锐"</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1="</span><span class="token operator">+</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str2="</span><span class="token operator">+</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p="</span><span class="token operator">+</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre><p><img src="/2021/07/19/06-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/image-20210722134349407.png" alt="image-20210722134349407" loading="lazy"></p><p><font color="red">变量都存在栈内存中</font></p><p><font color="red">基本类型的值可以直接放进变量中</font> 类似容器,可以存放基本类型的值</p><p><font color="red">引用类型从堆内存中引用 </font>类似指向对象的指针</p><hr><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>进入测试文件目录:</p><pre class="language-java" data-language="java"><code class="language-java">javac <span class="token class-name">TestPerson</span><span class="token punctuation">.</span>java    <span class="token comment">//生成.class文件</span>java <span class="token class-name">TestPerson</span></code></pre><img src="/2021/07/19/06-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/01.png" alt style="zoom:50%;" loading="lazy"><p><strong>空间的地址符号</strong>    –计算–&gt;    <strong>一串数字</strong>    –哈希算法–&gt;    <strong>得到的值</strong></p><p><code>p=Person@15db9742</code></p><p>固定写法:<strong>类名@得到的值</strong></p><hr><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><ul><li>在订单系统中，一般有如下的一些名词 <ul><li>账户（Account） </li><li>付款（Payment） </li><li>送货地址（ShoppingAddress） </li><li>订单（Order） </li><li>订单项（Item） </li></ul></li><li>可能还有如下一些动词 <ul><li>添加（add） </li><li>发送（send） </li><li>取消（cancle） </li><li>支付（pay）</li></ul></li></ul><p><font color="red">名词一般设计为<font color="green">类或属性</font>,动词一般设计为<font color="green">方法.</font></font></p><p><em><strong>几个重要的关系:</strong></em></p><p>依赖（“uses-a”）</p><img src="/2021/07/19/06-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/image-20210811132033982.png" style="zoom:33%;" loading="lazy"><p>聚合（“has-a”）</p><img src="/2021/07/19/06-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/image-20210811132057495.png" style="zoom:33%;" loading="lazy"><p>继承（“is-a”）</p><img src="/2021/07/19/06-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/image-20210811132110060.png" style="zoom:33%;" loading="lazy"><p><strong>表示符号上的区别:</strong></p><img src="/2021/07/19/06-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/image-20210811132331899.png" style="zoom:60%;" loading="lazy">]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05-面向对象的概述</title>
      <link href="/2021/07/19/05-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A6%82%E8%BF%B0/"/>
      <url>/2021/07/19/05-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="Java的小门槛"><a href="#Java的小门槛" class="headerlink" title="Java的小门槛"></a>Java的小门槛</h3><ul><li>判断循环 - 逻辑思维</li><li>面向对象的思想</li><li>反射</li></ul><h3 id="Java的面向对象术语"><a href="#Java的面向对象术语" class="headerlink" title="Java的面向对象术语"></a>Java的面向对象术语</h3><ul><li><p>OOA:Object Oriented Analysis,面向对象程序的分析</p></li><li><p>OOD:Object Oriented Design,面向对象程序的设计</p><p>面向对象程序设计是当今主流的程序设计泛型,它已经取代(夸张)了70年代早期的”结构化”过程式程序设计开发技术。</p></li><li><p>OOP:Object Oriented Programing,面向对象程序的编码</p><ul><li>程序是由对象组成的,这些对象有自己的属性和能够执行的操作</li><li>程序只关心对象能够满足的要求，并不需要去关心其功能 的具体实现的过程 </li><li>OOP的关键是让每一个对象负责执行一组相关的任务</li><li>如果一个对象依赖于另一个对象负责处理的任务，那么它 就去访问那个包括该任务的对象（方法调用）</li><li>一个对象既不能直接访问另一个对象内部的数据，也不能让其他对象直接访问自己内部的数据</li></ul></li><li><p>API:Application Programming Interface,应用程序编程接口</p></li></ul><h3 id="Java面相对象的三大特性"><a href="#Java面相对象的三大特性" class="headerlink" title="Java面相对象的三大特性"></a>Java面相对象的<strong>三大特性</strong></h3><ul><li><h4 id="封装-encapsulation"><a href="#封装-encapsulation" class="headerlink" title="封装(encapsulation):"></a><strong>封装(encapsulation):</strong></h4><p>将数据和行为结合在一个包中,并对对象的使用者隐藏了数据的实现方式。</p><p><strong>数据</strong>:实例域(属性)</p><p><strong>行为</strong>:方法</p><p><strong><font color="red">访问控制级别表:</font></strong></p><table><thead><tr><th align="center"></th><th align="center">private</th><th align="center">default</th><th align="center">protected</th><th align="center">public</th></tr></thead><tbody><tr><td align="center">同一个类中</td><td align="center">&#x2714;</td><td align="center">&#x2714;</td><td align="center">&#x2714;</td><td align="center">&#x2714;</td></tr><tr><td align="center">同一个包中</td><td align="center"></td><td align="center">&#x2714;</td><td align="center">&#x2714;</td><td align="center">&#x2714;</td></tr><tr><td align="center">子类中</td><td align="center"></td><td align="center"></td><td align="center">&#x2714;</td><td align="center">&#x2714;</td></tr><tr><td align="center">全局范围内</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">&#x2714;</td></tr></tbody></table></li><li><h4 id="继承-inheritance"><a href="#继承-inheritance" class="headerlink" title="继承(inheritance):"></a><strong>继承(inheritance)</strong>:</h4><p>利用继承,可以基于已存在的<strong>类</strong>构造的一个新类。</p><p>继承已存在的类就是__复用(继承)__这些类的方法和域,;以满足新的业务需求。</p></li><li><h4 id="多态-polymorphism-："><a href="#多态-polymorphism-：" class="headerlink" title="多态(polymorphism)："></a><strong>多态(polymorphism)：</strong></h4><ul><li>Java引用变量有两个类型：<strong>编译时类型</strong>和<strong>运行时类型</strong></li><li>编译时类型由声明该变量时使用的类型决定，运行时类型由实际赋值给变量的对象的类型决定。</li><li>如果编译时类型和运行时类型不一致，就会出现所谓的多态。</li></ul></li></ul><ul><li><h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a><strong>抽象</strong></h4><ul><li>是封装、继承、多态的基础</li><li>提取各个个体的共性，形成一个通用的形式</li><li>只关心当前目标有关的信息，忽略其他的信息</li><li>某些书籍也将抽象纳入Java的特性之一</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04-Java表达式</title>
      <link href="/2021/07/19/04-Java%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2021/07/19/04-Java%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="操作数"><a href="#操作数" class="headerlink" title="操作数"></a>操作数</h2><ul><li><p>操作数的概念是建立在具体的操作之上的</p></li><li><p>具体的操作应该是一条语句</p></li><li><p>表达式是语句的一种特殊表现形式</p></li><li><p>表达式也可以视为特殊的操作数</p><p>1 + 2;</p><p>a &gt; 5;</p><p>3 != 5;</p><p>(a-6) &gt; 9;</p><p>…</p></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li><p>常用运算符</p><table><thead><tr><th align="center">序号</th><th align="center">描述</th><th>运算符</th><th align="center">结合性</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">括号和引用</td><td><strong>()     []    .</strong></td><td align="center">左→右</td></tr><tr><td align="center">2</td><td align="center">单目运算符</td><td><strong>++   –    !    ~</strong></td><td align="center">右→左</td></tr><tr><td align="center">3</td><td align="center">算术运算符</td><td>***   /    %    +   -**</td><td align="center">左→右</td></tr><tr><td align="center">4</td><td align="center">关系运算符</td><td><strong>&gt;   &gt;=   &lt;   &lt;=   ==    !=   instanceof</strong></td><td align="center">左→右</td></tr><tr><td align="center">5</td><td align="center">逻辑运算符</td><td><strong>&amp;&amp;  ||  &amp;   |</strong></td><td align="center">左→右</td></tr><tr><td align="center">6</td><td align="center">位运算符</td><td><strong>&lt;&lt;  &gt;&gt;  &gt;&gt;&gt;  &amp;  |  ^</strong></td><td align="center">左→右</td></tr><tr><td align="center">7</td><td align="center">条件运算符</td><td><strong>?  :</strong></td><td align="center">/</td></tr><tr><td align="center">8</td><td align="center">赋值运算符</td><td>**=  +=  -=  <em>=  /=  %=  &gt;&gt;=  &gt;&gt;&gt;=  &lt;&lt;=  &amp;=  |=  ^=</em>*</td><td align="center">右→左</td></tr></tbody></table></li></ul><h3 id="运算符详解"><a href="#运算符详解" class="headerlink" title="运算符详解"></a>运算符详解</h3><h4 id="括号和引用"><a href="#括号和引用" class="headerlink" title="括号和引用"></a>括号和引用</h4><ul><li>()    []    .</li><li>()<ul><li>强制类型转换</li><li>提升运算符优先级</li></ul></li><li>[]<ul><li>数组的声明语法</li><li>数组下标访问符</li></ul></li><li>.<ul><li>访问运算符</li></ul></li></ul><h4 id="单目运算符"><a href="#单目运算符" class="headerlink" title="单目运算符"></a>单目运算符</h4><ul><li>++    –    !    ~</li><li>++<ul><li>自涨1</li><li>++i,在使用i前,先使i的值加1</li><li>i++,在使用i后,再使i的值加1</li></ul></li></ul><hr><ul><li>自减1</li><li>–i,在使用i前,先使i的值减1</li><li>i–,在使用i后,再使i的值减1</li><li>!<ul><li>逻辑反</li></ul></li><li>~<ul><li>按位取反</li></ul></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token operator">++</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span>  <span class="token comment">//先执行a+6,再将a加1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">",b="</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token operator">++</span>c <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span>  <span class="token comment">//先将c+1,再执行c+6</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c="</span><span class="token operator">+</span>c<span class="token operator">+</span><span class="token string">",d="</span><span class="token operator">+</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><pre class="language-markdown" data-language="markdown"><code class="language-markdown">算术运算符/%+-*<span class="token code keyword">*:乘/:除%:模        2 * 3 = 6        9 / 3 = 3        9 % 3 = 0+:    算术意义上面的加    java对"+"运算符进行了扩展,使它能够进行字符串的连接,如"abc" + "de",得到串"abcde"-:算术意义上的减</span></code></pre><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><pre class="language-markdown" data-language="markdown"><code class="language-markdown">关系运算符> >= &lt; &lt;= == != instanceof>:大于>=:大于等于,不小于&lt;:小于&lt;=:小于等于,不大于==:等于!=:不等于instanceof: 左操作数是否是右操作数的子类 左操作数是否是右操作数的子接口 左操作数是否是右操作数的实现类</code></pre><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><ul><li>&amp;&amp;  ||  &amp;  |<ul><li>&amp;&amp;:    短路与</li><li>||:     短路或</li><li>&amp;:      不短路与</li><li>|:       不短路或</li></ul></li><li>短路与不短路之间的区别?<ul><li>短路:只要第一个操作数的结果能决定最终的结果,则后续的操作数不再执行</li><li>不短路:只要第一个操作数的结果能决定最终的结果,则后续的操作数继续执行</li></ul></li></ul><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><table><thead><tr><th align="center">运算符</th><th align="center">用法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">~</td><td align="center">~op</td><td align="center">按位取反</td></tr><tr><td align="center">&amp;</td><td align="center">op1 &amp; op2</td><td align="center">按位与</td></tr><tr><td align="center">|</td><td align="center">op1 |op2</td><td align="center">按位或</td></tr><tr><td align="center">^</td><td align="center">op1 ^ op2</td><td align="center">按位异或</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">op1 &gt;&gt; op2</td><td align="center">op1右移op2位</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">op1 &lt;&lt; op2</td><td align="center">op1左移op2位</td></tr><tr><td align="center">&gt;&gt;&gt;</td><td align="center">op1 &gt;&gt;&gt; op2</td><td align="center">op1无符号右移op2位</td></tr></tbody></table><ul><li><p>位运算符的运算结果表</p><table><thead><tr><th align="center">第一个运算数</th><th align="center">第二个运算数</th><th align="center">按位与(&amp;)</th><th align="center">按位或(|)</th><th align="center">按位异或(^)</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">0</td></tr></tbody></table></li></ul><p><img src="/2021/07/19/04-Java%E8%A1%A8%E8%BE%BE%E5%BC%8F/01.png" loading="lazy"></p><h4 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h4><ul><li>?   :</li><li>条件表达式   ?结果1 :  结果2<ul><li>如果条件表达式为真,返回结果1</li><li>如果条件表达式为假,返回结果2</li></ul></li></ul><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><ul><li><strong>=</strong></li><li>**+=  -=  <em>=  /=  %=</em>*</li><li><strong>&gt;&gt;=  &gt;&gt;&gt;=  &lt;&lt;=  &amp;=  |=  ^=</strong></li></ul><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><h4 id="运算符的默认优先级"><a href="#运算符的默认优先级" class="headerlink" title="运算符的默认优先级"></a>运算符的默认优先级</h4><ul><li> 分隔符： . [] （）{} , ;</li><li>单目运算符：++ – ~ !</li><li>强制类型转换：（)</li><li>乘除模：* / %</li><li>移位：&lt;&lt; &gt;&gt; &gt;&gt;&gt;</li><li>关系：&lt; &lt;= &gt; &gt;= instanceof</li><li>相等：== !=</li><li>按位与：&amp;</li><li>按位异或：^</li><li>按位或：^</li><li>条件并且：&amp;&amp;</li><li>条件或者：||</li><li>三目运算符：？:</li><li>赋值运算符：= += -= *= /= %= &gt;&gt;= &gt;&gt;&gt;= &lt;&lt;= &amp;= |=  ^=</li></ul><p><em><strong>无需记忆</strong></em></p><p><em><strong>提升运算符的优先级:   ()</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-Java基本数据类型</title>
      <link href="/2021/07/19/03-Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2021/07/19/03-Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Java基本数据类型"><a href="#Java基本数据类型" class="headerlink" title="Java基本数据类型"></a>Java基本数据类型</h2><blockquote><p>byte              8bit整型值</p><p>short            16bit整型值</p><p>int                 32bit整型值</p><p>long              64bit整型值</p><p>float             32bit浮点数值</p><p>double         64bit浮点数值</p><p>char             16bit  unicode编码</p><p>boolean       布尔值(true或false)</p></blockquote><h4 id="整型数据类型：byte、short、int、long"><a href="#整型数据类型：byte、short、int、long" class="headerlink" title="整型数据类型：byte、short、int、long"></a>整型数据类型：byte、short、int、long</h4><ul><li>三种形式给一个整型变量直接赋值：十进制、 八进制、十六进制</li><li>直接给出的值默认是int类型</li><li>长整型值应该在数字后面跟上  ‘l’ 或  ‘L’ 标识</li></ul><h4 id="整型数据在计算机内的存储方式"><a href="#整型数据在计算机内的存储方式" class="headerlink" title="整型数据在计算机内的存储方式"></a>整型数据在计算机内的存储方式</h4><ul><li>计算机以补码的形式保存所有的整数</li><li>补码计算规则:<ul><li>正数的补码和原码完全相同</li><li>负数的补码是其反码加1</li><li>反码是对其原码按位取反,符号位保持不变</li></ul></li></ul><h4 id="浮点数据类型-float和double"><a href="#浮点数据类型-float和double" class="headerlink" title="浮点数据类型:float和double"></a>浮点数据类型:float和double</h4><ul><li>直接在程序中书写的浮点数默认认为double类型</li><li>float类型的数据占32位长度(4 Bytes)</li><li>double类型的数据占64位长度(8 Bytes)</li><li>直接表示一个float类型的值必须在数字后跟  ‘f’  或  ‘F’</li><li>直接表示一个double类型的值可以在数字后跟  ‘d’  或  ‘D’</li><li>可以用科学计数法表示,如:123.456e3  或  123.456E3</li></ul><h4 id="字符类型-char"><a href="#字符类型-char" class="headerlink" title="字符类型:char"></a>字符类型:char</h4><ul><li><p>其实就是一个无符号的16位整型,其范围为<strong>0~65535</strong>,用来存储该字符的Unicode编码值,因为Unicode编码中包含汉字的编码,所以一个char类型的变量也可以存储一个汉字字符.(<strong>一个汉字字符=两个字节</strong>)</p></li><li><p>在代码中直接给出的一个字符值必须用单引号括起来</p><p>char zhChar = ‘中’;</p><p>char enChar = ‘a’;</p><p>char ucChar = ‘\u0060’;</p></li><li><p>对某些不方便直接书写或直接书写有歧义的字符,Java语言规定用<strong>转义字符</strong>给出</p></li><li><p>可以把char类型数据当作整数数据来操作</p></li></ul><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><ul><li><p>Java语言中转义字符都以  <strong>‘\‘</strong>  给出</p></li><li><p>常用转义字符</p><blockquote><p>\uxxxx  :1到4位16进制数所表示的字符(xxxx)</p><p>\‘  :单引号字符</p><p>\“  :双引号字符</p><p>\\  :反斜杠字符</p><p>\r  :回车</p><p>\n  :换行</p><p>\t  :制表符</p></blockquote></li></ul><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td>\ddd</td><td>1到3位8进制数所表示的字符(ddd)</td></tr><tr><td>\uxxxx</td><td>1到4位16进制数所表示的字符(xxxx)</td></tr><tr><td>\‘</td><td>单引号字符</td></tr><tr><td>\’’</td><td>双引号字符</td></tr><tr><td>\\</td><td>反斜杠字符</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\f</td><td>走纸换页</td></tr><tr><td>\t</td><td>横向跳格</td></tr><tr><td>\b</td><td>退格</td></tr></tbody></table><h5 id="char类型数据当作整数数据"><a href="#char类型数据当作整数数据" class="headerlink" title="char类型数据当作整数数据"></a>char类型数据当作整数数据</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token string">'中'</span><span class="token punctuation">,</span>c2 <span class="token operator">=</span> <span class="token number">54</span><span class="token punctuation">,</span>c3 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">,</span>c4 <span class="token operator">=</span> <span class="token string">'Z'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c5 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">,</span>c6 <span class="token operator">=</span> <span class="token string">'z'</span><span class="token punctuation">,</span>c7 <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">,</span>c8 <span class="token operator">=</span> <span class="token string">'9'</span><span class="token punctuation">;</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>i2 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">,</span>i3 <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="布尔类型-boolean"><a href="#布尔类型-boolean" class="headerlink" title="布尔类型:boolean"></a>布尔类型:boolean</h4><ul><li>一个boolean类型的变量用来表示一个<strong>或真或假</strong>的关系</li><li>一个boolean类型的变量的值必须是<strong>true</strong>或<strong>false</strong>二者之一</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> isCorrect <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><table><thead><tr><th align="center">类型</th><th align="center">位数</th><th align="center">字节</th><th align="center">最小值</th><th align="center">最大值</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">8</td><td align="center">1</td><td align="center">true或false</td><td align="center">true或false</td></tr><tr><td align="center">byte</td><td align="center">8</td><td align="center">1</td><td align="center">-2<sup>7</sup></td><td align="center">2<sup>7</sup>-1</td></tr><tr><td align="center">short</td><td align="center">16</td><td align="center">2</td><td align="center">-2<sup>15</sup></td><td align="center">2<sup>15</sup>-1</td></tr><tr><td align="center">char</td><td align="center">16</td><td align="center">2</td><td align="center">0</td><td align="center">2<sup>16</sup>-1</td></tr><tr><td align="center">int</td><td align="center">32</td><td align="center">4</td><td align="center">-2<sup>31</sup></td><td align="center">2<sup>31</sup>-1</td></tr><tr><td align="center">long</td><td align="center">64</td><td align="center">8</td><td align="center">-2<sup>63</sup></td><td align="center">2<sup>63</sup>-1</td></tr><tr><td align="center">float</td><td align="center">32</td><td align="center">4</td><td align="center">Not needed</td><td align="center">Not needed</td></tr><tr><td align="center">double</td><td align="center">64</td><td align="center">8</td><td align="center">Not needed</td><td align="center">Not needed</td></tr></tbody></table><hr><h2 id="String类型以及API文档查询"><a href="#String类型以及API文档查询" class="headerlink" title="String类型以及API文档查询"></a>String类型以及API文档查询</h2><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><ul><li><p>String不是Java中的基本类型</p></li><li><p>String类型是引用类型</p></li><li><p>String类型常用方法 (详情见String常用方法讲解)</p><blockquote><p>char charAt(int index)</p><p>boolean equals(Object anObject)</p><p>int indexOf(String str)</p><p>int length()</p><p>String replace(char oldChar, char newChar)</p><p>String replaceAll(String regex, String replacement)</p><p>String replaceFirst(String regex, String replacement)</p><p>String[] split(String regex)</p><p>String substring(int beginIndex)</p><p>String substring(int beginIndex, int endIndex)</p><p>char[] toCharArray()</p><p>String toLowerCase()</p><p>String toUpperCase()</p><p>String trim()</p><p>static String valueOf(一些基本类型 b)</p></blockquote></li></ul><h2 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h2><h4 id="基本数据类型转换序列"><a href="#基本数据类型转换序列" class="headerlink" title="基本数据类型转换序列"></a>基本数据类型转换序列</h4><ul><li>顺着箭头方向的类型转换可以自动进行,逆箭头方向的转换或无箭头类型之间的转换必须强制转换</li><li>能将A类型变量自动转换成B类型变量的前提条件是这种转换不会造成数据和精度的丢失,即A类型的取值范围是B类型的取值范围的子集</li></ul><p><img src="/2021/07/19/03-Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/01.png" loading="lazy"></p><p>例子:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">implictCasting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ia <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token keyword">long</span> d <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token keyword">long</span> e <span class="token operator">=</span> <span class="token number">100000000L</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> f <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">double</span> g <span class="token operator">=</span> f<span class="token punctuation">;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="自动类型转换的规则"><a href="#自动类型转换的规则" class="headerlink" title="自动类型转换的规则"></a>自动类型转换的规则</h4><ul><li><p>所有的byte类型、short类型、char类型被升级到int类型</p></li><li><p>在算术过程中，会自动提升到最高等级的类型</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> b1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//错误,自动升级到int类型</span><span class="token keyword">long</span> value1 <span class="token operator">=</span> b1<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">long</span> value2 <span class="token operator">=</span> b1<span class="token operator">+</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">120L</span><span class="token punctuation">;</span>  <span class="token comment">//最高级是long类型</span><span class="token keyword">int</span> value3 <span class="token operator">=</span> b1<span class="token operator">+</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">120L</span><span class="token punctuation">;</span>  <span class="token comment">//错误</span></code></pre></li></ul><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><ul><li>使用场景<ul><li>高类型往低类型转换</li><li>父类型往子类型转换</li><li>强制类型转换操作符:<strong>()</strong></li></ul></li><li>注意事项<ul><li>基本类型的强制类型转换,可能丢失精度</li><li>引用类型的强制类型转换,可能转换失败</li></ul></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量的类型"><a href="#变量的类型" class="headerlink" title="变量的类型"></a>变量的类型</h3><h4 id="基本类型的变量"><a href="#基本类型的变量" class="headerlink" title="基本类型的变量"></a>基本类型的变量</h4><ul><li>int age = 25;</li><li>char c = ‘A’;</li><li>boolean gender = true;</li><li>double d = 3.14;</li></ul><h4 id="引用类型的变量"><a href="#引用类型的变量" class="headerlink" title="引用类型的变量"></a>引用类型的变量</h4><ul><li>String name = “张三丰”;</li><li>String degree = “本科”;</li></ul><h3 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h3><h4 id="变量的声明-也可以称为变量的定义"><a href="#变量的声明-也可以称为变量的定义" class="headerlink" title="变量的声明,也可以称为变量的定义"></a>变量的声明,也可以称为变量的定义</h4><ul><li>int age;</li><li>boolean degree;</li><li>String name;</li></ul><h4 id="声明变量的规则"><a href="#声明变量的规则" class="headerlink" title="声明变量的规则"></a>声明变量的规则</h4><ul><li>变量必须有一个类型</li><li>变量必须有一个名字</li><li>int(类型) age(名字);</li></ul>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-基本语法单位</title>
      <link href="/2021/07/19/02-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%8D%95%E4%BD%8D/"/>
      <url>/2021/07/19/02-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%8D%95%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-基本语法单位"><a href="#Java-基本语法单位" class="headerlink" title="Java 基本语法单位"></a>Java 基本语法单位</h1><h2 id="注释及语句"><a href="#注释及语句" class="headerlink" title="注释及语句"></a>注释及语句</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><blockquote><p>使用最多的注释</p><p>其注释内容从**//** 开始,到本行结束</p><p>如:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//向控制台输出信息</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向控制台输出信息</span></code></pre></blockquote><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><blockquote><p>其注释内容从**/*** 开始,到***/**结束</p><p>如:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*这是我写的第一个Java程序...*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main<span class="token comment">/*这是main方法*/</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></blockquote><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><ul><li><p>方法调用语句</p><ul><li>System.out.println(“Hello World”);</li></ul></li><li><p>表达式语句(赋值语句)</p><ul><li>a = b+23;</li></ul></li><li><p>复合语句</p><ul><li><p>{</p><p>​    a = b+23;</p><p>​    System.out.println(“a=” +a);</p><p>}</p></li></ul></li><li><p>package语句和import语句</p></li><li><p>流程控制语句</p></li></ul><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul><li><p><strong>abstract boolean break byte case catch char class  continue default do double else extends enum false  final finally float for if implements import instanceof int interface long native new null package private  protected public return short static super switch  synchronized this throw throws transient true try  void volatile while</strong></p></li><li><p>__true false__不是关键字,而是boolean类型的字面量(值)</p></li><li><p>保留字</p><ul><li>const</li><li>goto</li></ul></li></ul><h3 id="标识符-identifie"><a href="#标识符-identifie" class="headerlink" title="标识符(identifie)"></a>标识符(identifie)</h3><ul><li>在Java中用来给一个类、变量或者方法命名的符号</li></ul><h5 id="标识符的命名规则"><a href="#标识符的命名规则" class="headerlink" title="标识符的命名规则"></a>标识符的命名规则</h5><blockquote><p>以    <strong>字母</strong>    <strong>“_”</strong>     或    <strong>“$”</strong>    符号开头</p><p>可以包含    <strong>字母</strong>    <strong>“_”</strong>    <strong>“$”</strong>    和    <strong>数字</strong>    符号</p><p>大小写敏感(区分大小写)</p><p>不能与关键字、boolean字面值、保留字冲突</p><p>没有长度限制</p></blockquote><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><ul><li>identifier、_sys_var1、$char、userName、user_name</li></ul>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-Java语言介绍及环境搭建</title>
      <link href="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Java语言介绍及环境搭建"><a href="#Java语言介绍及环境搭建" class="headerlink" title="Java语言介绍及环境搭建"></a>Java语言介绍及环境搭建</h1><h2 id="程序语言发展的历史"><a href="#程序语言发展的历史" class="headerlink" title="程序语言发展的历史"></a>程序语言发展的历史</h2><h3 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h3><ul><li>二进制机器代码，不便理解，不好记忆，与硬件平台相关， <strong>不具有可移植性</strong></li></ul><h3 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h3><ul><li>用助记符号来描述，与机器代码一一对应，能够理解，但同样<strong>不可移植</strong></li></ul><h3 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h3><ul><li><p>按自然语言的语法风格书写程序，方便理解，在原代码的 层次上可以实现<strong>跨平台移植</strong></p><p><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/01.png" loading="lazy"></p></li></ul><h2 id="Java各种版本"><a href="#Java各种版本" class="headerlink" title="Java各种版本"></a>Java各种版本</h2><ul><li>J2ME (Java 2 Micro Edition) 微型版</li><li>J2SE (Java 2 Standard Edition) 标准版</li><li>J2EE (Java 2 Enterprise Edition) 企业版</li><li>JavaME (Java Micro Edition) 微型版</li><li>JavaSE (Java Standard Edition) 标准版</li><li>JavaEE (Java Enterprise Edition) 企业版</li></ul><h2 id="Java语言的特点"><a href="#Java语言的特点" class="headerlink" title="Java语言的特点"></a>Java语言的特点</h2><h3 id="简单性"><a href="#简单性" class="headerlink" title="简单性"></a>简单性</h3><ul><li>Java语法是C++语法的一个“纯净”版本。这里没有头文件、指针运算、结构、联合、操作符重载、虚基类等等。</li><li>简单性的另一层意思就是小。Java既然能够在那么苛刻的条件下诞生，代码少而小也是必须的</li></ul><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul><li>Java语言是一个纯面向对象的语言</li><li>Java语言的面向对象与C++里面的面向对象几乎是一样的， 只是C++是既支持面向过程式开发，也支持面向对象式开发；而Java是纯净的面向对象的</li></ul><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><ul><li>Java的网络能力强大而且易于使用</li><li>Java将网络开发纷繁复杂的步骤变得极其简单</li><li>远程方法调用机制为分布式应用提供了基础</li><li>JavaEE领域支持大规模的分布式应用</li></ul><h3 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h3><ul><li>在程序的编译期，就能检测出其他语言在运行期才能检测 出来的bug</li><li>Java中虽然说没有指针，但是也可以说是到处是指针，只 是这个指针Java语言本身不允许程序员自己进行指针运算， 也不可能让程序员使用一个“坏指针”</li></ul><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><ul><li>禁止运行时堆栈溢出</li><li>禁止在自己的处理空间之外破坏内存</li><li>未经授权禁止读写文件</li></ul><h3 id="体系结构中立"><a href="#体系结构中立" class="headerlink" title="体系结构中立"></a>体系结构中立</h3><ul><li>编译器编译生成一个体系结构中立的目标文件格式</li><li>这种格式的文件，可以在任何的、有Java运行环境的机器上执行</li></ul><h3 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h3><ul><li>Java中的数据类型所占的空间是一定的，并不会因为目标机器的不同而有所改变（C++就不一样，int型可能是16位整数，也有可能是32位整数），这样就为跨平台开发提供了可能</li></ul><h3 id="解释型"><a href="#解释型" class="headerlink" title="解释型"></a>解释型</h3><ul><li>Java解释器可以在任何移植了解释器的机器上执行Java字节码</li></ul><h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><ul><li>即时编译：一次把字节码编译为本地代码，并将结果缓存起来，在需要的时候重新调用。由于这种方式只需要进行一次解释，从而极大地提高了常用代码的运行速度</li></ul><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ul><li>该特点是相对于其他语言而言的，Java语言处理多线程要 比其他语言要简单得多，而且Java直接线程的实现交给 底层的操作系统或者是线程库来完成</li></ul><hr><h2 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h2><ul><li><p><em><strong>JVM</strong></em>是<strong>Java Virtual Machine</strong>（Java虚拟机）的缩写， JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。Java虚拟机包括一套<strong>字节码指令集</strong>、一组<strong>寄存器</strong>、一个<strong>栈</strong>、一个<strong>垃圾回收堆</strong>和一个<strong>存储方法域</strong>。JVM屏 蔽了与具体操作系统平台相关的信息，使Java程序只需生成在Java虚拟机上运行的目标代码（<strong>字节码</strong>）,就可以在多种平台上不加修改地运行。JVM在执行字节码时，实际上最终还是把字节码解释成具体平台上的<strong>机器指令</strong>执行。编译虚拟机的指令集与编译微处理器的指令集非常类似</p><p><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02.png" loading="lazy"></p></li></ul><hr><h2 id="Java开发环境"><a href="#Java开发环境" class="headerlink" title="Java开发环境"></a>Java开发环境</h2><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><blockquote><ul><li>Java Development Kit（Java开发工具包）</li><li>工具箱1.2-1.4版本也称为SDK（SoftwareDevelopment Kit）</li><li>包含Java运行的基本类库和开发命令，安装JDK可以进行 完整的Java开发</li></ul></blockquote><h3 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h3><blockquote><ul><li>Java Runtime Environment (Java运行环境)</li><li>包含Java运行的基本类库和一些运行命令,安装JRE可以运行编译好的Java程序</li></ul></blockquote><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><blockquote><ul><li>Java Virtual Machine (Java虚拟机)</li><li>Java语言内部运行的核心</li></ul></blockquote><h4 id="图示"><a href="#图示" class="headerlink" title="图示:"></a>图示:</h4><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/03.png" alt style="zoom:50%;" loading="lazy"><hr><h2 id="Windows下环境搭建"><a href="#Windows下环境搭建" class="headerlink" title="Windows下环境搭建"></a>Windows下环境搭建</h2><ul><li><p>从以下网站中可以下载JDK</p><ul><li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></li><li>根据开发机器的不同,请下载相应平台下的JDK</li></ul></li><li><p>安装JDK</p><ul><li>run the executable</li></ul></li><li><p>JDK1.7(7.0)下载地址</p><ul><li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</a></li><li><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/04.png" loading="lazy"></li></ul></li><li><p><strong>配置Java环境变量</strong></p><ul><li>我的电脑-&gt;属性</li><li><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/05.png" style="zoom:50%;" loading="lazy"></li><li>高级系统设置-&gt;环境变量</li><li>在用户变量中新建一个新的环境变量,变量名为JAVA_HOME,其值为JDK安装的主目录</li><li><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/06.png" style="zoom:50%;" loading="lazy"></li><li>继续定位到Path - 编辑 - 新建</li></ul><pre class="language-cmd" data-language="cmd"><code class="language-cmd">%JAVA_HOME%\bin</code></pre><ul><li>确定 - 关闭所有窗口即可</li></ul></li></ul><ul><li><strong>验证ok</strong><ul><li>重新打开终端输入  java -version</li></ul></li></ul><hr><h2 id="Java的程序结构"><a href="#Java的程序结构" class="headerlink" title="Java的程序结构"></a>Java的程序结构</h2><blockquote><ul><li>类(接口、枚举等)存在于源文件中</li><li>属性、方法存在于类中</li><li>局部变量、语句存在于代码块中</li></ul><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/07.png" style="zoom:50%;" loading="lazy"></blockquote><h3 id="Java源文件"><a href="#Java源文件" class="headerlink" title="Java源文件"></a>Java源文件</h3><ul><li>保存Java代码的文件，以**.java**结尾</li></ul><h3 id="Java类"><a href="#Java类" class="headerlink" title="Java类"></a>Java类</h3><ul><li><p>表示程序的一个组件,也是Java程序最基本的组成单位,小的程序也许只会有一个类,累的内容必须包括在<strong>花括号</strong>内</p><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/08.png" style="zoom:50%;" loading="lazy"></li></ul><h3 id="Java方法"><a href="#Java方法" class="headerlink" title="Java方法"></a>Java方法</h3><ul><li><p>类中可以定义一个或者多个方法</p></li><li><p>Student类中,定义了一个study方法,里面有学生如何学习的指令代码</p></li><li><p>方法必须在类的内部定义、实现</p><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/09.png" style="zoom:50%;" loading="lazy"></li></ul><h3 id="Java属性"><a href="#Java属性" class="headerlink" title="Java属性"></a>Java属性</h3><ul><li><p>类中可以定义一个或者多个属性</p></li><li><p>暂时可以将属性理解成类的一个成员变量</p></li><li><p>Student类中,定义了一个name属性,表示学生有姓名</p><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/10.png" style="zoom:50%;" loading="lazy"></li></ul><h3 id="Java局部变量和语句"><a href="#Java局部变量和语句" class="headerlink" title="Java局部变量和语句"></a>Java局部变量和语句</h3><ul><li><p>在代码块中定义的变量即为局部变量</p></li><li><p>语句必须出现在代码块中,一个语句必须由一个分号表示结束,多个语句形成一个逻辑的表达</p><p><img src="/2021/07/19/01-Java%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/11.png" loading="lazy"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mermaid流程图快速入门</title>
      <link href="/2021/07/19/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2021/07/19/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="typora画流程图、时序图-顺序图-、甘特图"><a href="#typora画流程图、时序图-顺序图-、甘特图" class="headerlink" title="typora画流程图、时序图(顺序图)、甘特图"></a>typora画流程图、时序图(顺序图)、甘特图</h1><p>Mermaid流程图快速入门</p><h2 id="布局方向"><a href="#布局方向" class="headerlink" title="布局方向"></a>布局方向</h2><p><strong>关键词</strong></p><p><strong>+TB+BT+LR+RL</strong></p><p><img src="/2021/07/19/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/01.png" loading="lazy"></p><p>流程图布局方向,由四种基本方向组成,分别是英文单词:</p><p> top(上), bottom(下),left(左)和 right(右).</p><p>其中可选值:TB (从上到下),BT (从下到上),LR (从左往右)和 RL (从右往左)四种.</p><p><strong>核心</strong>: 仅支持上下左右四个垂直方向,是英文单词首字母大写缩写.</p><blockquote><p>TB</p><p>从上到下:from Top to Bottom</p></blockquote><blockquote><p>源码:</p><p>graph LR </p><p>​    Start –&gt; Stop</p></blockquote><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LR Start --&gt; Stop</code></pre><blockquote><p>BT</p><p>从下到上:from Bottom to Top</p></blockquote><blockquote><p>源码:</p><p>graph BT </p><p>​    Start –&gt; Stop</p></blockquote><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid">graph BTStart --&gt; Stop</code></pre><p>TB  RL 同上</p><h2 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h2><p><strong>关键词</strong></p><p><img src="/2021/07/19/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/02.jpeg" loading="lazy"></p><p>流程图节点形状,默认支持矩形和圆两种基本形状,包括基本形状的简单变体,支持嵌套组合形式,</p><p>其中 [] 表示矩形,() 表示圆弧,{} 表示尖角(窃以为 &lt;&gt; 更适合)等等.</p><p><strong>核心</strong>: 最外层代表主形状,内层辅助修饰.</p><p><strong>一次性节点</strong>,默认表现为矩形节点,其文本内容直接显示 id 的值,适合后续不会出现多次引用的情况.</p><p>id 建议直接写成有意义的文本描述而不是当成唯一标识.</p><blockquote><p>源码:</p><p>graph TD</p><p>​     id</p></blockquote><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid">graph TD id</code></pre><p><strong>可重复节点</strong>,指定节点形状,其文本内容不再是 id 的值而是 <node shape> 的值,适合后续出现多次引用相同节点的情况.</node></p><p>id 代表节点的唯一标识,当前节点的文本描述由 <node shape> 的值指定,建议 id 写成有意义的唯一标识.</node></p><h6 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h6><p>一般格式: [node description] ,[] 中括号表示节点是<strong>矩形</strong>形状,node description 是节点的描述文本.</p><blockquote><p>源码:</p><p>graph LR </p><p>​    id1[矩形]</p></blockquote><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LR id1[矩形]</code></pre><h3 id="1-横向流程图源码格式"><a href="#1-横向流程图源码格式" class="headerlink" title="1.横向流程图源码格式:"></a>1.横向流程图源码格式:</h3><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LRA[方形] --&gt; B(圆角)B --&gt; C&#123;条件a&#125;C --&gt; |a&#x3D;1| D[结果1]C --&gt; |a&#x3D;2| E[结果2]F[横向流程图]</code></pre><h3 id="竖向流程图源码格式"><a href="#竖向流程图源码格式" class="headerlink" title="竖向流程图源码格式:"></a>竖向流程图源码格式:</h3><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid">graph TDA[方形] --&gt; B(圆角)    B --&gt; C&#123;条件a&#125;    C --&gt; |a&#x3D;1| D[结果1]    C --&gt; |a&#x3D;2| E[结果2]    F[竖向流程图]</code></pre><h3 id="3-标准流程图源码格式"><a href="#3-标准流程图源码格式" class="headerlink" title="3.标准流程图源码格式:"></a>3.标准流程图源码格式:</h3><pre class="language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=></span>start<span class="token operator">:</span> 开始框op<span class="token operator">=></span>operation<span class="token operator">:</span> 处理框cond<span class="token operator">=></span>condition<span class="token operator">:</span> <span class="token function">判断框</span><span class="token punctuation">(</span>是或否<span class="token operator">?</span><span class="token punctuation">)</span>sub1<span class="token operator">=></span>subroutine<span class="token operator">:</span> 子流程io<span class="token operator">=></span>inputoutput<span class="token operator">:</span> 输入输出框e<span class="token operator">=></span>end<span class="token operator">:</span> 结束框st<span class="token operator">-</span><span class="token operator">></span>op<span class="token operator">-</span><span class="token operator">></span>cond<span class="token function">cond</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>io<span class="token operator">-</span><span class="token operator">></span>e<span class="token function">cond</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sub1</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>op</code></pre><h3 id="4-标准流程图源码格式-横向"><a href="#4-标准流程图源码格式-横向" class="headerlink" title="4.标准流程图源码格式(横向):"></a>4.标准流程图源码格式(横向):</h3><pre class="language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=></span>start<span class="token operator">:</span> 开始框op<span class="token operator">=></span>operation<span class="token operator">:</span> 处理框cond<span class="token operator">=></span>condition<span class="token operator">:</span> <span class="token function">判断框</span><span class="token punctuation">(</span>是或否<span class="token operator">?</span><span class="token punctuation">)</span>sub1<span class="token operator">=></span>subroutine<span class="token operator">:</span> 子流程io<span class="token operator">=></span>inputoutput<span class="token operator">:</span> 输入输出框e<span class="token operator">=></span>end<span class="token operator">:</span> 结束框<span class="token function">st</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">op</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>cond<span class="token function">cond</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">io</span><span class="token punctuation">(</span>bottom<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>e<span class="token function">cond</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sub1</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>op</code></pre><h3 id="5-UML时序图源码样例"><a href="#5-UML时序图源码样例" class="headerlink" title="5.UML时序图源码样例:"></a>5.UML时序图源码样例:</h3><pre class="language-sequence" data-language="sequence"><code class="language-sequence">对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象A-&gt;对象B: 你真的好吗？</code></pre><h3 id="6-UML时序图源码复杂样例"><a href="#6-UML时序图源码复杂样例" class="headerlink" title="6.UML时序图源码复杂样例:"></a>6.UML时序图源码复杂样例:</h3><pre class="language-sequence" data-language="sequence"><code class="language-sequence">Title: 标题：复杂使用对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象B-&gt;小三: 你好吗小三--&gt;&gt;对象A: 对象B找我了对象A-&gt;对象B: 你真的好吗？Note over 小三,对象B: 我们是朋友participant CNote right of C: 没人陪我玩</code></pre><h3 id="7-UML标准时序图样例"><a href="#7-UML标准时序图样例" class="headerlink" title="7.UML标准时序图样例:"></a>7.UML标准时序图样例:</h3><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头  sequenceDiagram    participant 张三    participant 李四    张三-&gt;王五: 王五你好吗？    loop 健康检查        王五-&gt;王五: 与疾病战斗    end    Note right of 王五: 合理 食物 &lt;br&#x2F;&gt;看医生...    李四--&gt;&gt;张三: 很好!    王五-&gt;李四: 你怎么样?    李四--&gt;王五: 很好!</code></pre><h3 id="8-甘特L图样例"><a href="#8-甘特L图样例" class="headerlink" title="8.甘特L图样例:"></a>8.甘特L图样例:</h3><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid">%% 语法示例        gantt        dateFormat  YYYY-MM-DD        title 软件开发甘特图        section 设计        需求                      :done,    des1, 2014-01-06,2014-01-08        原型                      :active,  des2, 2014-01-09, 3d        UI设计                     :         des3, after des2, 5d    未来任务                     :         des4, after des3, 5d        section 开发        学习准备理解需求                      :crit, done, 2014-01-06,24h        设计框架                             :crit, done, after des2, 2d        开发                                 :crit, active, 3d        未来任务                              :crit, 5d        耍                                   :2d        section 测试        功能测试                              :active, a1, after des3, 3d        压力测试                               :after a1  , 20h        测试报告                               : 48h</code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown菜鸟笔记</title>
      <link href="/2021/07/19/Markdown%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/07/19/Markdown%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><p><code>[toc]</code>目录</p><h1 id="Markdown-列表"><a href="#Markdown-列表" class="headerlink" title="Markdown 列表"></a><font color="#669933">Markdown 列表</font></h1><p>Markdown 标题有两种格式。</p><h3 id="1、使用-和-标记一级和二级标题"><a href="#1、使用-和-标记一级和二级标题" class="headerlink" title="1、使用=和-标记一级和二级标题"></a>1、使用=和-标记一级和二级标题</h3><p>=和-标记语法格式如下：</p><p>我展示的是一级标题</p><p>==</p><p>我展示的是二级标题</p><p>–</p><h3 id="使用-号标记"><a href="#使用-号标记" class="headerlink" title="使用#号标记"></a>使用#号标记</h3><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="Markdown-段落"><a href="#Markdown-段落" class="headerlink" title="Markdown 段落"></a><font color="#669933">Markdown 段落</font></h1><p>Markdown段落没有特殊的格式,直接编写文字就好,<strong>段落的换行是使用两个以上 <em>空格</em> 加上回车</strong></p><p>runoob.com</p><p>google.com</p><p>当然也可以在段落后面使用一个空行来表示重新开始一个段落。</p><p>runoob.com</p><p>google.com</p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>Markdown可以使用以下几种字体</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span><span class="token content">斜体文本</span><span class="token punctuation">*</span></span><span class="token italic"><span class="token punctuation">_</span><span class="token content">斜体文本</span><span class="token punctuation">_</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">粗体文本</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">__</span><span class="token content">粗体文本</span><span class="token punctuation">__</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">粗斜体文本</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">__</span><span class="token content"><span class="token italic"><span class="token punctuation">_</span><span class="token content">粗斜体文本</span><span class="token punctuation">_</span></span></span><span class="token punctuation">__</span></span></code></pre><p><em>斜体文本</em></p><p><em>斜体文本</em></p><p><strong>粗体文本</strong></p><p><strong>粗体文本</strong></p><p><em><strong>粗斜体文本</strong></em></p><p><em><strong>粗斜体文本</strong></em></p><hr><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西.你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token hr punctuation">***</span><span class="token hr punctuation">* * *</span><span class="token hr punctuation">*****</span><span class="token hr punctuation">- - -</span><span class="token hr punctuation">----------</span></code></pre><hr><hr><hr><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>如果段落上的文字要添加删除线,只需要在文字的两端加上两个波浪线~~即可,实例如下:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">RUNOOB.COMGOOGLE.COM<span class="token strike"><span class="token punctuation">~~</span><span class="token content">BAIDU.COM</span><span class="token punctuation">~~</span></span></code></pre><p><del>baidu.com</del></p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>下划线可以通过HTML的<u>标签来实现:</u></p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span>带下划线文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span></code></pre><p><u>带下划线文本</u></p><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>脚注是对文本的补充说明</p><p>Markdown脚注的格式如下:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">[^要注明的文本]</code></pre><p>以下实例演示了脚注的用法：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">创建脚注格式类似这样 [^RUNOOB]。<span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">^RUNOOB</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 菜鸟教程</span> -- 学的不仅是技术，更是梦想！！！</code></pre><p>创建脚注格式类似这样[^runoob].</p><p>[^runoob]: 菜鸟教程 – 学的不仅是技术,更是梦想!!!</p><h1 id="Markdown-列表-1"><a href="#Markdown-列表-1" class="headerlink" title="Markdown 列表"></a><font color="#669933">Markdown 列表</font></h1><p>markdown支持有序列表和无序列表</p><p>无序列表使用(*)、加号(+)或是减号(-)作为列表标记,这些标记后面要添加一个空格,然后再填写内容:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 第一项<span class="token list punctuation">*</span> 第二项<span class="token list punctuation">*</span> 第三项<span class="token list punctuation">+</span> 第一项<span class="token list punctuation">+</span> 第二项<span class="token list punctuation">+</span> 第三项<span class="token list punctuation">-</span> 第一项<span class="token list punctuation">-</span> 第二项<span class="token list punctuation">-</span> 第三项</code></pre><p>显示结果:</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><p><strong>有序列表</strong>使用数字并加上**.** 号来表示,如:</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项前面添加四个空格(没用,用”-加空格”,即无序列表)即可:</p><ol><li>第一项<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素<ul><li><em><strong>写完直接Tab键就嵌套</strong></em></li></ul></li></ul></li><li>第二项<ul><li>同上</li><li>同上</li></ul></li></ol><h1 id="Markdow区块"><a href="#Markdow区块" class="headerlink" title="Markdow区块"></a><font color="#669933">Markdow区块</font></h1><p>Markdown 区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 区块引用<span class="token blockquote punctuation">></span> 菜鸟教程<span class="token blockquote punctuation">></span> 学的不仅是技术更是梦想</code></pre><blockquote><p>区块引用</p><p>菜鸟教程</p><p>学的不仅是技术更是梦想</p></blockquote><p>另外区块是可以嵌套的,一个**&gt;<strong>符号是最外层的,两个</strong>&gt;**符号是第一层嵌套,以此类推:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 最外层<span class="token blockquote punctuation">> ></span> 第一层嵌套<span class="token blockquote punctuation">> > ></span> 第二层嵌套</code></pre><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><h3 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h3><p>实例如下:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 区块中使用列表<span class="token blockquote punctuation">></span> <span class="token list punctuation">1.</span> 第一项<span class="token blockquote punctuation">></span> <span class="token list punctuation">2.</span> 第二项<span class="token blockquote punctuation">></span> <span class="token list punctuation">+</span> 第一项<span class="token blockquote punctuation">></span> <span class="token list punctuation">-</span> 第二项<span class="token blockquote punctuation">></span> <span class="token list punctuation">*</span> 第三项</code></pre><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>无序,用的+</li></ul><ul><li>用的-</li></ul><ul><li>用的*</li></ul></blockquote><h3 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h3><p>如果要在列表项目内放入区块,那么就需要在**&gt;**前添加四个空格的缩进。(按一下删除键)</p><p>实例如下:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 第一项> 菜鸟教程    > 学的不仅是技术更是梦想   <span class="token list punctuation">*</span> 第二项</code></pre><ul><li><p>第一项</p><blockquote><p>菜鸟教程</p><p>学的啥也不是</p></blockquote></li><li><p>第二项</p></li></ul><h1 id="Markdown代码"><a href="#Markdown代码" class="headerlink" title="Markdown代码"></a><font color="#669933">Markdown代码</font></h1><p>如果是段落上的一个函数或者片段的代码可以用<strong>反引号</strong>把它包起来（**`**），例如：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token code-snippet code keyword">`printf()`</span> 函数</code></pre><p><code>printf()</code>函数</p><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>代码区块使用4个<strong>空格</strong>或者一个<strong>制表符(Tab键)</strong>    不知道咋搞</p><p>实例如下:</p><p>​    &lt;?php</p><p>​    echo ‘RUNOOB’;</p><p>​    function test(){</p><p>​        echo ‘test’;</p><p>​    }</p><p>你也可以用 <strong>```</strong> 包裹一段代码，并指定一种语言（也可以不指定）：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">```javascript$(document).ready(function () &#123;    alert('RUNOOB');&#125;);```</code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'RUNOOB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Markdown链接"><a href="#Markdown链接" class="headerlink" title="Markdown链接"></a><font color="#669933">Markdown链接</font></h2><p>链接使用方法如下:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">链接名称</span>](<span class="token url">链接地址</span>)</span>或者<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>链接地址</span><span class="token punctuation">></span></span></code></pre><p>例如:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">这是一个链接<span class="token url">[<span class="token content">菜鸟教程</span>](<span class="token url">https://www.runoob.com</span>)</span></code></pre><p>显示结果如下:</p><p>这是一个链接<a href="https://www.runoob.com/">菜鸟教程</a></p><p><em>直接使用链接地址</em>:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">&lt;https://www.runoob.com></code></pre><p><a href="https://www.runoob.com/">https://www.runoob.com</a></p><p><strong>高级链接</strong></p><p>我们可以通过<strong>变量</strong>来设置一个链接,变量赋值在文档的末尾进行:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">这个链接用 1 作为网址变量 <span class="token url">[<span class="token content">Google</span>][<span class="token variable">1</span>]</span>这个链接用 runoob 作为网址变量 <span class="token url">[<span class="token content">Runoob</span>][<span class="token variable">runoob</span>]</span>然后在文档的结尾为变量赋值（网址）  <span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> http://www.google.com/</span>  <span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">runoob</span><span class="token punctuation">]</span><span class="token punctuation">:</span> http://www.runoob.com/</span></code></pre><p>这个链接用<strong>1</strong>作为网址变量<a href="http://www.google.com/">Google</a></p><p>这个链接用<strong>runoob</strong>作为网址变量<a href="http://www.runoob.com/">Runoob</a></p><p>然后再文档的结尾为变量赋值(网址)</p><h1 id="Markdown图片"><a href="#Markdown图片" class="headerlink" title="Markdown图片"></a><font color="#669933">Markdown图片</font></h1><p>Markdown图片语法格式如下:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">alt 属性文本</span>](<span class="token url">图片地址</span>)</span>!<span class="token url">[<span class="token content">alt 属性文本</span>](<span class="token url">图片地址</span> <span class="token string">"可选标题"</span>)</span></code></pre><ul><li>开头一个感叹号!</li></ul><ul><li>接着一个方括号,里面放上图片的替代文字</li><li>接着一个普通括号,里面放上图片的网址,最后还可以用引号包住并加上选择性的’title’属性的文字。</li></ul><p>使用实例:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">RUNOOB 图标</span>](<span class="token url">http://static.runoob.com/images/runoob-logo.png</span>)</span></code></pre><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" loading="lazy"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB替代标题" loading="lazy"></p><p>当然,你也可以像网址那样对图片地址使用 变量:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">这个链接用 1 作为网址变量 <span class="token url">[<span class="token content">RUNOOB</span>][<span class="token variable">1</span>]</span>.然后在文档的结尾为变量赋值（网址）<span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> http://static.runoob.com/images/runoob-logo.png</span></code></pre><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">RUNOOB</a></p><p>然后在文档的结尾为变量赋值（网址）</p><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p loading="lazy"><img src="http://static.runoob.com/images/runoob-logo.png" width="50%" loading="lazy"><h1 id="Markdown表格"><a href="#Markdown表格" class="headerlink" title="Markdown表格"></a><font color="#669933">Markdown表格</font></h1><p>Markdown制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p><p>语法格式如下：会自动构成表</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important">  表头   </span><span class="token punctuation">|</span><span class="token table-header important"> 表头  </span><span class="token punctuation">|</span></span><span class="token table-line"><span class="token punctuation">|</span>  <span class="token punctuation">----</span>  <span class="token punctuation">|</span> <span class="token punctuation">----</span>  <span class="token punctuation">|</span></span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"> 单元格  </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token punctuation">|</span><span class="token table-data"> 单元格  </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span></span></span></code></pre><table><thead><tr><th align="center">表头</th><th align="center">表头</th></tr></thead><tbody><tr><td align="center">单元格</td><td align="center">单元格</td></tr><tr><td align="center">单元格</td><td align="center">单元格</td></tr></tbody></table><p>对齐方式:</p><p><strong>我们可以设置表格的对齐方式：</strong></p><ul><li><strong>-:</strong> 设置内容和标题栏居右对齐。</li><li><strong>:-</strong> 设置内容和标题栏居左对齐。</li><li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li></ul><p>实例如下：</p><table><thead><tr><th>左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td>:—-</td><td align="right">—-:</td><td align="center">:-:</td></tr></tbody></table><h1 id="Markdown高级技巧"><a href="#Markdown高级技巧" class="headerlink" title="Markdown高级技巧"></a><font color="#669933">Markdown高级技巧</font></h1><p><strong>支持的HTML元素</strong></p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">使用 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kbd</span><span class="token punctuation">></span></span>Ctrl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kbd</span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kbd</span><span class="token punctuation">></span></span>Alt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kbd</span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kbd</span><span class="token punctuation">></span></span>Del<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kbd</span><span class="token punctuation">></span></span> 重启电脑</code></pre><p>使用<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd>重启电脑</p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content">文本加粗</span><span class="token punctuation">**</span></span> \*\* 正常显示星号 \*\*</code></pre><p><strong>文本加粗</strong></p><p>**正常显示星号**</p><hr><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre class="language-none"><code class="language-none">\   反斜线&#96;   反引号*   星号_   下划线&#123;&#125;  花括号[]  方括号()  小括号#   井字号+   加号-   减号.   英文句点!   感叹号</code></pre><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">$$\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 =  \begin&#123;vmatrix&#125; \mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\\end&#123;vmatrix&#125;$&#123;$tep1&#125;&#123;\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;$$</code></pre><p>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}<br>$$</p><h1 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a><font color="#669933">其他功能</font></h1><h3 id="添加待办事项"><a href="#添加待办事项" class="headerlink" title="添加待办事项"></a>添加待办事项</h3><pre class="language-markdown" data-language="markdown"><code class="language-markdown">三只青蛙<span class="token list punctuation">*</span> [x] 第一只青蛙<span class="token list punctuation">-</span> [ ] 第二只青蛙<span class="token list punctuation">+</span> [ ] 第三只青蛙</code></pre><p>三只青蛙<img src="/2021/07/19/Markdown%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/frog.png" loading="lazy"></p><ul><li><input checked disabled type="checkbox"> 第一只青蛙</li><li><input disabled type="checkbox"> 第二只青蛙</li><li><input disabled type="checkbox"> 第三只青蛙</li></ul><h3 id="插入图表"><a href="#插入图表" class="headerlink" title="插入图表"></a>插入图表</h3><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid">pie    title Pie Chart    &quot;Dogs&quot; : 386    &quot;Cats&quot; : 85    &quot;Rats&quot; : 150 </code></pre><h2 id="markdown使用上标、下标"><a href="#markdown使用上标、下标" class="headerlink" title="markdown使用上标、下标"></a>markdown使用上标、下标</h2><pre class="language-markdown" data-language="markdown"><code class="language-markdown">X<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>i<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span>H<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span>O  CO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span>益达<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span>TM<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span></code></pre><p>X<sub>i</sub> </p><p>H<sub>2</sub>O  CO<sub>2</sub> </p><p>益达<sup>TM</sup></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-theme-pure</title>
      <link href="/2021/07/19/hexo-theme-pure/"/>
      <url>/2021/07/19/hexo-theme-pure/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-github搭建博客服务器"><a href="#hexo-github搭建博客服务器" class="headerlink" title="hexo+github搭建博客服务器"></a>hexo+github搭建博客服务器</h1><blockquote><ol><li>csdn,简书,有道笔记 - <strong>广告比较多</strong></li><li>hexo+github[比较慢,翻墙]/gitee[Git pages服务器 - 维护]/<strong>阿里云服务器</strong></li></ol></blockquote><h1 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h1><blockquote><ol><li>非中文的非特殊字符的目录中[目录中不要出现空格或者带有特殊符号的]</li><li>D:/node-v14.17.3-win-x64</li></ol></blockquote><h2 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h2><blockquote><ol><li><p>桌面计算机 - 右击 - 属性 - 高级系统设置 - 环境变量(N)</p></li><li><p>定位到下方的系统变量</p></li><li><p>定位到变量名 - Path - 编辑 - 新建</p></li><li><p>D:/node-v14.17.3-win-x64</p></li><li><p>一定要关闭所有的环境变量配置的窗口 - 确定</p></li><li><p>打开终端[如果终端已经打开了,关闭 - 重新打开]</p><p>win[微软图标]+r - 输入cmd - 输入如下指令检测nodejs是否配置成功</p><pre class="language-none"><code class="language-none">npm -v6.14.5 出现版本号,则说明配置成功            如果出现了不是内部或者外部的命令的同学,请检查自己的nodejs解压缩之后的路径是否成功配置到了path中</code></pre></li></ol></blockquote><h2 id="简单认识npm"><a href="#简单认识npm" class="headerlink" title="简单认识npm"></a>简单认识npm</h2><blockquote><p>npm是javascript的一个**包[前端框架]**管理工具,并且是nodejs平台默认的包管理工具.</p><p>通过npm可以安装,共享,分发代码,管理项目依赖关系.</p><p>类似于java中的maven或者gradle[强大的项目构建工具以及项目依赖管理工具]</p></blockquote><h2 id="npm简单使用"><a href="#npm简单使用" class="headerlink" title="npm简单使用"></a>npm简单使用</h2><h3 id="修改镜像"><a href="#修改镜像" class="headerlink" title="修改镜像"></a>修改镜像</h3><blockquote><p>为了下载速度变快,修改npm的镜像</p><pre class="language-none"><code class="language-none">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</code></pre><p>验证一下,镜像是否成功修改了</p><pre class="language-none"><code class="language-none">npm config get registryhttps:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</code></pre></blockquote><h2 id="简单使用-不需要操作"><a href="#简单使用-不需要操作" class="headerlink" title="简单使用 - 不需要操作"></a>简单使用 - 不需要操作</h2><blockquote><ol><li><p>下载bootstrap</p><p>npm install 框架名称 - 默认下载的是最新的版本</p><pre class="language-none"><code class="language-none">npm install bootstrap@3</code></pre></li></ol></blockquote><h1 id="Hexo官网"><a href="#Hexo官网" class="headerlink" title="Hexo官网"></a>Hexo官网</h1><blockquote><p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><ol><li><p>假设你在D盘根目录下新建了一个文件夹hello-hexo[博客项目的根目录]</p></li><li><p>win+r - 打开终端</p></li><li><p>通过dos命令进入到hello-hexo目录中</p><pre class="language-none"><code class="language-none">C:&#x2F;User&#x2F;admin&gt;d:D:&gt;cd hello-hexoD:&#x2F;hello-hexo&gt;npm install hexo-cli -g</code></pre></li></ol></blockquote><h2 id="创建真正的博客目录"><a href="#创建真正的博客目录" class="headerlink" title="创建真正的博客目录"></a>创建真正的博客目录</h2><pre class="language-none"><code class="language-none">D:&#x2F;hello-hexo&gt;hexo init hello-blogcd hello-blogD:&#x2F;hello-hexo&#x2F;hello-blog&gt;npm install</code></pre><h2 id="测试-启动博客服务器"><a href="#测试-启动博客服务器" class="headerlink" title="测试 - 启动博客服务器"></a>测试 - 启动博客服务器</h2><pre class="language-none"><code class="language-none">D:&#x2F;hello-hexo&#x2F;hello-blog&gt;hexo s关闭服务器ctrl+c</code></pre><p><em><strong>打开浏览器输入:localhost:4000</strong></em></p><h2 id="常用主题模板"><a href="#常用主题模板" class="headerlink" title="常用主题模板"></a>常用主题模板</h2><blockquote><p><a href="https://blog.csdn.net/zgd826237710/article/details/99671027">https://blog.csdn.net/zgd826237710/article/details/99671027</a></p><p>使用git命令来进行克隆,需要提前安装好git,检测git是否安装成功,<strong>重新打开终端</strong></p><pre class="language-none"><code class="language-none">git --version</code></pre></blockquote><h2 id="注册码云账号"><a href="#注册码云账号" class="headerlink" title="注册码云账号"></a>注册码云账号</h2><blockquote><p>推荐用QQ注册一下</p><p>本地配置码云账号信息 - 配置文件 - 位置windows的用户主目录下</p><p>C:/User/计算机用户名 - 观察是否存在**.gitconfig**文件,添加如下内容</p><pre class="language-none"><code class="language-none">[user]email &#x3D; 码云的QQ邮箱name &#x3D; 用户名</code></pre></blockquote><h2 id="安装模板"><a href="#安装模板" class="headerlink" title="安装模板"></a>安装模板</h2><blockquote><p>通过cmd进入到hello-blog目录中的themes目录中</p><pre class="language-none"><code class="language-none">D:&#x2F;hello-hexo&#x2F;hello-blog&gt;cd themesD:&#x2F;&#x2F;hello-hexo&#x2F;hello-blog&#x2F;themes&gt;git clone https:&#x2F;&#x2F;gitee.com&#x2F;guancg&#x2F;hexo-theme-pure.git</code></pre></blockquote><p>或者直接从github上直接clone</p><pre class="language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;cofess&#x2F;hexo-theme-pure.git</code></pre><h1 id="更新主题配置"><a href="#更新主题配置" class="headerlink" title="更新主题配置"></a>更新主题配置</h1><blockquote><ol><li><p>指定新的主题</p><p>hello-blog目录下的_config.yml文件</p><pre class="language-none"><code class="language-none">theme: hexo-theme-pure</code></pre></li></ol></blockquote><blockquote><ol><li>重启服务器hexo s</li></ol></blockquote><h1 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h1><p>hexo-theme-pure/_config.yml文件</p><pre class="language-none"><code class="language-none">overriden  author: 亲爱的  author_title: 高级打字员  author_description: 个人简介。  location: SuZhou, China</code></pre><h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><blockquote><p>语法的编辑器 - <a href="https://typora.io/">https://typora.io/</a></p><p>文件的后缀是md</p><pre class="language-none"><code class="language-none">常用语法如下:1. 标题的语法:1~6标题 - # 一级标题    ## 二级标题   2. 代码块 - java,js,mysql...~~~java 敲enter键3. 列表3-1. 无序列表     * 列表名称     有序列表     1. 列表名称4. 高亮显示   &#96;高亮显示内容&#96;5. 加粗字体   **粗体**6. 斜体   *斜体*7. 粗+斜   ***粗斜***8. 段落   &gt; 空格9. 引入外部图片   ![](xx.png)10. 表格</code></pre></blockquote><h1 id="新建博文"><a href="#新建博文" class="headerlink" title="新建博文"></a>新建博文</h1><pre class="language-none"><code class="language-none">D:&#x2F;&#x2F;hello-hexo&#x2F;hello-blog&gt;hexo n java</code></pre><p>效果:hello-blog目录下的source/_ports/自动生成一个java.md文件</p><p>重启blog服务器</p><pre class="language-none"><code class="language-none">D:&#x2F;&#x2F;hello-hexo&#x2F;hello-blog&gt;hexo s</code></pre><h1 id="主题的侧边栏"><a href="#主题的侧边栏" class="headerlink" title="主题的侧边栏"></a>主题的侧边栏</h1><blockquote><p>侧边栏的链接生效</p><p>将/hello-blog/themes/hexo-theme-pure/_source/下的除了_data文件夹,其余文件夹</p><p>拷贝一份放入到hello-blog目录下的source目录中即可</p></blockquote><h1 id="文章的分类和标签"><a href="#文章的分类和标签" class="headerlink" title="文章的分类和标签"></a>文章的分类和标签</h1><blockquote><p>只需要在文章的.md文件的自动生成的头部添加</p><pre class="language-none"><code class="language-none">title: javadate: 2021-07-13 08:44:42categories: javatags: java</code></pre></blockquote><h1 id="博客的语言环境设置"><a href="#博客的语言环境设置" class="headerlink" title="博客的语言环境设置"></a>博客的语言环境设置</h1><blockquote><p>设置中文</p><p>hello-blog下的_config.yml文件中</p><p>language: zh-CN</p></blockquote><h1 id="图片显示问题"><a href="#图片显示问题" class="headerlink" title="图片显示问题"></a>图片显示问题</h1><blockquote><ol><li><p>安装插件 - npm install <a href="https://gitee.com/guancg/hexo-asset-image.git">https://gitee.com/guancg/hexo-asset-image.git</a> –save 或者 </p><p>npm install <a href="https://github.com/CodeFalling/hexo-asset-image">https://github.com/CodeFalling/hexo-asset-image</a> –save  </p></li><li><p>需要到hello-blog/_config.yml文件中进行配置</p><pre class="language-none"><code class="language-none">post_asset_folder: true</code></pre></li><li><p>hexo n 机器学习</p><p><code>效果就是除了生成了机器学习.md还有一个机器学习文件夹,那么这篇文章的所有的图片就可以存储在机器学习文件夹中</code></p></li><li><p>hexo s</p></li><li><p>设置typora图像路径</p><p><img src="/2021/07/19/hexo-theme-pure/01.png" loading="lazy"></p><p>以后直接粘贴图片就可以自动保存到 hexo 配置的 post_asset_folder 文件夹里,自动渲染了</p><p><strong>注意修改图片路径中的 \ 为 / ,并且不带 <code>.</code>或者<code>./</code> 直接写<code>目录/图片</code></strong></p></li></ol></blockquote><h1 id="内置搜索的功能"><a href="#内置搜索的功能" class="headerlink" title="内置搜索的功能"></a>内置搜索的功能</h1><blockquote><pre class="language-none"><code class="language-none"># Searchsearch:insight: true # you need to install &#96;hexo-generator-json-content&#96; before using Insight Searchbaidu: false # you need to disable other search engines to use Baidu search</code></pre><p>安装内置搜索插件</p><p>npm i -S hexo-generator-json-content</p></blockquote><h1 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h1><blockquote><p>不需要本地数据库进行存储的,用的是第三方的.</p><p>LeanCloud - 官网地址 - <a href="https://www.leancloud.cn/">https://www.leancloud.cn/</a></p><p>注册 - 登录 - 控制台 - 创建应用 - 右下设置 - 应用凭证</p><p>appId - sljUq97vUAdLAo7XQdf13aFR-gzGzoHsz</p><p>appKey - 3hn4ijEgSzJeRV4nkmXThmGV</p></blockquote><pre class="language-none"><code class="language-none">在hexo-theme-pure\_config.yml文件中配置</code></pre><blockquote><pre class="language-none"><code class="language-none">valine: # Valine. https:&#x2F;&#x2F;valine.js.orgappid: sljUq97vUAdLAo7XQdf13aFR-gzGzoHsz  # your leancloud application appidappkey: 3hn4ijEgSzJeRV4nkmXThmGV# your leancloud application appkeynotify: false # mail notifier , https:&#x2F;&#x2F;github.com&#x2F;xCss&#x2F;Valine&#x2F;wikiverify: false # Verification codeplaceholder: Just go go # comment box placeholderavatar: mm # gravatar stylemeta: nick,mail,link # custom comment headerpageSize: 10 # pagination sizevisitor: true # Article reading statistic https:&#x2F;&#x2F;valine.js.org&#x2F;visitor.html</code></pre></blockquote><p>#字数统计&amp;阅读时长</p><blockquote><ol><li><p>npm i -S hexo-wordcount</p></li><li><p>hexo-theme-pure_config.yml文件中配置</p><pre class="language-none"><code class="language-none">postCount:  enable: true  wordcount: true  # 文章字数统计  min2read: true  # 阅读时长预计 </code></pre></li></ol></blockquote><h1 id="附件-优秀插件"><a href="#附件-优秀插件" class="headerlink" title="附件-优秀插件"></a>附件-优秀插件</h1><blockquote><ol><li><p>显示图片</p><pre class="language-none"><code class="language-none">npm install https:&#x2F;&#x2F;gitee.com&#x2F;guancg&#x2F;hexo-asset-image.git --save</code></pre></li><li><p>内置搜索</p><pre class="language-none"><code class="language-none">npm i -S hexo-generator-json-content</code></pre></li><li><p>字数统计&amp;阅读时长</p><pre class="language-none"><code class="language-none">npm i -S hexo-wordcount</code></pre></li></ol></blockquote><blockquote><ol><li><p>github部署</p><pre class="language-none"><code class="language-none">npm install hexo-deployer-git --save</code></pre></li></ol></blockquote><h1 id="github注册一下"><a href="#github注册一下" class="headerlink" title="github注册一下"></a>github注册一下</h1><blockquote><p>github.com</p></blockquote><blockquote><p>chrome浏览器 + iguge - <a href="https://iguge.app/">https://iguge.app/</a></p></blockquote><blockquote><p>新建的仓库的名称必须是<strong>zr-java.github.io</strong></p><p>仓库地址 - <a href="https://github.com/ZR-java/zr-java.github.io.git">https://github.com/ZR-java/zr-java.github.io.git</a></p></blockquote><blockquote><p>安装github部署插件</p><p>npm install hexo-deployer-git –save</p></blockquote><blockquote><p>hello-blog/_config.yml文件</p><pre class="language-none"><code class="language-none">deploy:type: &#39;git&#39;repo: &#39;https:&#x2F;&#x2F;github.com&#x2F;ZR-java&#x2F;zr-java.github.io.git&#39;branch: &#39;master&#39;</code></pre></blockquote><pre class="language-none"><code class="language-none">hexo三连操作hexo clean：清除本地缓存hexo g：生成新的静态文件hexo s：本地查看效果（如果正常，使用 hexo d 重新部署）</code></pre><p>浏览器输入 - zr-java.github.io</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
